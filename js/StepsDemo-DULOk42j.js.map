{"version":3,"file":"StepsDemo-DULOk42j.js","sources":["../../src/doc/steps/Documentation.vue","../../src/doc/steps/SourceCode.vue","../../src/doc/steps/Personal.vue","../../src/doc/steps/Seat.vue","../../src/doc/steps/Payment.vue","../../src/doc/steps/Confirmation.vue","../../src/doc/steps/index.vue","../../src/views/steps/StepsDemo.vue"],"sourcesContent":["<template>\n  <div>\n    <h5>Import</h5>\n    <DocSectionCode :code=\"importCode\" importCode />\n\n    <h5>MenuModel</h5>\n    <p>\n      Steps uses the common MenuModel API to define the items, visit\n      <router-link to=\"/menumodel\">MenuModel API</router-link> for details.\n    </p>\n\n    <h5>Getting Started</h5>\n    <p>\n      Steps is integrated with Vue Router and requires a collection of menuitems\n      as its model.\n    </p>\n    <DocSectionCode :code=\"baseCode\" />\n    <DocSectionCode :code=\"baseCode2\" importCode />\n\n    <h5>Interactive</h5>\n    <p>\n      Items are readonly by default, if you'd like to make them interactive then\n      disable <i>readonly</i> property.\n    </p>\n    <DocSectionCode :code=\"interactiveCode\" />\n\n    <h5>Properties</h5>\n    <p>\n      Any property as style and class are passed to the main container element.\n      Following are the additional properties to configure the component.\n    </p>\n    <div class=\"doc-tablewrapper\">\n      <table class=\"doc-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Default</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>id</td>\n            <td>string</td>\n            <td>null</td>\n            <td>Unique identifier of the element.</td>\n          </tr>\n          <tr>\n            <td>model</td>\n            <td>array</td>\n            <td>null</td>\n            <td>An array of menuitems.</td>\n          </tr>\n          <tr>\n            <td>readonly</td>\n            <td>boolean</td>\n            <td>true</td>\n            <td>Whether the items are clickable or not.</td>\n          </tr>\n          <tr>\n            <td>exact</td>\n            <td>boolean</td>\n            <td>true</td>\n            <td>\n              Whether to apply 'router-link-active-exact' class if route exactly\n              matches the item path.\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <h5>Styling</h5>\n    <p>\n      Following is the list of structural style classes, for theming classes\n      visit <router-link to=\"/theming\">theming</router-link> page.\n    </p>\n    <div class=\"doc-tablewrapper\">\n      <table class=\"doc-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Element</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>p-steps</td>\n            <td>Container element.</td>\n          </tr>\n          <tr>\n            <td>p-steps-item</td>\n            <td>Menuitem element.</td>\n          </tr>\n          <tr>\n            <td>p-steps-number</td>\n            <td>Number of menuitem.</td>\n          </tr>\n          <tr>\n            <td>p-steps-title</td>\n            <td>Label of menuitem.</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <h5>Dependencies</h5>\n    <p>None.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Documentation',\n  data() {\n    return {\n      importCode: {\n        basic: `\nimport Steps from 'primevue2/steps';\n        `\n      },\n      baseCode: {\n        basic: `\n<Steps :model=\"items\" />\n<router-view />\n        `\n      },\n      baseCode2: {\n        basic: `\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\titems: [{\n                label: 'Personal',\n                to: '/steps'\n            },\n            {\n                label: 'Seat',\n                to: '/steps/seat'\n            },\n            {\n                label: 'Payment',\n                to: '/steps/payment'\n            },\n            {\n                label: 'Confirmation',\n                to: '/steps/confirmation'\n            }]\n\t\t}\n\t}\n}\n        `\n      },\n      interactiveCode: {\n        basic: `\n<Steps :model=\"items\" :readonly=\"false\" />\n<router-view />\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <a\n      href=\"https://github.com/nangongpo/primevue2/tree/main/src/views/steps\"\n      class=\"btn-viewsource\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\">\n      <span>View on GitHub</span>\n    </a>\n\n    <DocSectionCode :code=\"sourceCode1\" />\n    <DocSectionCode :code=\"sourceCode2\" importCode />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SourceCode',\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<Steps :model=\"items\" :readonly=\"true\"  style=\"margin-bottom: 1rem\" />\n<keep-alive>\n    <router-view :formData=\"formObject\" @prevPage=\"prevPage($event)\" @nextPage=\"nextPage($event)\" @complete=\"complete\" />\n</keep-alive>\n        `\n      },\n      sourceCode2: {\n        basic: `\nexport default {\n    data() {\n        return {\n            items: [{\n                label: 'Personal',\n                to: '/steps'\n            },\n            {\n                label: 'Seat',\n                to: '/steps/seat'\n            },\n            {\n                label: 'Payment',\n                to: '/steps/payment'\n            },\n            {\n                label: 'Confirmation',\n                to: '/steps/confirmation'\n            }],\n            formObject: {}\n        }\n    },\n    components: {\n        'StepsDoc': StepsDoc\n    },\n    methods: {\n        nextPage(event) {\n            for (let field in event.formData) {\n                this.formObject[field] = event.formData[field];\n            }\n\n            this.$router.push(this.items[event.pageIndex + 1].to);\n        },\n        prevPage(event) {\n            this.$router.push(this.items[event.pageIndex - 1].to);\n        },\n        complete() {\n            this.$toast.add({severity:'success', summary:'Order submitted', detail: 'Dear, ' + this.formObject.firstname + ' ' + this.formObject.lastname + ' your order completed.'});\n        }\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <DocSectionCode :code=\"sourceCode1\" />\n    <DocSectionCode :code=\"sourceCode2\" importCode />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SourceCode',\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<div class=\"stepsdemo-content\">\n    <Card>\n        <template #title>\n            Personal Information\n        </template>\n        <template #subtitle>\n            Enter your information\n        </template>\n        <template #content>\n            <p class=\"p-text-secondary\">Enter your information</p>\n            <div class=\"p-fluid\">\n                <div class=\"field\">\n                    <label for=\"firstname\">Firstname</label>\n                    <InputText id=\"firstname\" v-model=\"$v.firstname.$model\" :class=\"{'p-invalid':$v.firstname.$invalid && submitted}\" />\n                    <small v-show=\"$v.firstname.$invalid && submitted\" class=\"p-error\">Firstname is required.</small>\n                </div>\n                <div class=\"field\">\n                    <label for=\"lastname\">Lastname</label>\n                    <InputText v-model=\"$v.lastname.$model\" :class=\"{'p-invalid':$v.lastname.$invalid && submitted}\" />\n                    <small v-show=\"$v.lastname.$invalid && submitted\" class=\"p-error\">Lastname is required.</small>\n                </div>\n                <div class=\"field\">\n                    <label for=\"age\">Age</label>\n                    <InputText id=\"age\" v-model=\"$v.age.$model\" :class=\"{'p-invalid':$v.age.$error && submitted}\" />\n                    <small v-show=\"$v.age.$invalid && submitted\" class=\"p-error\">Age should be a number.</small>\n                </div>\n            </div>\n        </template>\n        <template #footer>\n            <div class=\"grid grid-nogutter justify-content-between\">\n                <i></i>\n                <Button label=\"Next\" @click=\"nextPage(!$v.$invalid)\" icon=\"pi pi-angle-right\" iconPos=\"right\" />\n            </div>\n        </template>\n    </Card>\n</div>\n        `\n      },\n      sourceCode2: {\n        basic: `\nimport {required, integer} from 'vuelidate/lib/validators';\n\nexport default {\n    data () {\n        return {\n            firstname: '',\n            lastname: '',\n            age: '',\n            submitted: false\n        }\n    },\n    validations: {\n        firstname: {\n            required\n        },\n        lastname: {\n            required\n        },\n        age: {\n            integer\n        }\n    },\n    methods: {\n        nextPage(isFormValid) {\n            this.submitted = true;\n\n            if (!isFormValid) {\n                return;\n            }\n\n            this.$emit('nextPage', {formData: {firstname: this.firstname, lastname: this.lastname, age: this.age}, pageIndex: 0});\n        }\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <DocSectionCode :code=\"sourceCode1\" />\n    <DocSectionCode :code=\"sourceCode2\" importCode />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SourceCode',\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<div class=\"stepsdemo-content\">\n    <Card>\n        <template #title>\n            Seat Information\n        </template>\n        <template #subtitle>\n            Choose your seat\n        </template>\n        <template #content>\n            <div class=\"p-fluid formgrid grid\">\n                <div class=\"field col-12 md:col-6\">\n                    <label for=\"class\">Class</label>\n                    <Dropdown inputId=\"class\" v-model=\"selectedClass\" :options=\"classes\" @change=\"setVagons($event)\" optionLabel=\"name\" placeholder=\"Select a Class\" />\n                </div>\n                <div class=\"field col-12 md:col-6\">\n                    <label for=\"lastname\">Wagon</label>\n                    <Dropdown inputId=\"wagon\" v-model=\"selectedVagon\" :options=\"vagons\" @change=\"setSeats($event)\" optionLabel=\"vagon\" placeholder=\"Select a Vagon\" />\n                </div>\n                <div class=\"field col-12\">\n                    <label for=\"seat\">Seat</label>\n                    <Dropdown inputId=\"seat\" v-model=\"selectedSeat\" :options=\"seats\" optionLabel=\"seat\" placeholder=\"Select a Seat\" />\n                </div>\n            </div>\n        </template>\n        <template #footer>\n            <div class=\"grid grid-nogutter justify-content-between\">\n                <Button label=\"Back\" @click=\"prevPage()\" icon=\"pi pi-angle-left\" />\n                <Button label=\"Next\" @click=\"nextPage()\" icon=\"pi pi-angle-right\" iconPos=\"right\" />\n            </div>\n        </template>\n    </Card>\n</div>\n        `\n      },\n      sourceCode2: {\n        basic: `\nexport default {\n    data () {\n        return {\n            selectedClass: '',\n            classes: [\n                {name: 'First Class', code: 'A', factor: 1},\n                {name: 'Second Class', code: 'B', factor: 2},\n                {name: 'Third Class', code: 'C', factor: 3}\n            ],\n            vagons: [],\n            selectedVagon: '',\n            seats: [],\n            selectedSeat: ''\n        }\n    },\n    methods: {\n        setVagons(event) {\n            if (this.selectedClass && event.value) {\n                this.vagons = [];\n                this.seats = [];\n                for (let i = 1; i < 3 * event.value.factor; i++) {\n                    this.vagons.push({vagon: i + event.value.code, type: event.value.name, factor: event.value.factor});\n                }\n            }\n        },\n        setSeats(event) {\n            if (this.selectedVagon && event.value) {\n                this.seats = [];\n                for (let i = 1; i < 10 * event.value.factor; i++) {\n                    this.seats.push({seat: i, type: event.value.type});\n                }\n            }\n        },\n        nextPage() {\n            this.$emit('nextPage', {formData: {class: this.selectedClass.name, vagon: this.selectedVagon.vagon, seat: this.selectedSeat.seat}, pageIndex: 1});\n        },\n        prevPage() {\n            this.$emit('prevPage', {pageIndex: 1});\n        }\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <DocSectionCode :code=\"sourceCode1\" />\n    <DocSectionCode :code=\"sourceCode2\" importCode />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SourceCode',\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<div class=\"stepsdemo-content\">\n    <Card>\n        <template #title>\n            Payment Information\n        </template>\n        <template #subtitle>\n            Enter your card details\n        </template>\n        <template #content>\n            <div class=\"p-fluid formgrid grid\">\n                <div class=\"field col-12\">\n                    <label for=\"class\">Class</label>\n                    <InputText type=\"text\" v-model=\"cardholderName\" />\n                </div>\n                <div class=\"field col-8\">\n                    <label id=\"number\" for=\"lastname\">Number</label>\n                    <InputMask id=\"number\" mask=\"9999-9999-9999-9999\" v-model=\"cardholderNumber\" />\n                </div>\n                <div class=\"field col-2\">\n                    <label id=\"date\" for=\"date\">Date</label>\n                    <InputMask id=\"date\" mask=\"99/99\" v-model=\"date\" />\n                </div>\n                <div class=\"field col-2\">\n                    <label for=\"cvv\">CVV</label>\n                    <InputMask id=\"cvv\" mask=\"999\" v-model=\"cvv\" />\n                </div>\n                <div class=\"field-checkbox col-12\">\n                    <Checkbox id=\"remember\" v-model=\"remember\" :binary=\"true\" />\n                    <label for=\"remember\" class=\"p-checkbox-label\">Save credit card information for future</label>\n                </div>\n            </div>\n        </template>\n        <template #footer>\n            <div class=\"grid grid-nogutter justify-content-between\">\n                <Button label=\"Back\" @click=\"prevPage()\" icon=\"pi pi-angle-left\" />\n                <Button label=\"Next\" @click=\"nextPage()\" icon=\"pi pi-angle-right\" iconPos=\"right\" />\n            </div>\n        </template>\n    </Card>\n</div>\n        `\n      },\n      sourceCode2: {\n        basic: `\nexport default {\n    data () {\n        return {\n            cardholderName:'',\n            cardholderNumber:'',\n            date:'',\n            cvv:'',\n            remember:false\n        }\n    },\n    methods: {\n        nextPage() {\n            this.$emit('nextPage', {formData: {cardholderName: this.cardholderName, cardholderNumber: this.cardholderNumber, date: this.date, cvv: this.cvv}, pageIndex: 2});\n        },\n        prevPage() {\n            this.$emit('prevPage', {pageIndex: 2});\n        }\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <DocSectionCode :code=\"sourceCode1\" />\n    <DocSectionCode :code=\"sourceCode2\" importCode />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SourceCode',\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<div class=\"stepsdemo-content\">\n    <Card>\n        <template #title>\n            Confirmation\n        </template>\n        <template #content>\n            <div class=\"field col-12\">\n                <label for=\"class\">Name</label>\n                <b>{{formData.firstname ? formData.firstname : '-'}} {{formData.lastname ? formData.lastname : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">Age</label>\n                <b>{{formData.age ? formData.age : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">Seat Class</label>\n                <b>{{formData.class ? formData.class : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">Wagon Number</label>\n                <b>{{formData.vagon ? formData.vagon : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">Seat</label>\n                <b>{{formData.seat ? formData.seat : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">Cardholder Name</label>\n                <b>{{formData.cardholderName ? formData.cardholderName : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">Card Number</label>\n                <b>{{formData.cardholderNumber ? formData.cardholderNumber : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">Date</label>\n                <b>{{formData.date ? formData.date : '-'}}</b>\n            </div>\n            <div class=\"field col-12\">\n                <label for=\"Age\">CVV</label>\n                <b>{{formData.cvv && formData.cvv.length === 3  ? '**' + formData.cvv[2] : '-'}}</b>\n            </div>\n        </template>\n        <template #footer>\n            <div class=\"grid grid-nogutter justify-content-between\">\n                <Button label=\"Back\" @click=\"prevPage()\"  icon=\"pi pi-angle-left\" />\n                <Button label=\"Complete\" @click=\"complete()\" icon=\"pi pi-check\" iconPos=\"right\" class=\"p-button-success\"/>\n            </div>\n        </template>\n    </Card>\n</div>\n        `\n      },\n      sourceCode2: {\n        basic: `\nexport default {\n    props: {\n        formData: Object\n    },\n    methods: {\n        prevPage() {\n            this.$emit('prevPage', {pageIndex: 3});\n        },\n        complete() {\n            this.$emit('complete');\n        }\n    },\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div class=\"content-section documentation\">\n    <TabView>\n      <TabPanel header=\"Documentation\">\n        <Documentation />\n      </TabPanel>\n      <TabPanel header=\"Source\">\n        <SourceCode />\n      </TabPanel>\n      <TabPanel header=\"Personal\">\n        <Personal />\n      </TabPanel>\n      <TabPanel header=\"Seat\">\n        <Seat />\n      </TabPanel>\n      <TabPanel header=\"Payment\">\n        <Payment />\n      </TabPanel>\n      <TabPanel header=\"Confirmation\">\n        <Confirmation />\n      </TabPanel>\n    </TabView>\n  </div>\n</template>\n\n<script>\nimport Documentation from './Documentation.vue'\nimport SourceCode from './SourceCode.vue'\nimport Personal from './Personal.vue'\nimport Seat from './Seat.vue'\nimport Payment from './Payment.vue'\nimport Confirmation from './Confirmation.vue'\n\nexport default {\n  components: { Documentation, SourceCode, Personal, Seat, Payment, Confirmation }\n}\n</script>\n","<template>\n  <div>\n    <div class=\"content-section introduction\">\n      <div class=\"feature-intro\">\n        <h1>Steps</h1>\n        <p>\n          Steps components is an indicator for the steps in a wizard workflow.\n          Example below uses nested routes with Steps.\n        </p>\n      </div>\n    </div>\n\n    <div class=\"content-section implementation\">\n      <div class=\"card\">\n        <Steps :model=\"items\" :readonly=\"true\" />\n      </div>\n\n      <keep-alive>\n        <router-view :formData=\"formObject\" @prevPage=\"prevPage($event)\" @nextPage=\"nextPage($event)\"\n          @complete=\"complete\" />\n      </keep-alive>\n    </div>\n\n    <StepsDoc />\n  </div>\n</template>\n\n<script>\nimport StepsDoc from '@/doc/steps/index.vue'\n\nexport default {\n  data() {\n    return {\n      items: [\n        {\n          label: 'Personal',\n          to: '/steps'\n        },\n        {\n          label: 'Seat',\n          to: '/steps/seat'\n        },\n        {\n          label: 'Payment',\n          to: '/steps/payment'\n        },\n        {\n          label: 'Confirmation',\n          to: '/steps/confirmation'\n        }\n      ],\n      formObject: {}\n    }\n  },\n  components: {\n    StepsDoc: StepsDoc\n  },\n  methods: {\n    nextPage(event) {\n      this.formObject = { ...this.formObject, ...event.formData }\n\n      this.$router.push(this.items[event.pageIndex + 1].to)\n    },\n    prevPage(event) {\n      this.$router.push(this.items[event.pageIndex - 1].to)\n    },\n    complete() {\n      this.$toast.add({\n        severity: 'success',\n        summary: 'Order submitted',\n        detail:\n          'Dear, ' +\n          this.formObject.firstname +\n          ' ' +\n          this.formObject.lastname +\n          ' your order completed.'\n      })\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n:deep(b) {\n  display: block;\n}\n\n:deep(.p-card-body) {\n  padding: 2rem;\n}\n</style>\n"],"names":["_sfc_main","Documentation","SourceCode","Personal","Seat","Payment","Confirmation","StepsDoc","event"],"mappings":"kMAiHA,MAAAA,EAAA,CACA,KAAA,gBACA,MAAA,CACA,MAAA,CACA,WAAA,CACA,MAAA,kDAGA,EACA,SAAA,CACA,MAAA,uDAIA,EACA,UAAA,CACA,MAAA,6dAwBA,EACA,gBAAA,CACA,MAAA,yEAIA,CACA,CACA,CACA,4sFClJAA,EAAA,CACA,KAAA,aACA,MAAA,CACA,MAAA,CACA,YAAA,CACA,MAAA,4OAMA,EACA,YAAA,CACA,MAAA,ypCA2CA,CACA,CACA,CACA,sdCnEAA,EAAA,CACA,KAAA,aACA,MAAA,CACA,MAAA,CACA,YAAA,CACA,MAAA,0vDAsCA,EACA,YAAA,CACA,MAAA,kvBAoCA,CACA,CACA,CACA,+NCpFAA,EAAA,CACA,KAAA,aACA,MAAA,CACA,MAAA,CACA,YAAA,CACA,MAAA,ogDAkCA,EACA,YAAA,CACA,MAAA,u6CA2CA,CACA,CACA,CACA,+NCvFAA,EAAA,CACA,KAAA,aACA,MAAA,CACA,MAAA,CACA,YAAA,CACA,MAAA,2vDA0CA,EACA,YAAA,CACA,MAAA,4hBAqBA,CACA,CACA,CACA,+NCzEAA,EAAA,CACA,KAAA,aACA,MAAA,CACA,MAAA,CACA,YAAA,CACA,MAAA,8uEAqDA,EACA,YAAA,CACA,MAAA,sQAeA,CACA,CACA,CACA,+NCrDAA,EAAA,CACA,WAAA,CAAA,cAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,KAAAC,EAAA,QAAAC,EAAA,aAAAC,CAAA,CACA,8hBCLAN,EAAA,CACA,MAAA,CACA,MAAA,CACA,MAAA,CACA,CACA,MAAA,WACA,GAAA,QACA,EACA,CACA,MAAA,OACA,GAAA,aACA,EACA,CACA,MAAA,UACA,GAAA,gBACA,EACA,CACA,MAAA,eACA,GAAA,qBACA,CACA,EACA,WAAA,CAAA,CACA,CACA,EACA,WAAA,CACA,SAAAO,CACA,EACA,QAAA,CACA,SAAAC,EAAA,CACA,KAAA,WAAA,CAAA,GAAA,KAAA,WAAA,GAAAA,EAAA,QAAA,EAEA,KAAA,QAAA,KAAA,KAAA,MAAAA,EAAA,UAAA,CAAA,EAAA,EAAA,CACA,EACA,SAAAA,EAAA,CACA,KAAA,QAAA,KAAA,KAAA,MAAAA,EAAA,UAAA,CAAA,EAAA,EAAA,CACA,EACA,UAAA,CACA,KAAA,OAAA,IAAA,CACA,SAAA,UACA,QAAA,kBACA,OACA,SACA,KAAA,WAAA,UACA,IACA,KAAA,WAAA,SACA,wBACA,CAAA,CACA,CACA,CACA"}
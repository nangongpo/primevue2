{"version":3,"file":"fast-diff-Fg_c4MGA.js","sources":["../../node_modules/fast-diff/diff.js"],"sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @param {boolean} [cleanup] Apply semantic cleanup before returning.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, cleanup, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  if (cleanup) {\n    diff_cleanupSemantic(diffs);\n  }\n  return diffs;\n}\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)],\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2],\n    ];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n}\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 !== 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length &&\n        y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length &&\n        y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) ===\n          text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2],\n  ];\n}\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n}\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n}\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\nfunction diff_commonOverlap_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (\n      found == 0 ||\n      text1.substring(text_length - length) == text2.substring(0, length)\n    ) {\n      best = length;\n      length++;\n    }\n  }\n}\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n}\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = \"\";\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i),\n        shorttext.substring(j)\n      );\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i),\n        shorttext.substring(0, j)\n      );\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common =\n          shorttext.substring(j - suffixLength, j) +\n          shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a,\n        best_longtext_b,\n        best_shorttext_a,\n        best_shorttext_b,\n        best_common,\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(\n    longtext,\n    shorttext,\n    Math.ceil(longtext.length / 4)\n  );\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(\n    longtext,\n    shorttext,\n    Math.ceil(longtext.length / 2)\n  );\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n}\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\nfunction diff_cleanupSemantic(diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (\n        lastequality &&\n        lastequality.length <=\n          Math.max(length_insertions1, length_deletions1) &&\n        lastequality.length <= Math.max(length_insertions2, length_deletions2)\n      ) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [\n          DIFF_DELETE,\n          lastequality,\n        ]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n  diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (\n      diffs[pointer - 1][0] == DIFF_DELETE &&\n      diffs[pointer][0] == DIFF_INSERT\n    ) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (\n          overlap_length1 >= deletion.length / 2 ||\n          overlap_length1 >= insertion.length / 2\n        ) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, [\n            DIFF_EQUAL,\n            insertion.substring(0, overlap_length1),\n          ]);\n          diffs[pointer - 1][1] = deletion.substring(\n            0,\n            deletion.length - overlap_length1\n          );\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (\n          overlap_length2 >= deletion.length / 2 ||\n          overlap_length2 >= insertion.length / 2\n        ) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, [\n            DIFF_EQUAL,\n            deletion.substring(0, overlap_length2),\n          ]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(\n            0,\n            insertion.length - overlap_length2\n          );\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n}\n\nvar nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\nvar whitespaceRegex_ = /\\s/;\nvar linebreakRegex_ = /[\\r\\n]/;\nvar blanklineEndRegex_ = /\\n\\r?\\n$/;\nvar blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\nfunction diff_cleanupSemanticLossless(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex_);\n    var lineBreak1 = whitespace1 && char1.match(linebreakRegex_);\n    var lineBreak2 = whitespace2 && char2.match(linebreakRegex_);\n    var blankLine1 = lineBreak1 && one.match(blanklineEndRegex_);\n    var blankLine2 = lineBreak2 && two.match(blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\n      diffs[pointer + 1][0] == DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore =\n        diff_cleanupSemanticScore_(equality1, edit) +\n        diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score =\n          diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n}\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, \"\"]); // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = \"\";\n  var text_insert = \"\";\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (\n            previous_equality >= 0 &&\n            ends_with_pair_start(diffs[previous_equality][1])\n          ) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(\n              0,\n              -1\n            );\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(\n                  0,\n                  commonlength\n                );\n              } else {\n                diffs.splice(0, 0, [\n                  DIFF_EQUAL,\n                  text_insert.substring(0, commonlength),\n                ]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) +\n                diffs[pointer][1];\n              text_insert = text_insert.substring(\n                0,\n                text_insert.length - commonlength\n              );\n              text_delete = text_delete.substring(\n                0,\n                text_delete.length - commonlength\n              );\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(\n              pointer - n,\n              n,\n              [DIFF_DELETE, text_delete],\n              [DIFF_INSERT, text_insert]\n            );\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = \"\";\n        text_insert = \"\";\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      if (\n        diffs[pointer][1].substring(\n          diffs[pointer][1].length - diffs[pointer - 1][1].length\n        ) === diffs[pointer - 1][1]\n      ) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] =\n          diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(\n            0,\n            diffs[pointer][1].length - diffs[pointer - 1][1].length\n          );\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (\n        diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]\n      ) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n}\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xd800 && charCode <= 0xdbff;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xdc00 && charCode <= 0xdfff;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after],\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange =\n    typeof cursor_pos === \"number\"\n      ? { index: cursor_pos, length: 0 }\n      : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === \"number\" ? null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos, cleanup) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, cleanup, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n"],"names":["DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","diff_main","text1","text2","cursor_pos","cleanup","_fix_unicode","editdiff","find_cursor_edit_diff","commonlength","diff_commonPrefix","commonprefix","diff_commonSuffix","commonsuffix","diffs","diff_compute_","diff_cleanupMerge","diff_cleanupSemantic","longtext","shorttext","i","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","diff_bisect_","text1_length","text2_length","max_d","v_offset","v_length","v1","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","pointermid","pointerstart","is_surrogate_pair_start","diff_commonOverlap_","text_length","best","length","pattern","found","pointerend","is_surrogate_pair_end","diff_halfMatchI_","seed","j","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","pointer","length_insertions1","length_deletions1","length_insertions2","length_deletions2","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","nonAlphaNumericRegex_","whitespaceRegex_","linebreakRegex_","blanklineEndRegex_","blanklineStartRegex_","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","nonAlphaNumeric2","whitespace1","whitespace2","lineBreak1","lineBreak2","blankLine1","blankLine2","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","fix_unicode","count_delete","count_insert","text_delete","text_insert","previous_equality","ends_with_pair_start","stray","k","starts_with_pair_end","n","charCode","str","remove_empty_tuples","tuples","ret","make_edit_splice","before","oldMiddle","newMiddle","after","oldText","newText","oldRange","newRange","oldLength","newLength","oldCursor","oldBefore","oldAfter","maybeNewCursor","editBefore","newCursor","newBefore","newAfter","oldPrefix","newPrefix","editAfter","cursor","oldSuffix","newSuffix","replaceRange","diff","diff_1"],"mappings":"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","x_google_ignoreList":[0]}
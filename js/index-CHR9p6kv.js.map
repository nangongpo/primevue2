{"version":3,"file":"index-CHR9p6kv.js","sources":["../../src/doc/filterservice/Documentation.vue","../../src/doc/filterservice/SourceCode.vue","../../src/doc/filterservice/index.vue","../../src/views/filterservice/index.vue"],"sourcesContent":["<template>\n  <div>\n    <h5>Import</h5>\n    <DocSectionCode :code=\"importCode\" importCode />\n\n    <h5>Getting Started</h5>\n    <p>Filters are accessed with <i>FilterService.filters</i>.</p>\n    <DocSectionCode :code=\"baseCode\" importCode />\n\n    <h5>Custom Constraint</h5>\n    <p>FilterService can be extended by adding new constraints using the <span>register</span> function.</p>\n    <DocSectionCode :code=\"customConstraintCode\" importCode />\n\n    <h5>Built-in Constraints</h5>\n    <div class=\"doc-tablewrapper\">\n      <table class=\"doc-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Parameters</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>startsWith</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value starts with the filter value</td>\n          </tr>\n          <tr>\n            <td>contains</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value contains the filter value</td>\n          </tr>\n          <tr>\n            <td>endsWith</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value ends with the filter value</td>\n          </tr>\n          <tr>\n            <td>equals</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value equals the filter value</td>\n          </tr>\n          <tr>\n            <td>notEquals</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value does not equal the filter value</td>\n          </tr>\n          <tr>\n            <td>in</td>\n            <td>\n              value: Value to filter<br />\n              filter[]: An array of filter values<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value contains the filter value</td>\n          </tr>\n          <tr>\n            <td>lt</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value is less than the filter value</td>\n          </tr>\n          <tr>\n            <td>lte</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value is less than or equals to the filter value</td>\n          </tr>\n          <tr>\n            <td>gt</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value is greater than the filter value</td>\n          </tr>\n          <tr>\n            <td>gte</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value is greater than or equals to the filter value</td>\n          </tr>\n          <tr>\n            <td>is</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value equals the filter value, alias to equals</td>\n          </tr>\n          <tr>\n            <td>isNot</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the value does not equal the filter value, alias to notEquals.</td>\n          </tr>\n          <tr>\n            <td>before</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the date value is before the filter date.</td>\n          </tr>\n          <tr>\n            <td>after</td>\n            <td>\n              value: Value to filter<br />\n              filter: Filter value<br />\n              filterLocale: Locale to use in filtering\n            </td>\n            <td>Whether the date value is after the filter date.</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h5>FilterService API</h5>\n      <div class=\"doc-tablewrapper\">\n        <table class=\"doc-table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Parameters</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>filter</td>\n              <td>\n                value[]: An array of values to filter<br />\n                fields[]: An array of properties in the value object<br />\n                filterValue: Filter value<br />\n                filterMatchMode: Constraint<br />\n                filterLocale: Locale to use in filtering\n              </td>\n              <td>Whether the property values of the given value collection matches the filter.</td>\n            </tr>\n            <tr>\n              <td>filters</td>\n              <td>-</td>\n              <td>Property to access constraints collection.</td>\n            </tr>\n            <tr>\n              <td>register</td>\n              <td>\n                name: string <br />\n                fn: Filter callback\n              </td>\n              <td>Registers a new constraint in filters.</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <h5>Dependencies</h5>\n    <p>None.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Documentation',\n  data() {\n    return {\n      importCode: {\n        basic: `\nimport {FilterService} from 'primevue2/api';\n        `\n      },\n      baseCode: {\n        basic: `\nconst value = 'PrimeVue';\n\nFilterService.filters.equals(value, 'Vue');                           //false\nFilterService.filters.equals(value, 8);                               //false\nFilterService.filters.equals(value, new Date());                      //false\nFilterService.filters.contains(value, 'Vue');                         //true\nFilterService.filters.startsWith(value, 'Vue');                       //false\nFilterService.filters.endsWith(value, 'Vue');                         //true\nFilterService.filters.lt(10, 20);                                     //true\nFilterService.filters.gt(50, 20);                                     //true\nFilterService.filters.in(value, ['PrimeFaces', 'PrimeVue']);          //true\n        `\n      },\n      customConstraintCode: {\n        basic: `\nFilterService.register('isPrimeNumber', (value, filter): boolean => {\n    if (filter === undefined || filter === null || filter.trim() === '') {\n        return true;\n    }\n\n    if (value === undefined || value === null) {\n        return false;\n    }\n\n    return value.toString() === filter.toString();\n});\n\nFilterService.filters['isPrimeNumber'](3);                      //true\nFilterService.filters['isPrimeNumber'](5);                      //true\nFilterService.filters['isPrimeNumber'](568985673);              //false\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <a\n      href=\"https://github.com/nangongpo/primevue2/tree/main/src/views/filterservice\"\n      class=\"btn-viewsource\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\">\n      <span>View on GitHub</span>\n    </a>\n\n    <DocSectionCode :code=\"sourceCode1\" />\n    <DocSectionCode :code=\"sourceCode2\" importCode />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SourceCode',\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<DataTable :value=\"customers\" :paginator=\"true\" :rows=\"10\" responsiveLayout=\"scroll\"\n    dataKey=\"id\" :filters.sync=\"filters\" filterDisplay=\"row\" :loading=\"loading\">\n    <template #empty>\n        No customers found.\n    </template>\n    <template #loading>\n        Loading customers data. Please wait.\n    </template>\n    <Column field=\"name\" header=\"Name\" :filterMatchModeOptions=\"matchModeOptions\">\n        <template #body=\"{data}\">\n            {{data.name}}\n        </template>\n        <template #filter=\"{filterModel,filterCallback}\">\n            <InputText type=\"text\" v-model=\"filterModel.value\" @input=\"filterCallback()\" class=\"p-column-filter\" :placeholder=\"\\`Search by name - \\${filterModel.matchMode}\\`\"/>\n        </template>\n    </Column>\n    <Column header=\"Country\" filterField=\"country.name\" :filterMatchModeOptions=\"matchModeOptions\">\n        <template #body=\"{data}\">\n            <img src=\"../../assets/images/flag_placeholder.png\" :class=\"'flag flag-' + data.country.code\" width=\"30\" />\n            <span class=\"image-text\">{{data.country.name}}</span>\n        </template>\n        <template #filter=\"{filterModel,filterCallback}\">\n            <InputText type=\"text\" v-model=\"filterModel.value\" @input=\"filterCallback()\" class=\"p-column-filter\" :placeholder=\"\\`Search by country - \\${filterModel.matchMode}\\`\" />\n        </template>\n    </Column>\n</DataTable>\n        `\n      },\n      sourceCode2: {\n        basic: `\nimport FilterMatchMode from '../../../src/components/api/FilterMatchMode';\nimport FilterService from '../../../src/components/api/FilterService';\nimport CustomerService from '../../service/CustomerService';\n\nconst YOUR_FILTER = 'YOUR FILTER';\n\nexport default {\n    data() {\n        return {\n            customers: null,\n            filters: {\n                'name': {value: null, matchMode: YOUR_FILTER},\n                'country.name': {value: null, matchMode: FilterMatchMode.STARTS_WITH}\n            },\n            matchModeOptions: [\n                {label: 'Your Equals', value: YOUR_FILTER},\n                {label: 'Starts With', value: FilterMatchMode.STARTS_WITH}\n            ],\n            loading: true\n        }\n    },\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.customerService.getCustomersLarge().then(data => {\n            this.customers = data;\n            this.loading = false;\n        });\n\n        FilterService.register(YOUR_FILTER, (value, filter) => {\n            if (filter === undefined || filter === null || filter.trim() === '') {\n                return true;\n            }\n\n            if (value === undefined || value === null) {\n                return false;\n            }\n\n            return value.toString() === filter.toString();\n        });\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n    <div class=\"content-section documentation\">\n    <TabView>\n      <TabPanel header=\"Documentation\">\n        <Documentation />\n      </TabPanel>\n      <TabPanel header=\"Source\">\n        <SourceCode />\n      </TabPanel>\n    </TabView>\n  </div>\n</template>\n\n<script>\nimport Documentation from './Documentation.vue'\nimport SourceCode from './SourceCode.vue'\nexport default {\n  components: { Documentation, SourceCode }\n}\n</script>\n","<template>\n  <div>\n    <div class=\"content-section introduction\">\n      <div class=\"feature-intro\">\n        <h1>FilterService</h1>\n        <p>FilterService is a helper utility to filter collections against constraints.</p>\n      </div>\n      <AppInputStyleSwitch />\n    </div>\n\n    <div class=\"content-section implementation\">\n      <div class=\"card\">\n        <h5>Table Integration</h5>\n        <p>\n          A custom equals filter that checks for exact case sensitive value is registered and defined as a match mode of\n          a column filter.\n        </p>\n\n        <DataTable\n          :value=\"customers\"\n          :paginator=\"true\"\n          :rows=\"10\"\n          responsiveLayout=\"scroll\"\n          dataKey=\"id\"\n          :filters.sync=\"filters\"\n          filterDisplay=\"row\"\n          :loading=\"loading\">\n          <template #empty> No customers found. </template>\n          <template #loading> Loading customers data. Please wait. </template>\n          <Column field=\"name\" header=\"Name\" :filterMatchModeOptions=\"matchModeOptions\">\n            <template #body=\"{ data }\">\n              {{ data.name }}\n            </template>\n            <template #filter=\"{ filterModel, filterCallback }\">\n              <InputText\n                type=\"text\"\n                v-model=\"filterModel.value\"\n                @input=\"filterCallback()\"\n                class=\"p-column-filter\"\n                :placeholder=\"`Search by name - ${filterModel.matchMode}`\" />\n            </template>\n          </Column>\n          <Column header=\"Country\" filterField=\"country.name\" :filterMatchModeOptions=\"matchModeOptions\">\n            <template #body=\"{ data }\">\n              <img\n                src=\"../../assets/images/flag_placeholder.png\"\n                :class=\"'flag flag-' + data.country.code\"\n                width=\"30\" />\n              <span class=\"image-text\">{{ data.country.name }}</span>\n            </template>\n            <template #filter=\"{ filterModel, filterCallback }\">\n              <InputText\n                type=\"text\"\n                v-model=\"filterModel.value\"\n                @input=\"filterCallback()\"\n                class=\"p-column-filter\"\n                :placeholder=\"`Search by country - ${filterModel.matchMode}`\" />\n            </template>\n          </Column>\n        </DataTable>\n      </div>\n    </div>\n\n    <FilterServiceDoc />\n  </div>\n</template>\n\n<script>\nimport FilterMatchMode from '../../components/api/FilterMatchMode'\nimport FilterService from '../../components/api/FilterService'\nimport CustomerService from '../../service/CustomerService'\nimport FilterServiceDoc from '@/doc/filterservice/index.vue'\n\nconst YOUR_FILTER = 'YOUR FILTER'\n\nexport default {\n  data() {\n    return {\n      customers: null,\n      filters: {\n        'name': { value: null, matchMode: FilterMatchMode.STARTS_WITH },\n        'country.name': { value: null, matchMode: FilterMatchMode.STARTS_WITH }\n      },\n      matchModeOptions: [\n        { label: 'Your Equals', value: YOUR_FILTER },\n        { label: 'Starts With', value: FilterMatchMode.STARTS_WITH }\n      ],\n      loading: true\n    }\n  },\n  created() {\n    this.customerService = new CustomerService()\n  },\n  mounted() {\n    this.customerService.getCustomersLarge().then(data => {\n      this.customers = data\n      this.loading = false\n    })\n\n    FilterService.register(YOUR_FILTER, (value, filter) => {\n      if (filter === undefined || filter === null || filter.trim() === '') {\n        return true\n      }\n\n      if (value === undefined || value === null) {\n        return false\n      }\n\n      return value.toString() === filter.toString()\n    })\n  },\n  components: {\n    'FilterServiceDoc': FilterServiceDoc\n  }\n}\n</script>\n"],"names":["_sfc_main","Documentation","SourceCode","YOUR_FILTER","FilterMatchMode","CustomerService","data","FilterService","value","filter","FilterServiceDoc"],"mappings":"uTAuMA,MAAAA,EAAA,CACA,KAAA,gBACA,MAAA,CACA,MAAA,CACA,WAAA,CACA,MAAA,0DAGA,EACA,SAAA,CACA,MAAA,2uBAaA,EACA,qBAAA,CACA,MAAA,oiBAiBA,CACA,CACA,CACA,kyKCpOAA,EAAA,CACA,KAAA,aACA,MAAA,CACA,MAAA,CACA,YAAA,CACA,MAAA,i4CA4BA,EACA,YAAA,CACA,MAAA,u3CA6CA,CACA,CACA,CACA,8dCnFAA,EAAA,CACA,WAAA,CAAA,cAAAC,EAAA,WAAAC,CAAA,CACA,gTCuDAC,EAAA,cAEAH,EAAA,CACA,MAAA,CACA,MAAA,CACA,UAAA,KACA,QAAA,CACA,KAAA,CAAA,MAAA,KAAA,UAAAI,EAAA,WAAA,EACA,eAAA,CAAA,MAAA,KAAA,UAAAA,EAAA,WAAA,CACA,EACA,iBAAA,CACA,CAAA,MAAA,cAAA,MAAAD,CAAA,EACA,CAAA,MAAA,cAAA,MAAAC,EAAA,WAAA,CACA,EACA,QAAA,EACA,CACA,EACA,SAAA,CACA,KAAA,gBAAA,IAAAC,CACA,EACA,SAAA,CACA,KAAA,gBAAA,oBAAA,KAAAC,GAAA,CACA,KAAA,UAAAA,EACA,KAAA,QAAA,EACA,CAAA,EAEAC,EAAA,SAAAJ,EAAA,CAAAK,EAAAC,IACAA,GAAA,MAAAA,EAAA,KAAA,IAAA,GACA,GAGAD,GAAA,KACA,GAGAA,EAAA,aAAAC,EAAA,SAAA,CACA,CACA,EACA,WAAA,CACA,iBAAAC,CACA,CACA"}
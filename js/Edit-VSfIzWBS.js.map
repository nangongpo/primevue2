{"version":3,"file":"Edit-VSfIzWBS.js","sources":["../../src/doc/datatable/Edit.vue","../../src/views/datatable/Edit.vue"],"sourcesContent":["<template>\n  <div class=\"content-section documentation\">\n    <TabView>\n      <TabPanel header=\"Source\">\n        <DocSectionCode :code=\"baseCode\" />\n        <DocSectionCode :code=\"baseCode2\" importCode />\n      </TabPanel>\n    </TabView>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      baseCode: {\n        basic: `\n<div class=\"card\">\n    <DataTable :value=\"products1\" editMode=\"cell\" @cell-edit-complete=\"onCellEditComplete\" class=\"editable-cells-table\" responsiveLayout=\"scroll\">\n        <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\" :styles=\"{width: '25%'}\">\n            <template #editor=\"slotProps\">\n                <InputText v-model=\"slotProps.data[slotProps.column.field]\" autofocus />\n            </template>\n        </Column>\n    </DataTable>\n</div>\n\n<div class=\"card\">\n    <DataTable :value=\"products2\" editMode=\"row\" dataKey=\"id\" :editingRows.sync=\"editingRows\" @row-edit-save=\"onRowEditSave\" responsiveLayout=\"scroll\">\n        <Column field=\"code\" header=\"Code\" :styles=\"{width:'20%'}\">\n            <template #editor=\"slotProps\">\n                <InputText v-model=\"slotProps.data[slotProps.column.field]\" autofocus />\n            </template>\n        </Column>\n        <Column field=\"name\" header=\"Name\" :styles=\"{width:'20%'}\">\n            <template #editor=\"slotProps\">\n                <InputText v-model=\"slotProps.data[slotProps.column.field]\" />\n            </template>\n        </Column>\n        <Column field=\"inventoryStatus\" header=\"Status\" :styles=\"{width:'20%'}\">\n            <template #editor=\"{ data, field }\">\n                <Dropdown v-model=\"data[field]\" :options=\"statuses\" optionLabel=\"label\" optionValue=\"value\" placeholder=\"Select a Status\">\n                    <template #option=\"slotProps\">\n                        <span :class=\"'product-badge status-' + slotProps.option.value.toLowerCase()\">{{slotProps.option.label}}</span>\n                    </template>\n                </Dropdown>\n            </template>\n            <template #body=\"slotProps\">\n                {{getStatusLabel(slotProps.data.inventoryStatus)}}\n            </template>\n        </Column>\n        <Column field=\"price\" header=\"Price\" :styles=\"{width:'20%'}\">\n            <template #editor=\"slotProps\">\n                <InputText v-model=\"slotProps.data[slotProps.column.field]\" />\n            </template>\n        </Column>\n        <Column :rowEditor=\"true\" :styles=\"{width:'10%', 'min-width':'8rem'}\" :bodyStyle=\"{'text-align':'center'}\"></Column>\n    </DataTable>\n</div>\n\n<div class=\"card\">\n    <DataTable :value=\"products3\" editMode=\"cell\" @cell-edit-complete=\"onCellEditComplete\" class=\"editable-cells-table\" filterDisplay=\"row\" :filters.sync=\"filters\" responsiveLayout=\"scroll\">\n        <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\" style=\"width:25%\" sortable filter>\n            <template #filter=\"{filterModel,filterCallback}\">\n                <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" v-tooltip.top.focus=\"'Hit enter key to filter'\"/>\n            </template>\n            <template #editor=\"{ data, field }\">\n                <InputText v-model=\"data[field]\" autofocus />\n            </template>\n        </Column>\n    </DataTable>\n</div>\n        `\n      },\n      baseCode2: {\n        basic: `\nimport FilterMatchMode from '../../../src/components/api/FilterMatchMode';\nimport ProductService from '../../service/ProductService';\n\nexport default {\n    data() {\n        return {\n            editingRows: [],\n            columns: null,\n            products1: null,\n            products2: null,\n            products3: null,\n            statuses: [\n                {label: 'In Stock', value: 'INSTOCK'},\n                {label: 'Low Stock', value: 'LOWSTOCK'},\n                {label: 'Out of Stock', value: 'OUTOFSTOCK'}\n            ],\n            filters: {\n                'code': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                'name': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                'quantity': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                'price': {value: null, matchMode: FilterMatchMode.STARTS_WITH}\n            }\n        }\n    },\n    productService: null,\n    created() {\n        this.productService = new ProductService();\n\n        this.columns = [\n            {field: 'code', header: 'Code'},\n            {field: 'name', header: 'Name'},\n            {field: 'quantity', header: 'Quantity'},\n            {field: 'price', header: 'Price'}\n        ];\n\n        this.originalRows = {};\n    },\n    methods: {\n        onCellEditComplete(event) {\n            let { data, newValue, field } = event;\n\n            switch (field) {\n                case 'quantity':\n                case 'price':\n                    if (this.isPositiveInteger(newValue))\n                        data[field] = newValue;\n                    else\n                        event.preventDefault();\n                break;\n\n                default:\n                    if (newValue.trim().length > 0)\n                        data[field] = newValue;\n                    else\n                        event.preventDefault();\n                break;\n            }\n        },\n        isPositiveInteger(val) {\n            let str = String(val);\n            str = str.trim();\n            if (!str) {\n                return false;\n            }\n            str = str.replace(/^0+/, \"\") || \"0\";\n            var n = Math.floor(Number(str));\n            return n !== Infinity && String(n) === str && n >= 0;\n        },\n        onRowEditSave(event) {\n            let { newData, index } = event;\n\n            this.products2[index] = newData;\n        },\n        getStatusLabel(status) {\n            switch(status) {\n                case 'INSTOCK':\n                    return 'In Stock';\n\n                case 'LOWSTOCK':\n                    return 'Low Stock';\n\n                case 'OUTOFSTOCK':\n                    return 'Out of Stock';\n\n                default:\n                    return 'NA';\n            }\n        }\n    },\n    mounted() {\n        this.productService.getProductsSmall().then(data => this.products1 = data);\n        this.productService.getProductsSmall().then(data => this.products2 = data);\n        this.productService.getProductsSmall().then(data => this.products3 = data);\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n","<template>\n\t<div>\n\t\t<div class=\"content-section introduction\">\n\t\t\t<div class=\"feature-intro\">\n\t\t\t\t<h1>DataTable <span>InCell Edit</span></h1>\n\t\t\t\t<p>In cell editing provides a rapid and user friendly way to manipulate the data. The datatable provides a flexible API\n                    so that the editing behavior is implemented by the page author whether it utilizes v-model or vuex.\n                </p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"content-section implementation p-fluid\">\n            <div class=\"card\">\n                <h5>Cell Editing</h5>\n                <p>Validations, dynamic columns and reverting values with the escape key.</p>\n                <DataTable :value=\"products1\" editMode=\"cell\" @cell-edit-complete=\"onCellEditComplete\" class=\"editable-cells-table\" responsiveLayout=\"scroll\">\n                    <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\" :styles=\"{width: '25%'}\">\n                        <template #editor=\"slotProps\">\n                            <InputText v-model=\"slotProps.data[slotProps.column.field]\" autofocus />\n                        </template>\n                    </Column>\n                </DataTable>\n            </div>\n\n            <div class=\"card\">\n                <h5>Row Editing</h5>\n                <DataTable :value=\"products2\" editMode=\"row\" dataKey=\"id\" :editingRows.sync=\"editingRows\" @row-edit-save=\"onRowEditSave\" responsiveLayout=\"scroll\">\n                    <Column field=\"code\" header=\"Code\" :styles=\"{width:'20%'}\">\n                        <template #editor=\"slotProps\">\n                            <InputText v-model=\"slotProps.data[slotProps.column.field]\" autofocus />\n                        </template>\n                    </Column>\n                    <Column field=\"name\" header=\"Name\" :styles=\"{width:'20%'}\">\n                        <template #editor=\"slotProps\">\n                            <InputText v-model=\"slotProps.data[slotProps.column.field]\" />\n                        </template>\n                    </Column>\n                    <Column field=\"inventoryStatus\" header=\"Status\" :styles=\"{width:'20%'}\">\n                        <template #editor=\"{ data, field }\">\n                            <Dropdown v-model=\"data[field]\" :options=\"statuses\" optionLabel=\"label\" optionValue=\"value\" placeholder=\"Select a Status\">\n                                <template #option=\"slotProps\">\n                                    <span :class=\"'product-badge status-' + slotProps.option.value.toLowerCase()\">{{slotProps.option.label}}</span>\n                                </template>\n                            </Dropdown>\n                        </template>\n                        <template #body=\"slotProps\">\n                            {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                        </template>\n                    </Column>\n                    <Column field=\"price\" header=\"Price\" :styles=\"{width:'20%'}\">\n                        <template #editor=\"slotProps\">\n                            <InputText v-model=\"slotProps.data[slotProps.column.field]\" />\n                        </template>\n                    </Column>\n                    <Column :rowEditor=\"true\" :styles=\"{width:'10%', 'min-width':'8rem'}\" :bodyStyle=\"{'text-align':'center'}\"></Column>\n                </DataTable>\n            </div>\n\n            <div class=\"card\">\n                <h5>Cell Editing with Sorting and Filter</h5>\n                <DataTable :value=\"products3\" editMode=\"cell\" @cell-edit-complete=\"onCellEditComplete\" class=\"editable-cells-table\" filterDisplay=\"row\" :filters.sync=\"filters\" responsiveLayout=\"scroll\">\n                    <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\" style=\"width:25%\" sortable filter>\n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" v-tooltip.top.focus=\"'Hit enter key to filter'\"/>\n                        </template>\n                        <template #editor=\"{ data, field }\">\n                            <InputText v-model=\"data[field]\" autofocus />\n                        </template>\n                    </Column>\n                </DataTable>\n            </div>\n\t\t</div>\n\n    <DataTableEditDoc />\n\t</div>\n</template>\n\n<script>\nimport DataTableEditDoc from '@/doc/datatable/Edit.vue'\nimport FilterMatchMode from '../../components/api/FilterMatchMode'\nimport ProductService from '../../service/ProductService'\n\nexport default {\n  components: { DataTableEditDoc },\n  data() {\n    return {\n      editingRows: [],\n      columns: null,\n      products1: null,\n      products2: null,\n      products3: null,\n      statuses: [\n        {label: 'In Stock', value: 'INSTOCK'},\n        {label: 'Low Stock', value: 'LOWSTOCK'},\n        {label: 'Out of Stock', value: 'OUTOFSTOCK'}\n      ],\n      filters: {\n        'code': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n        'name': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n        'quantity': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n        'price': {value: null, matchMode: FilterMatchMode.STARTS_WITH}\n      }\n    }\n  },\n  productService: null,\n  created() {\n    this.productService = new ProductService()\n\n    this.columns = [\n      {field: 'code', header: 'Code'},\n      {field: 'name', header: 'Name'},\n      {field: 'quantity', header: 'Quantity'},\n      {field: 'price', header: 'Price'}\n    ]\n\n    this.originalRows = {}\n  },\n  methods: {\n    onCellEditComplete(event) {\n      let { data, newValue, field } = event\n\n      switch (field) {\n      case 'quantity':\n      case 'price':\n        if (this.isPositiveInteger(newValue))\n          data[field] = newValue\n        else\n          event.preventDefault()\n        break\n\n      default:\n        if (newValue.trim().length > 0)\n          data[field] = newValue\n        else\n          event.preventDefault()\n        break\n      }\n    },\n    isPositiveInteger(val) {\n      let str = String(val)\n      str = str.trim()\n      if (!str) {\n        return false\n      }\n      str = str.replace(/^0+/, '') || '0'\n      var n = Math.floor(Number(str))\n      return n !== Infinity && String(n) === str && n >= 0\n    },\n    onRowEditSave(event) {\n      let { newData, index } = event\n\n      this.products2[index] = newData\n    },\n    getStatusLabel(status) {\n      switch(status) {\n      case 'INSTOCK':\n        return 'In Stock'\n\n      case 'LOWSTOCK':\n        return 'Low Stock'\n\n      case 'OUTOFSTOCK':\n        return 'Out of Stock'\n\n      default:\n        return 'NA'\n      }\n    }\n  },\n  mounted() {\n    this.productService.getProductsSmall().then(data => this.products1 = data)\n    this.productService.getProductsSmall().then(data => this.products2 = data)\n    this.productService.getProductsSmall().then(data => this.products3 = data)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n:deep(.editable-cells-table td.p-cell-editing) {\n    padding-top: 0;\n    padding-bottom: 0;\n}\n</style>\n"],"names":["_sfc_main","DataTableEditDoc","FilterMatchMode","ProductService","event","data","newValue","field","val","str","n","newData","index","status"],"mappings":"sPAYA,MAAAA,EAAA,CACA,MAAA,CACA,MAAA,CACA,SAAA,CACA,MAAA,ogGAyDA,EACA,UAAA,CACA,MAAA,2kGAiGA,CACA,CACA,CACA,qUC7FAA,EAAA,CACA,WAAA,CAAA,iBAAAC,CAAA,EACA,MAAA,CACA,MAAA,CACA,YAAA,CAAA,EACA,QAAA,KACA,UAAA,KACA,UAAA,KACA,UAAA,KACA,SAAA,CACA,CAAA,MAAA,WAAA,MAAA,SAAA,EACA,CAAA,MAAA,YAAA,MAAA,UAAA,EACA,CAAA,MAAA,eAAA,MAAA,YAAA,CACA,EACA,QAAA,CACA,KAAA,CAAA,MAAA,KAAA,UAAAC,EAAA,WAAA,EACA,KAAA,CAAA,MAAA,KAAA,UAAAA,EAAA,WAAA,EACA,SAAA,CAAA,MAAA,KAAA,UAAAA,EAAA,WAAA,EACA,MAAA,CAAA,MAAA,KAAA,UAAAA,EAAA,WAAA,CACA,CACA,CACA,EACA,eAAA,KACA,SAAA,CACA,KAAA,eAAA,IAAAC,EAEA,KAAA,QAAA,CACA,CAAA,MAAA,OAAA,OAAA,MAAA,EACA,CAAA,MAAA,OAAA,OAAA,MAAA,EACA,CAAA,MAAA,WAAA,OAAA,UAAA,EACA,CAAA,MAAA,QAAA,OAAA,OAAA,CACA,EAEA,KAAA,aAAA,CAAA,CACA,EACA,QAAA,CACA,mBAAAC,EAAA,CACA,GAAA,CAAA,KAAAC,EAAA,SAAAC,EAAA,MAAAC,GAAAH,EAEA,OAAAG,EAAA,CACA,IAAA,WACA,IAAA,QACA,KAAA,kBAAAD,CAAA,EACAD,EAAAE,CAAA,EAAAD,EAEAF,EAAA,eAAA,EACA,MAEA,QACAE,EAAA,OAAA,OAAA,EACAD,EAAAE,CAAA,EAAAD,EAEAF,EAAA,eAAA,EACA,KACA,CACA,EACA,kBAAAI,EAAA,CACA,IAAAC,EAAA,OAAAD,CAAA,EAEA,GADAC,EAAAA,EAAA,KAAA,EACA,CAAAA,EACA,MAAA,GAEAA,EAAAA,EAAA,QAAA,MAAA,EAAA,GAAA,IACA,IAAAC,EAAA,KAAA,MAAA,OAAAD,CAAA,CAAA,EACA,OAAAC,IAAA,KAAA,OAAAA,CAAA,IAAAD,GAAAC,GAAA,CACA,EACA,cAAAN,EAAA,CACA,GAAA,CAAA,QAAAO,EAAA,MAAAC,GAAAR,EAEA,KAAA,UAAAQ,CAAA,EAAAD,CACA,EACA,eAAAE,EAAA,CACA,OAAAA,EAAA,CACA,IAAA,UACA,MAAA,WAEA,IAAA,WACA,MAAA,YAEA,IAAA,aACA,MAAA,eAEA,QACA,MAAA,IACA,CACA,CACA,EACA,SAAA,CACA,KAAA,eAAA,iBAAA,EAAA,KAAAR,GAAA,KAAA,UAAAA,CAAA,EACA,KAAA,eAAA,iBAAA,EAAA,KAAAA,GAAA,KAAA,UAAAA,CAAA,EACA,KAAA,eAAA,iBAAA,EAAA,KAAAA,GAAA,KAAA,UAAAA,CAAA,CACA,CACA"}
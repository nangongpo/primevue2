import{n as o}from"./app.component-CxwrbeA3.js";import{N as l}from"./NodeService-DGU-G-ef.js";import"./resize-observer-polyfill-B1PUzC5B.js";import"./app.fullcalendar-DqAsc8Hg.js";import"./preact-CNwUjBXN.js";import"./app.core-fp3qH1H1.js";const c={data(){return{sourceCode1:{basic:'\n<h3>Single Selection</h3>\n<Tree :value="nodes" selectionMode="single" :selectionKeys.sync="selectedKey1"></Tree>\n\n<h3>Multiple Selection with MetaKey</h3>\n<Tree :value="nodes" selectionMode="multiple" :selectionKeys.sync="selectedKeys1"></Tree>\n\n<h3>Multiple Selection without MetaKey</h3>\n<Tree :value="nodes" selectionMode="multiple" :selectionKeys.sync="selectedKeys2" :metaKeySelection="false"></Tree>\n\n<h3>Checkbox Selection</h3>\n<Tree :value="nodes" selectionMode="checkbox" :selectionKeys.sync="selectedKeys3"></Tree>\n\n<h3>Events</h3>\n<Tree :value="nodes" selectionMode="single" :selectionKeys.sync="selectedKey2" :metaKeySelection="false"\n    @node-select="onNodeSelect" @node-unselect="onNodeUnselect"></Tree>\n        '},sourceCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        }\n    }\n}\n        "}}}};var i=function(){var e=this,t=e._self._c;return t("div",{staticClass:"content-section documentation"},[t("TabView",[t("TabPanel",{attrs:{header:"Source"}},[t("DocSectionCode",{attrs:{code:e.sourceCode1}}),t("DocSectionCode",{attrs:{code:e.sourceCode2,importCode:""}})],1)],1)],1)},d=[],a=o(c,i,d,!1,null,null);const r=a.exports,u={data(){return{selectedKey1:null,selectedKey2:null,selectedKeys1:null,selectedKeys2:null,selectedKeys3:null,nodes:null}},nodeService:null,created(){this.nodeService=new l},mounted(){this.nodeService.getTreeNodes().then(n=>this.nodes=n)},methods:{onNodeSelect(n){this.$toast.add({severity:"success",summary:"Node Selected",detail:n.label,life:3e3})},onNodeUnselect(n){this.$toast.add({severity:"success",summary:"Node Unselected",detail:n.label,life:3e3})}},components:{TreeSelectionDoc:r}};var y=function(){var e=this,t=e._self._c;return t("div",[e._m(0),t("div",{staticClass:"content-section implementation"},[t("div",{staticClass:"card"},[t("h5",[e._v("Single Selection")]),t("Tree",{attrs:{value:e.nodes,selectionMode:"single",selectionKeys:e.selectedKey1},on:{"update:selectionKeys":function(s){e.selectedKey1=s},"update:selection-keys":function(s){e.selectedKey1=s}}}),t("h5",[e._v("Multiple Selection with MetaKey")]),t("Tree",{attrs:{value:e.nodes,selectionMode:"multiple",selectionKeys:e.selectedKeys1},on:{"update:selectionKeys":function(s){e.selectedKeys1=s},"update:selection-keys":function(s){e.selectedKeys1=s}}}),t("h5",[e._v("Multiple Selection without MetaKey")]),t("Tree",{attrs:{value:e.nodes,selectionMode:"multiple",selectionKeys:e.selectedKeys2,metaKeySelection:!1},on:{"update:selectionKeys":function(s){e.selectedKeys2=s},"update:selection-keys":function(s){e.selectedKeys2=s}}}),t("h5",[e._v("Checkbox Selection")]),t("Tree",{attrs:{value:e.nodes,selectionMode:"checkbox",selectionKeys:e.selectedKeys3},on:{"update:selectionKeys":function(s){e.selectedKeys3=s},"update:selection-keys":function(s){e.selectedKeys3=s}}}),t("h5",[e._v("Events")]),t("Tree",{attrs:{value:e.nodes,selectionMode:"single",selectionKeys:e.selectedKey2,metaKeySelection:!1},on:{"update:selectionKeys":function(s){e.selectedKey2=s},"update:selection-keys":function(s){e.selectedKey2=s},"node-select":e.onNodeSelect,"node-unselect":e.onNodeUnselect}})],1)]),t("TreeSelectionDoc")],1)},v=[function(){var n=this,e=n._self._c;return e("div",{staticClass:"content-section introduction"},[e("div",{staticClass:"feature-intro"},[e("h1",[n._v("Tree "),e("span",[n._v("Selection")])]),e("p",[n._v("Tree supports "),e("b",[n._v("single")]),n._v(", "),e("b",[n._v("multiple")]),n._v(" and "),e("b",[n._v("checkbox")]),n._v(" as selection modes.")])])])}],K=o(u,y,v,!1,null,"356dbf5e");const T=K.exports;export{T as default};
//# sourceMappingURL=TreeSelectionDemo-CI4vAetR.js.map

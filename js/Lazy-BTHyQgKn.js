import{n as o}from"./app.component-BAbvz7X_.js";import{C as n}from"./CustomerService-4zeCbf_T.js";import"./resize-observer-polyfill-B1PUzC5B.js";import"./app.fullcalendar-DqAsc8Hg.js";import"./preact-CNwUjBXN.js";import"./app.core-fp3qH1H1.js";const i={data(){return{baseCode:{basic:'\n<DataTable :value="customers" :lazy="true" :paginator="true" :rows="10" :filters.sync="filters" ref="dt" dataKey="id"\n    :totalRecords="totalRecords" :loading="loading" @page="onPage($event)" @sort="onSort($event)" @filter="onFilter($event)" filterDisplay="row"\n    :globalFilterFields="[\'name\',\'country.name\', \'company\', \'representative.name\']" responsiveLayout="scroll"\n    :selection.sync="selectedCustomers" :selectAll="selectAll" @select-all-change="onSelectAllChange" @row-select="onRowSelect" @row-unselect="onRowUnselect" >\n    <Column selectionMode="multiple" headerStyle="width: 3em"></Column>\n    <Column field="name" header="Name" filterMatchMode="startsWith" ref="name" :sortable="true">\n        <template #filter="{filterModel,filterCallback}">\n            <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by name"/>\n        </template>\n    </Column>\n    <Column field="country.name" header="Country" filterField="country.name" filterMatchMode="contains" ref="country.name" :sortable="true">\n        <template #filter="{filterModel,filterCallback}">\n            <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by country"/>\n        </template>\n    </Column>\n    <Column field="company" header="Company" filterMatchMode="contains" ref="company" :sortable="true">\n        <template #filter="{filterModel,filterCallback}">\n            <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by company"/>\n        </template>\n    </Column>\n    <Column field="representative.name" header="Representative" filterField="representative.name" ref="representative.name" :sortable="true">\n        <template #filter="{filterModel,filterCallback}">\n            <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by representative"/>\n        </template>\n    </Column>\n</DataTable>\n        '},baseCode2:{basic:"\nimport CustomerService from '../../service/CustomerService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            totalRecords: 0,\n            customers: null,\n            selectedCustomers: null,\n            selectAll: false,\n            filters: {\n                'name': {value: '', matchMode: 'contains'},\n                'country.name': {value: '', matchMode: 'contains'},\n                'company': {value: '', matchMode: 'contains'},\n                'representative.name': {value: '', matchMode: 'contains'},\n            },\n            lazyParams: {},\n            columns: [\n                {field: 'name', header: 'Name'},\n                {field: 'country.name', header: 'Country'},\n                {field: 'company', header: 'Company'},\n                {field: 'representative.name', header: 'Representative'}\n            ]\n        }\n    },\n    customerService: null,\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.loading = true;\n\n        this.lazyParams = {\n            first: 0,\n            rows: this.$refs.dt.rows,\n            sortField: null,\n            sortOrder: null,\n            filters: this.filters\n        };\n\n        this.loadLazyData();\n    },\n    methods: {\n        loadLazyData() {\n            this.loading = true;\n\n            setTimeout(() => {\n                this.customerService.getCustomers(\n                    {lazyEvent: JSON.stringify( this.lazyParams )})\n                        .then(data => {\n                            this.customers = data.customers;\n                            this.totalRecords = data.totalRecords;\n                            this.loading = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        },\n        onPage(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onSort(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onFilter() {\n            this.lazyParams.filters = this.filters;\n            this.loadLazyData();\n        },\n        onSelectAllChange(event) {\n            const selectAll = event.checked;\n\n            if (selectAll) {\n                this.customerService.getCustomers().then(data => {\n                    this.selectAll = true;\n                    this.selectedCustomers = data.customers;\n                });\n            }\n            else {\n                this.selectAll = false;\n                this.selectedCustomers = [];\n            }\n        },\n        onRowSelect() {\n            this.selectAll = this.selectedCustomers.length === this.totalRecords\n        },\n        onRowUnselect() {\n            this.selectAll = false;\n        }\n    }\n}\n        "}}}};var c=function(){var e=this,a=e._self._c;return a("div",{staticClass:"content-section documentation"},[a("TabView",[a("TabPanel",{attrs:{header:"Source"}},[a("DocSectionCode",{attrs:{code:e.baseCode}}),a("DocSectionCode",{attrs:{code:e.baseCode2,importCode:""}})],1)],1)],1)},d=[],u=o(i,c,d,!1,null,null);const m=u.exports,f={components:{DataTableLazyDoc:m},data(){return{loading:!1,totalRecords:0,customers:null,selectedCustomers:null,selectAll:!1,filters:{name:{value:"",matchMode:"contains"},"country.name":{value:"",matchMode:"contains"},company:{value:"",matchMode:"contains"},"representative.name":{value:"",matchMode:"contains"}},lazyParams:{},columns:[{field:"name",header:"Name"},{field:"country.name",header:"Country"},{field:"company",header:"Company"},{field:"representative.name",header:"Representative"}]}},customerService:null,created(){this.customerService=new n},mounted(){this.loading=!0,this.lazyParams={first:0,rows:this.$refs.dt.rows,sortField:null,sortOrder:null,filters:this.filters},this.loadLazyData()},methods:{loadLazyData(){this.loading=!0,setTimeout(()=>{this.customerService.getCustomers({lazyEvent:JSON.stringify(this.lazyParams)}).then(r=>{this.customers=r.customers,this.totalRecords=r.totalRecords,this.loading=!1})},Math.random()*1e3+250)},onPage(r){this.lazyParams=r,this.loadLazyData()},onSort(r){this.lazyParams=r,this.loadLazyData()},onFilter(){this.lazyParams.filters=this.filters,this.loadLazyData()},onSelectAllChange(r){r.checked?this.customerService.getCustomers().then(a=>{this.selectAll=!0,this.selectedCustomers=a.customers}):(this.selectAll=!1,this.selectedCustomers=[])},onRowSelect(){this.selectAll=this.selectedCustomers.length===this.totalRecords},onRowUnselect(){this.selectAll=!1}}};var h=function(){var e=this,a=e._self._c;return a("div",[e._m(0),a("div",{staticClass:"content-section implementation"},[a("div",{staticClass:"card"},[a("DataTable",{ref:"dt",attrs:{value:e.customers,lazy:!0,paginator:!0,rows:10,filters:e.filters,dataKey:"id",totalRecords:e.totalRecords,loading:e.loading,filterDisplay:"row",globalFilterFields:["name","country.name","company","representative.name"],responsiveLayout:"scroll",selection:e.selectedCustomers,selectAll:e.selectAll},on:{"update:filters":function(l){e.filters=l},page:function(l){return e.onPage(l)},sort:function(l){return e.onSort(l)},filter:function(l){return e.onFilter(l)},"update:selection":function(l){e.selectedCustomers=l},"select-all-change":e.onSelectAllChange,"row-select":e.onRowSelect,"row-unselect":e.onRowUnselect}},[a("Column",{attrs:{selectionMode:"multiple",headerStyle:"width: 3em"}}),a("Column",{ref:"name",attrs:{field:"name",header:"Name",filterMatchMode:"startsWith",sortable:!0},scopedSlots:e._u([{key:"filter",fn:function({filterModel:l,filterCallback:s}){return[a("InputText",{staticClass:"p-column-filter",attrs:{type:"text",placeholder:"Search by name"},on:{keydown:function(t){return!t.type.indexOf("key")&&e._k(t.keyCode,"enter",13,t.key,"Enter")?null:s()}},model:{value:l.value,callback:function(t){e.$set(l,"value",t)},expression:"filterModel.value"}})]}}])}),a("Column",{ref:"country.name",attrs:{field:"country.name",header:"Country",filterField:"country.name",filterMatchMode:"contains",sortable:!0},scopedSlots:e._u([{key:"filter",fn:function({filterModel:l,filterCallback:s}){return[a("InputText",{staticClass:"p-column-filter",attrs:{type:"text",placeholder:"Search by country"},on:{keydown:function(t){return!t.type.indexOf("key")&&e._k(t.keyCode,"enter",13,t.key,"Enter")?null:s()}},model:{value:l.value,callback:function(t){e.$set(l,"value",t)},expression:"filterModel.value"}})]}}])}),a("Column",{ref:"company",attrs:{field:"company",header:"Company",filterMatchMode:"contains",sortable:!0},scopedSlots:e._u([{key:"filter",fn:function({filterModel:l,filterCallback:s}){return[a("InputText",{staticClass:"p-column-filter",attrs:{type:"text",placeholder:"Search by company"},on:{keydown:function(t){return!t.type.indexOf("key")&&e._k(t.keyCode,"enter",13,t.key,"Enter")?null:s()}},model:{value:l.value,callback:function(t){e.$set(l,"value",t)},expression:"filterModel.value"}})]}}])}),a("Column",{ref:"representative.name",attrs:{field:"representative.name",header:"Representative",filterField:"representative.name",sortable:!0},scopedSlots:e._u([{key:"filter",fn:function({filterModel:l,filterCallback:s}){return[a("InputText",{staticClass:"p-column-filter",attrs:{type:"text",placeholder:"Search by representative"},on:{keydown:function(t){return!t.type.indexOf("key")&&e._k(t.keyCode,"enter",13,t.key,"Enter")?null:s()}},model:{value:l.value,callback:function(t){e.$set(l,"value",t)},expression:"filterModel.value"}})]}}])})],1)],1)]),a("DataTableLazyDoc")],1)},y=[function(){var r=this,e=r._self._c;return e("div",{staticClass:"content-section introduction"},[e("div",{staticClass:"feature-intro"},[e("h1",[r._v("DataTable "),e("span",[r._v("Lazy")])]),e("p",[r._v(" Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging, sorting and filtering happens. Sample belows imitates lazy paging by using an in memory list. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration so that paginator displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist. Also, the implementation of "),e("b",[r._v("checkbox selection")]),r._v(" in lazy tables is left entirely to the user. Since the DataTable does not know what will happen to the data on the next page or whether there are instant data changes, the selection array can be implemented in several ways. One of them is as in the example below. ")])])])}],p=o(f,h,y,!1,null,null);const S=p.exports;export{S as default};
//# sourceMappingURL=Lazy-BTHyQgKn.js.map

!function(){function e(n){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(n)}function n(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function t(n,t,o){var a;return a=function(n,t){if("object"!=e(n)||!n)return n;var o=n[Symbol.toPrimitive];if(void 0!==o){var a=o.call(n,t||"default");if("object"!=e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(n)}(t,"string"),(t="symbol"==e(a)?a:a+"")in n?Object.defineProperty(n,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[t]=o,n}System.register(["./app.component-legacy-cLUjg6K2.js","./resize-observer-polyfill-legacy-0iJwNYH9.js","./app.fullcalendar-legacy-DHW3cqgj.js","./preact-legacy-D7Jvwh8t.js","./app.core-legacy-DJ-X2bns.js"],(function(e,o){"use strict";var a;return{setters:[function(e){a=e.n},null,null,null,null],execute:function(){var o={data:function(){return{nodes:null,rows:10,loading:!1,totalRecords:0}},mounted:function(){var e=this;this.loading=!0,setTimeout((function(){e.loading=!1,e.nodes=e.loadNodes(0,e.rows),e.totalRecords=1e3}),1e3)},methods:{onExpand:function(e){var o=this;e.children||(this.loading=!0,setTimeout((function(){var a=function(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?n(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}({},e);a.children=[{data:{name:a.data.name+" - 0",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}},{data:{name:a.data.name+" - 1",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}}];var r=o.nodes.map((function(n){return n.key===e.key&&(n=a),n}));o.loading=!1,o.nodes=r}),250))},onPage:function(e){var n=this;this.loading=!0,setTimeout((function(){n.loading=!1,n.nodes=n.loadNodes(e.first,n.rows)}),1e3)},loadNodes:function(e,n){for(var t=[],o=0;o<n;o++){var a={key:e+o,data:{name:"Item "+(e+o),size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+(e+o)},leaf:!1};t.push(a)}return t}},components:{TreeTableLazyDoc:a({data:function(){return{sourceCode1:{basic:'\n<TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n    @node-expand="onExpand" @page="onPage" :totalRecords="totalRecords">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},sourceCode2:{basic:"\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n        "}}}},(function(){var e=this,n=e._self._c;return n("div",{staticClass:"content-section documentation"},[n("TabView",[n("TabPanel",{attrs:{header:"Source"}},[n("DocSectionCode",{attrs:{code:e.sourceCode1}}),n("DocSectionCode",{attrs:{code:e.sourceCode2,importCode:""}})],1)],1)],1)}),[],!1,null,null).exports}};e("default",a(o,(function(){var e=this,n=e._self._c;return n("div",[e._m(0),n("div",{staticClass:"content-section implementation"},[n("div",{staticClass:"card"},[n("TreeTable",{attrs:{value:e.nodes,lazy:!0,paginator:!0,rows:e.rows,loading:e.loading,totalRecords:e.totalRecords},on:{"node-expand":e.onExpand,page:e.onPage}},[n("Column",{attrs:{field:"name",header:"Name",expander:!0}}),n("Column",{attrs:{field:"size",header:"Size"}}),n("Column",{attrs:{field:"type",header:"Type"}})],1)],1)]),n("TreeTableLazyDoc")],1)}),[function(){var e=this,n=e._self._c;return n("div",{staticClass:"content-section introduction"},[n("div",{staticClass:"feature-intro"},[n("h1",[e._v("TreeTable "),n("span",[e._v("Lazy")])]),n("p",[e._v("Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..")])])])}],!1,null,null).exports)}}}))}();
//# sourceMappingURL=TreeTableLazyDemo-legacy-ygXStMGD.js.map

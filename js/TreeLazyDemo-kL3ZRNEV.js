import{n as a}from"./app.component-CxwrbeA3.js";import{N as s}from"./NodeService-DGU-G-ef.js";import"./resize-observer-polyfill-B1PUzC5B.js";import"./app.fullcalendar-DqAsc8Hg.js";import"./preact-CNwUjBXN.js";import"./app.core-fp3qH1H1.js";const i={data(){return{sourceCode1:{basic:'\n<Tree :value="nodes" @node-expand="onNodeExpand" :loading="loading"></Tree>\n        '},sourceCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.nodes = this.initateNodes();\n            this.loading = false;\n        }, 2000);\n    },\n    methods: {\n        onNodeExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...this.nodes}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    this.nodes = _nodes;\n                    this.loading = false;\n                }, 500);\n            }\n        },\n        initateNodes() {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n    }\n}\n        "}}}};var d=function(){var e=this,o=e._self._c;return o("div",{staticClass:"content-section documentation"},[o("TabView",[o("TabPanel",{attrs:{header:"Source"}},[o("DocSectionCode",{attrs:{code:e.sourceCode1}}),o("DocSectionCode",{attrs:{code:e.sourceCode2,importCode:""}})],1)],1)],1)},l=[],r=a(i,d,l,!1,null,null);const c=r.exports,_={data(){return{loading:!1,nodes:null}},nodeService:null,created(){this.nodeService=new s},mounted(){this.loading=!0,setTimeout(()=>{this.nodes=this.initateNodes(),this.loading=!1},2e3)},methods:{onNodeExpand(t){t.children||(this.loading=!0,setTimeout(()=>{let e={...t};e.children=[];for(let n=0;n<3;n++)e.children.push({key:t.key+"-"+n,label:"Lazy "+t.label+"-"+n});let o={...this.nodes};o[parseInt(t.key,10)]=e,this.nodes=o,this.loading=!1},500))},initateNodes(){return[{key:"0",label:"Node 0",leaf:!1},{key:"1",label:"Node 1",leaf:!1},{key:"2",label:"Node 2",leaf:!1}]}},components:{TreeLazyDoc:c}};var u=function(){var e=this,o=e._self._c;return o("div",[e._m(0),o("div",{staticClass:"content-section implementation"},[o("div",{staticClass:"card"},[o("Tree",{attrs:{value:e.nodes,loading:e.loading},on:{"node-expand":e.onNodeExpand}})],1)]),o("TreeLazyDoc")],1)},f=[function(){var t=this,e=t._self._c;return e("div",{staticClass:"content-section introduction"},[e("div",{staticClass:"feature-intro"},[e("h1",[t._v("Tree "),e("span",[t._v("Lazy")])]),e("p",[t._v(" Lazy loading is handy when dealing with huge datasets. This example imitates a lazy loading case with timeouts. ")])])])}],h=a(_,u,f,!1,null,"7ce3a28b");const b=h.exports;export{b as default};
//# sourceMappingURL=TreeLazyDemo-kL3ZRNEV.js.map

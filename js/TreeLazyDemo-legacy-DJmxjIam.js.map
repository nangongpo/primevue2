{"version":3,"file":"TreeLazyDemo-legacy-DJmxjIam.js","sources":["../../src/doc/tree/Lazy.vue","../../src/views/tree/TreeLazyDemo.vue"],"sourcesContent":["<template>\n  <div class=\"content-section documentation\">\n    <TabView>\n      <TabPanel header=\"Source\">\n        <DocSectionCode :code=\"sourceCode1\" />\n        <DocSectionCode :code=\"sourceCode2\" importCode />\n      </TabPanel>\n    </TabView>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<Tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n        `\n      },\n      sourceCode2: {\n        basic: `\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.nodes = this.initateNodes();\n            this.loading = false;\n        }, 2000);\n    },\n    methods: {\n        onNodeExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...this.nodes}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    this.nodes = _nodes;\n                    this.loading = false;\n                }, 500);\n            }\n        },\n        initateNodes() {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <div class=\"content-section introduction\">\n      <div class=\"feature-intro\">\n        <h1>Tree <span>Lazy</span></h1>\n        <p>\n          Lazy loading is handy when dealing with huge datasets. This example imitates a lazy loading case with\n          timeouts.\n        </p>\n      </div>\n    </div>\n\n    <div class=\"content-section implementation\">\n      <div class=\"card\">\n        <Tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n      </div>\n    </div>\n\n    <TreeLazyDoc />\n  </div>\n</template>\n\n<script>\nimport TreeLazyDoc from '@/doc/tree/Lazy.vue'\nimport NodeService from '../../service/NodeService'\n\nexport default {\n  data() {\n    return {\n      loading: false,\n      nodes: null\n    }\n  },\n  nodeService: null,\n  created() {\n    this.nodeService = new NodeService()\n  },\n  mounted() {\n    this.loading = true\n\n    setTimeout(() => {\n      this.nodes = this.initateNodes()\n      this.loading = false\n    }, 2000)\n  },\n  methods: {\n    onNodeExpand(node) {\n      if (!node.children) {\n        this.loading = true\n\n        setTimeout(() => {\n          let _node = { ...node }\n          _node.children = []\n\n          for (let i = 0; i < 3; i++) {\n            _node.children.push({\n              key: node.key + '-' + i,\n              label: 'Lazy ' + node.label + '-' + i\n            })\n          }\n\n          let _nodes = { ...this.nodes }\n          _nodes[parseInt(node.key, 10)] = _node\n\n          this.nodes = _nodes\n          this.loading = false\n        }, 500)\n      }\n    },\n    initateNodes() {\n      return [\n        {\n          key: '0',\n          label: 'Node 0',\n          leaf: false\n        },\n        {\n          key: '1',\n          label: 'Node 1',\n          leaf: false\n        },\n        {\n          key: '2',\n          label: 'Node 2',\n          leaf: false\n        }\n      ]\n    }\n  },\n  components: { TreeLazyDoc }\n}\n</script>\n\n<style scoped>\nbutton {\n  margin-right: 0.5rem;\n}\n</style>\n"],"names":["data","sourceCode1","basic","sourceCode2","loading","nodes","nodeService","created","this","NodeService","mounted","_this","setTimeout","initateNodes","methods","onNodeExpand","node","_this2","children","_node","_objectSpread","i","push","key","label","_nodes","parseInt","leaf","components","TreeLazyDoc"],"mappings":"8sDAYA,QAAA,CACAA,gBACA,MAAA,CACAC,YAAA,CACAC,MAGA,2FACAC,YAAA,CACAD,MAkEA,+nDAEA,+TC/DA,CACAF,KAAAA,WACA,MAAA,CACAI,SAAA,EACAC,MAAA,KAEA,EACAC,YAAA,KACAC,QAAAA,WACAC,KAAAF,YAAA,IAAAG,CACA,EACAC,QAAAA,WAAA,IAAAC,EACAH,KAAAA,KAAAJ,SAAA,EAEAQ,YAAA,WACAD,EAAAN,MAAAM,EAAAE,eACAF,EAAAP,SAAA,CACA,GAAA,IACA,EACAU,QAAA,CACAC,aAAA,SAAAC,OAAAC,EAAAT,KACAQ,EAAAE,WACAV,KAAAJ,SAAA,EAEAQ,YAAA,WACA,IAAAO,EAAAC,KAAAJ,GACAG,EAAAD,SAAA,GAEA,IAAA,IAAAG,EAAA,EAAAA,EAAA,EAAAA,IACAF,EAAAD,SAAAI,KAAA,CACAC,IAAAP,EAAAO,IAAA,IAAAF,EACAG,MAAA,QAAAR,EAAAQ,MAAA,IAAAH,IAIA,IAAAI,EAAAL,EAAA,CAAA,EAAAH,EAAAZ,OACAoB,EAAAC,SAAAV,EAAAO,IAAA,KAAAJ,EAEAF,EAAAZ,MAAAoB,EACAR,EAAAb,SAAA,CACA,GAAA,KAEA,EACAS,aAAAA,WACA,MAAA,CACA,CACAU,IAAA,IACAC,MAAA,SACAG,MAAA,GAEA,CACAJ,IAAA,IACAC,MAAA,SACAG,MAAA,GAEA,CACAJ,IAAA,IACAC,MAAA,SACAG,MAAA,GAGA,GAEAC,WAAA,CAAAC,YAAAA"}
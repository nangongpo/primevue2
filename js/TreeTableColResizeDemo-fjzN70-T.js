import{n as o}from"./app.component-CxwrbeA3.js";import{N as r}from"./NodeService-DGU-G-ef.js";import"./resize-observer-polyfill-B1PUzC5B.js";import"./app.fullcalendar-DqAsc8Hg.js";import"./preact-CNwUjBXN.js";import"./app.core-fp3qH1H1.js";const a={data(){return{sourceCode1:{basic:'\n<h3>Fit Mode</h3>\n<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="fit">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Expand Mode</h3>\n<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="expand">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},sourceCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n        "}}}};var s=function(){var t=this,e=t._self._c;return e("div",{staticClass:"content-section documentation"},[e("TabView",[e("TabPanel",{attrs:{header:"Source"}},[e("DocSectionCode",{attrs:{code:t.sourceCode1}}),e("DocSectionCode",{attrs:{code:t.sourceCode2,importCode:""}})],1)],1)],1)},i=[],d=o(a,s,i,!1,null,null);const l=d.exports,c={data(){return{nodes:null}},nodeService:null,created(){this.nodeService=new r},mounted(){this.nodeService.getTreeTableNodes().then(n=>this.nodes=n)},components:{TreeTableColResizeDoc:l}};var u=function(){var t=this,e=t._self._c;return e("div",[t._m(0),e("div",{staticClass:"content-section implementation"},[e("div",{staticClass:"card"},[e("h5",[t._v("Fit Mode")]),e("TreeTable",{attrs:{value:t.nodes,resizableColumns:!0,columnResizeMode:"fit",showGridlines:""}},[e("Column",{attrs:{field:"name",header:"Name",expander:!0}}),e("Column",{attrs:{field:"size",header:"Size"}}),e("Column",{attrs:{field:"type",header:"Type"}})],1)],1),e("div",{staticClass:"card"},[e("h5",[t._v("Expand Mode")]),e("TreeTable",{attrs:{value:t.nodes,resizableColumns:!0,columnResizeMode:"expand",showGridlines:""}},[e("Column",{attrs:{field:"name",header:"Name",expander:!0}}),e("Column",{attrs:{field:"size",header:"Size"}}),e("Column",{attrs:{field:"type",header:"Type"}})],1)],1)]),e("TreeTableColResizeDoc")],1)},m=[function(){var n=this,t=n._self._c;return t("div",{staticClass:"content-section introduction"},[t("div",{staticClass:"feature-intro"},[t("h1",[n._v("TreeTable "),t("span",[n._v("Column Resize")])]),t("p",[n._v(' Columns can be resized using drag drop by setting the resizableColumns to true. There are two resize modes; "fit" and "expand". Fit is the default one and the overall table width does not change when a column is resized. In "expand" mode, table width also changes along with the column width. ')])])])}],h=o(c,u,m,!1,null,null);const b=h.exports;export{b as default};
//# sourceMappingURL=TreeTableColResizeDemo-fjzN70-T.js.map

import{C as r}from"./CountryService-YamlU8VQ.js";import{n as s}from"./app.component-D2FSMXVj.js";import{_ as i}from"./flag_placeholder-BDuXeLXp.js";import"./app.fullcalendar-CKwQu0km.js";import"./preact-CNwUjBXN.js";import"./app.core-Bxt8ZFo4.js";const l={};var a=function(){var t=this,e=t._self._c;return e("div",{staticClass:"content-section documentation"},[e("TabView",[e("TabPanel",{attrs:{header:"Documentation"}},[e("h5",[t._v("Import")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import AutoComplete from 'primevue2/autocomplete'; ")]),e("h5",[t._v("Getting Started")]),e("p",[t._v("AutoComplete uses v-model for two-way binding, requires a list of suggestions and a complete method to query for the results. The complete method gets the query text as event.query property and should update the suggestions with the search results. Example below connects to a remote datasource to fetch the results;")]),e("CodeHighlight",[t._v(' <AutoComplete v-model="selectedCountry" :suggestions="filteredCountriesBasic" @complete="searchCountry($event)" field="name" /> ')]),e("CodeHighlight",{attrs:{lang:"js"}},[t._v(" export default { data() { return { selectedCountry: null, filteredCountries: null } }, countryService: null, created() { this.countryService = new CountryService(); }, methods: { searchCountry(event) { this.filteredCountriesBasic = this.countryService.search(event.query); } } } ")]),e("h5",[t._v("Dropdown")]),e("p",[t._v("Enabling "),e("i",[t._v("dropdown")]),t._v(' property displays a button next to the input field where click behavior of the button is defined using dropdownMode property that takes "blank" or "current" as possible values. "blank" is the default mode to send a query with an empty string whereas "current" setting sends a query with the current value of the input.')]),e("CodeHighlight",[t._v(' <AutoComplete v-model="brand" :dropdown="true" :suggestions="filteredBrands" @complete="searchBrand($event)" placeholder="Hint: type \'v\' or \'f\'" /> ')]),e("h5",[t._v("Multiple Mode")]),e("p",[t._v("Multiple mode is enabled using "),e("i",[t._v("multiple")]),t._v(" property to select more than one value from the autocomplete. In this case, value reference should be an array.")]),e("CodeHighlight",[t._v(' <AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountriesMultiple" @complete="searchCountryMultiple($event)" field="name" /> ')]),e("h5",[t._v("Objects")]),e("p",[t._v("AutoComplete can also work with objects using the "),e("i",[t._v("field")]),t._v(' property that defines the label to display as a suggestion. The value passed to the model would still be the object instance of a suggestion. Here is an example with a Country object that has name and code fields such as {name:"United States",code:"USA"}.')]),e("CodeHighlight",[t._v(' <AutoComplete field="label" v-model="selectedCountry" :suggestions="filteredCountriesBasic" @complete="searchCountryBasic($event)" /> ')]),e("h5",[t._v("Force Selection")]),e("p",[t._v("ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared to make sure the value passed to the model is always one of the suggestions. Simply enable "),e("i",[t._v("forceSelection")]),t._v(" to enforce that input is always from the suggestion list.")]),e("CodeHighlight",[t._v(' <AutoComplete forceSelection v-model="brand" :suggestions="filteredBrands" @complete="searchBrand($event)" /> ')]),e("h5",[t._v("Templating")]),e("p",[t._v("Item template allows displaying custom content inside the suggestions panel. The slotProps variable passed to the template provides an item property to represent an item in the suggestions collection.")]),e("CodeHighlight",[[t._v(' <AutoComplete v-model="brand" :suggestions="filteredBrands" @complete="searchBrand($event)" placeholder="Hint: type \'v\' or \'f\'" :dropdown="true"> <template #item="slotProps"> <img :alt="slotProps.item" :src="\'demo/images/car/\' + slotProps.item + \'.png\'" /> <div>{{slotProps.item}}</div> </template> </AutoComplete> ')]],2),e("h5",[t._v("Properties")]),e("p",[t._v("Any property such as name and placeholder are passed to the underlying input element. Following are the additional properties to configure the component.")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Type")]),e("th",[t._v("Default")]),e("th",[t._v("Description")])])]),e("tbody",[e("tr",[e("td",[t._v("value")]),e("td",[t._v("any")]),e("td",[t._v("null")]),e("td",[t._v("Value of the component.")])]),e("tr",[e("td",[t._v("suggestions")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("An array of suggestions to display.")])]),e("tr",[e("td",[t._v("field")]),e("td",[t._v("any")]),e("td",[t._v("null")]),e("td",[t._v("Property name or getter function of a suggested object to resolve and display.")])]),e("tr",[e("td",[t._v("scrollHeight")]),e("td",[t._v("string")]),e("td",[t._v("200px")]),e("td",[t._v("Maximum height of the suggestions panel.")])]),e("tr",[e("td",[t._v("dropdown")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Displays a button next to the input field when enabled.")])]),e("tr",[e("td",[t._v("dropdownMode")]),e("td",[t._v("string")]),e("td",[t._v("blank")]),e("td",[t._v('Specifies the behavior dropdown button. Default "blank" mode sends an empty string and "current" mode sends the input value.')])]),e("tr",[e("td",[t._v("multiple")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Specifies if multiple values can be selected.")])]),e("tr",[e("td",[t._v("minLength")]),e("td",[t._v("number")]),e("td",[t._v("1")]),e("td",[t._v("Minimum number of characters to initiate a search.")])]),e("tr",[e("td",[t._v("delay")]),e("td",[t._v("number")]),e("td",[t._v("300")]),e("td",[t._v("Delay between keystrokes to wait before sending a query.")])]),e("tr",[e("td",[t._v("ariaLabelledBy")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Establishes relationships between the component and label(s) where its value should be one or more element IDs.")])]),e("tr",[e("td",[t._v("appendTo")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v('Id of the element or "body" for document where the overlay should be appended to.')])]),e("tr",[e("td",[t._v("forceSelection")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions.")])]),e("tr",[e("td",[t._v("autoHighlight")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Highlights automatically the first item of the dropdown to be selected.")])])])])]),e("h5",[t._v("Events")]),e("p",[t._v("Any valid event such as focus, blur and input are passed to the underlying input element. Following are the additional events to configure the component.")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Parameters")]),e("th",[t._v("Description")])])]),e("tbody",[e("tr",[e("td",[t._v("complete")]),e("td",[t._v(" event.originalEvent: Browser event "),e("br"),t._v(" event.query: Value to search with ")]),e("td",[t._v("Callback to invoke to search for suggestions.")])]),e("tr",[e("td",[t._v("item-select")]),e("td",[t._v("event.originalEvent: Browser event "),e("br"),t._v(" event.value: Selected item")]),e("td",[t._v("Callback to invoke when a suggestion is selected.")])]),e("tr",[e("td",[t._v("item-unselect")]),e("td",[t._v("event.originalEvent: Browser event "),e("br"),t._v(" event.value: Unselected item")]),e("td",[t._v("Callback to invoke when a selected value is removed.")])]),e("tr",[e("td",[t._v("dropdown-click")]),e("td",[t._v(" event.originalEvent: browser event "),e("br"),t._v(" event.query: Current value of the input field ")]),e("td",[t._v("Callback to invoke to when dropdown button is clicked.")])]),e("tr",[e("td",[t._v("clear")]),e("td",[t._v("event: Browser event")]),e("td",[t._v("Callback to invoke when input is cleared by the user.")])])])])]),e("h5",[t._v("Slots")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Parameters")])])]),e("tbody",[e("tr",[e("td",[t._v("item")]),e("td",[t._v("item: Option instance "),e("br"),t._v(" index: Index of the option")])])])])]),e("h5",[t._v("Styling")]),e("p",[t._v("Following is the list of structural style classes")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Element")])])]),e("tbody",[e("tr",[e("td",[t._v("p-autocomplete")]),e("td",[t._v("Container element")])]),e("tr",[e("td",[t._v("p-autocomplete-panel")]),e("td",[t._v("Overlay panel of suggestions.")])]),e("tr",[e("td",[t._v("p-autocomplete-items")]),e("td",[t._v("List container of suggestions.")])]),e("tr",[e("td",[t._v("p-autocomplete-item")]),e("td",[t._v("List item of a suggestion.")])]),e("tr",[e("td",[t._v("p-autocomplete-token")]),e("td",[t._v("Element of a selected item in multiple mode.")])]),e("tr",[e("td",[t._v("p-autocomplete-token-icon")]),e("td",[t._v("Close icon element of a selected item in multiple mode.")])]),e("tr",[e("td",[t._v("p-autocomplete-token-label")]),e("td",[t._v("Label of a selected item in multiple mode.")])])])])]),e("h5",[t._v("Dependencies")]),e("p",[t._v("None.")])],1),e("TabPanel",{attrs:{header:"Source"}},[e("a",{staticClass:"btn-viewsource",attrs:{href:"https://github.com/nangongpo/primevue2/tree/main/src/views/autocomplete",target:"_blank",rel:"noopener noreferrer"}},[e("span",[t._v("View on GitHub")])]),e("CodeHighlight",[[t._v(' <h5>Basic</h5> <AutoComplete v-model="selectedCountry1" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name" /> <h5>Dropdown, Templating and Force Selection</h5> <AutoComplete v-model="selectedCountry2" :suggestions="filteredCountries" @complete="searchCountry($event)" :dropdown="true" field="name" forceSelection> <template #item="slotProps"> <div class="country-item"> <img src="../../assets/images/flag_placeholder.png" :class="\'flag flag-\' + slotProps.item.code.toLowerCase()" /> <div>{{slotProps.item.name}}</div> </div> </template> </AutoComplete> <h5>Multiple</h5> <span class="p-fluid"> <AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name" /> </span> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CountryService from '../../service/CountryService'; export default { data() { return { countries: null, selectedCountry1: null, selectedCountry2: null, filteredCountries: null, selectedCountries: [] } }, countryService: null, created() { this.countryService = new CountryService(); }, mounted() { this.countryService.getCountries().then(data => this.countries = data); }, methods: { searchCountry(event) { setTimeout(() => { if (!event.query.trim().length) { this.filteredCountries = [...this.countries]; } else { this.filteredCountries = this.countries.filter((country) => { return country.name.toLowerCase().startsWith(event.query.toLowerCase()); }); } }, 250); } } } ")])],1)],1)],1)},d=[],u=s(l,a,d,!1,null,null);const c=u.exports,v={data(){return{countries:null,selectedCountry1:null,selectedCountry2:null,filteredCountries:null,selectedCountries:[]}},countryService:null,created(){this.countryService=new r},mounted(){this.countryService.getCountries().then(n=>this.countries=n)},methods:{searchCountry(n){setTimeout(()=>{n.query.trim().length?this.filteredCountries=this.countries.filter(t=>t.name.toLowerCase().startsWith(n.query.toLowerCase())):this.filteredCountries=[...this.countries]},250)}},components:{AutoCompleteDoc:c}};var p=function(){var t=this,e=t._self._c;return e("div",[e("div",{staticClass:"content-section introduction"},[t._m(0),e("AppInputStyleSwitch")],1),e("div",{staticClass:"content-section implementation"},[e("div",{staticClass:"card"},[e("h5",[t._v("Basic")]),e("AutoComplete",{attrs:{suggestions:t.filteredCountries,field:"name"},on:{complete:function(o){return t.searchCountry(o)}},model:{value:t.selectedCountry1,callback:function(o){t.selectedCountry1=o},expression:"selectedCountry1"}}),e("h5",[t._v("Dropdown, Templating and Force Selection")]),e("AutoComplete",{attrs:{suggestions:t.filteredCountries,dropdown:!0,field:"name",forceSelection:""},on:{complete:function(o){return t.searchCountry(o)}},scopedSlots:t._u([{key:"item",fn:function(o){return[e("div",{staticClass:"country-item"},[e("img",{class:"flag flag-"+o.item.code.toLowerCase(),attrs:{src:i}}),e("div",[t._v(t._s(o.item.name))])])]}}]),model:{value:t.selectedCountry2,callback:function(o){t.selectedCountry2=o},expression:"selectedCountry2"}}),e("h5",[t._v("Multiple")]),e("span",{staticClass:"p-fluid"},[e("AutoComplete",{attrs:{multiple:!0,suggestions:t.filteredCountries,field:"name"},on:{complete:function(o){return t.searchCountry(o)}},model:{value:t.selectedCountries,callback:function(o){t.selectedCountries=o},expression:"selectedCountries"}})],1)],1)]),e("AutoCompleteDoc")],1)},m=[function(){var n=this,t=n._self._c;return t("div",{staticClass:"feature-intro"},[t("h1",[n._v("AutoComplete")]),t("p",[n._v("AutoComplete is an input component that provides real-time suggestions when being typed.")])])}],h=s(v,p,m,!1,null,null);const w=h.exports;export{w as default};
//# sourceMappingURL=AutoCompleteDemo-SIJEH1zf.js.map

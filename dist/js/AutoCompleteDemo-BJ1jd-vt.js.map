{"version":3,"file":"AutoCompleteDemo-BJ1jd-vt.js","sources":["../../src/views/autocomplete/AutoCompleteDemo.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>AutoComplete</h1>\n                <p>AutoComplete is an input component that provides real-time suggestions when being typed.</p>\n            </div>\n            <AppInputStyleSwitch />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Basic</h5>\n                <AutoComplete v-model=\"selectedCountry1\" :suggestions=\"filteredCountries\" @complete=\"searchCountry($event)\" field=\"name\" />\n\n                <h5>Dropdown, Templating and Force Selection</h5>\n                <AutoComplete v-model=\"selectedCountry2\" :suggestions=\"filteredCountries\" @complete=\"searchCountry($event)\" :dropdown=\"true\" field=\"name\" forceSelection>\n                    <template #item=\"slotProps\">\n                        <div class=\"country-item\">\n                            <img src=\"../../assets/images/flag_placeholder.png\" :class=\"'flag flag-' + slotProps.item.code.toLowerCase()\" />\n                            <div>{{slotProps.item.name}}</div>\n                        </div>\n                    </template>\n                </AutoComplete>\n\n                <h5>Multiple</h5>\n                <span class=\"p-fluid\">\n                    <AutoComplete :multiple=\"true\" v-model=\"selectedCountries\" :suggestions=\"filteredCountries\" @complete=\"searchCountry($event)\" field=\"name\" />\n                </span>\n            </div>\n        </div>\n\n        <AutoCompleteDoc />\n    </div>\n</template>\n\n<script>\nimport CountryService from '../../service/CountryService'\nimport AutoCompleteDoc from './AutoCompleteDoc.vue'\n\nexport default {\n  data() {\n    return {\n      countries: null,\n      selectedCountry1: null,\n      selectedCountry2: null,\n      filteredCountries: null,\n      selectedCountries: []\n    }\n  },\n  countryService: null,\n  created() {\n    this.countryService = new CountryService()\n  },\n  mounted() {\n    this.countryService.getCountries().then(data => this.countries = data)\n  },\n  methods: {\n    searchCountry(event) {\n      setTimeout(() => {\n        if (!event.query.trim().length) {\n          this.filteredCountries = [...this.countries]\n        }\n        else {\n          this.filteredCountries = this.countries.filter((country) => {\n            return country.name.toLowerCase().startsWith(event.query.toLowerCase())\n          })\n        }\n      }, 250)\n    }\n  },\n  components: {\n    'AutoCompleteDoc': AutoCompleteDoc\n  }\n}\n</script>\n"],"names":["_sfc_main","CountryService","data","event","country","AutoCompleteDoc"],"mappings":"+oWAwCAA,EAAA,CACA,MAAA,CACA,MAAA,CACA,UAAA,KACA,iBAAA,KACA,iBAAA,KACA,kBAAA,KACA,kBAAA,CAAA,CACA,CACA,EACA,eAAA,KACA,SAAA,CACA,KAAA,eAAA,IAAAC,CACA,EACA,SAAA,CACA,KAAA,eAAA,eAAA,KAAAC,GAAA,KAAA,UAAAA,CAAA,CACA,EACA,QAAA,CACA,cAAAC,EAAA,CACA,WAAA,IAAA,CACAA,EAAA,MAAA,KAAA,EAAA,OAIA,KAAA,kBAAA,KAAA,UAAA,OAAAC,GACAA,EAAA,KAAA,YAAA,EAAA,WAAAD,EAAA,MAAA,aAAA,CACA,EALA,KAAA,kBAAA,CAAA,GAAA,KAAA,SAAA,CAOA,EAAA,GAAA,CACA,CACA,EACA,WAAA,CACA,gBAAAE,CACA,CACA"}
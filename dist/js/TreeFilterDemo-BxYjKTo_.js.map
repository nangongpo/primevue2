{"version":3,"file":"TreeFilterDemo-BxYjKTo_.js","sources":["../../src/views/tree/TreeFilterDemo.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Filter</span></h1>\n                <p>Filtering updates the node based on the constraints.</p>\n            </div>\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Lenient Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n                <h5>Strict Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n            </div>\n        </div>\n\n        <div class=\"content-section documentation\">\n            <TabView>\n                <TabPanel header=\"Source\">\n<CodeHighlight>\n<template v-pre>\n&lt;h3&gt;Lenient Filter&lt;/h3&gt;\n&lt;Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"&gt;&lt;/Tree&gt;\n\n&lt;h3&gt;Strict Filter&lt;/h3&gt;\n&lt;Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"&gt;&lt;/Tree&gt;\n</template>\n</CodeHighlight>\n\n<CodeHighlight lang=\"javascript\">\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            this.expandedKeys[node.key] = true;\n            if (node.children &lt;&lt; node.children.length) {\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n</CodeHighlight>\n                </TabPanel>\n            </TabView>\n        </div>\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService'\n\nexport default {\n  data() {\n    return {\n      nodes: null,\n      expandedKeys: {}\n    }\n  },\n  nodeService: null,\n  created() {\n    this.nodeService = new NodeService()\n  },\n  mounted() {\n    this.nodeService.getTreeNodes().then(data => this.nodes = data)\n  },\n  methods: {\n    expandAll() {\n      for (let node of this.nodes) {\n        this.expandNode(node)\n      }\n\n      this.expandedKeys = {...this.expandedKeys}\n    },\n    collapseAll() {\n      this.expandedKeys = {}\n    },\n    expandNode(node) {\n      this.expandedKeys[node.key] = true\n      if (node.children && node.children.length) {\n        for (let child of node.children) {\n          this.expandNode(child)\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"],"names":["_sfc_main","NodeService","data","node","child"],"mappings":"iMAgFA,MAAAA,EAAA,CACA,MAAA,CACA,MAAA,CACA,MAAA,KACA,aAAA,CAAA,CACA,CACA,EACA,YAAA,KACA,SAAA,CACA,KAAA,YAAA,IAAAC,CACA,EACA,SAAA,CACA,KAAA,YAAA,eAAA,KAAAC,GAAA,KAAA,MAAAA,CAAA,CACA,EACA,QAAA,CACA,WAAA,CACA,QAAAC,KAAA,KAAA,MACA,KAAA,WAAAA,CAAA,EAGA,KAAA,aAAA,CAAA,GAAA,KAAA,YAAA,CACA,EACA,aAAA,CACA,KAAA,aAAA,CAAA,CACA,EACA,WAAAA,EAAA,CAEA,GADA,KAAA,aAAAA,EAAA,GAAA,EAAA,GACAA,EAAA,UAAAA,EAAA,SAAA,OACA,QAAAC,KAAAD,EAAA,SACA,KAAA,WAAAC,CAAA,CAGA,CACA,CACA"}
{"version":3,"file":"TreeSelectionDemo-legacy-Cxhokocc.js","sources":["../../src/doc/tree/Selection.vue","../../src/views/tree/TreeSelectionDemo.vue"],"sourcesContent":["<template>\n  <div class=\"content-section documentation\">\n    <TabView>\n      <TabPanel header=\"Source\">\n        <DocSectionCode :code=\"sourceCode1\" />\n        <DocSectionCode :code=\"sourceCode2\" importCode />\n      </TabPanel>\n    </TabView>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<h3>Single Selection</h3>\n<Tree :value=\"nodes\" selectionMode=\"single\" :selectionKeys.sync=\"selectedKey1\"></Tree>\n\n<h3>Multiple Selection with MetaKey</h3>\n<Tree :value=\"nodes\" selectionMode=\"multiple\" :selectionKeys.sync=\"selectedKeys1\"></Tree>\n\n<h3>Multiple Selection without MetaKey</h3>\n<Tree :value=\"nodes\" selectionMode=\"multiple\" :selectionKeys.sync=\"selectedKeys2\" :metaKeySelection=\"false\"></Tree>\n\n<h3>Checkbox Selection</h3>\n<Tree :value=\"nodes\" selectionMode=\"checkbox\" :selectionKeys.sync=\"selectedKeys3\"></Tree>\n\n<h3>Events</h3>\n<Tree :value=\"nodes\" selectionMode=\"single\" :selectionKeys.sync=\"selectedKey2\" :metaKeySelection=\"false\"\n    @node-select=\"onNodeSelect\" @node-unselect=\"onNodeUnselect\"></Tree>\n        `\n      },\n      sourceCode2: {\n        basic: `\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        }\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <div class=\"content-section introduction\">\n      <div class=\"feature-intro\">\n        <h1>Tree <span>Selection</span></h1>\n        <p>Tree supports <b>single</b>, <b>multiple</b> and <b>checkbox</b> as selection modes.</p>\n      </div>\n    </div>\n\n    <div class=\"content-section implementation\">\n      <div class=\"card\">\n        <h5>Single Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" :selectionKeys.sync=\"selectedKey1\"></Tree>\n\n        <h5>Multiple Selection with MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" :selectionKeys.sync=\"selectedKeys1\"></Tree>\n\n        <h5>Multiple Selection without MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" :selectionKeys.sync=\"selectedKeys2\" :metaKeySelection=\"false\">\n        </Tree>\n\n        <h5>Checkbox Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"checkbox\" :selectionKeys.sync=\"selectedKeys3\"></Tree>\n\n        <h5>Events</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" :selectionKeys.sync=\"selectedKey2\" :metaKeySelection=\"false\"\n          @node-select=\"onNodeSelect\" @node-unselect=\"onNodeUnselect\"></Tree>\n      </div>\n    </div>\n\n    <TreeSelectionDoc />\n  </div>\n</template>\n\n<script>\nimport TreeSelectionDoc from '@/doc/tree/Selection.vue'\nimport NodeService from '../../service/NodeService'\n\nexport default {\n  data() {\n    return {\n      selectedKey1: null,\n      selectedKey2: null,\n      selectedKeys1: null,\n      selectedKeys2: null,\n      selectedKeys3: null,\n      nodes: null\n    }\n  },\n  nodeService: null,\n  created() {\n    this.nodeService = new NodeService()\n  },\n  mounted() {\n    this.nodeService.getTreeNodes().then(data => this.nodes = data)\n  },\n  methods: {\n    onNodeSelect(node) {\n      this.$toast.add({ severity: 'success', summary: 'Node Selected', detail: node.label, life: 3000 })\n    },\n    onNodeUnselect(node) {\n      this.$toast.add({ severity: 'success', summary: 'Node Unselected', detail: node.label, life: 3000 })\n    }\n  },\n  components: { TreeSelectionDoc }\n}\n</script>\n\n<style scoped>\nbutton {\n  margin-right: .5rem;\n}\n</style>\n"],"names":["data","sourceCode1","basic","sourceCode2","selectedKey1","selectedKey2","selectedKeys1","selectedKeys2","selectedKeys3","nodes","nodeService","created","this","NodeService","mounted","_this","getTreeNodes","then","methods","onNodeSelect","node","$toast","add","severity","summary","detail","label","life","onNodeUnselect","components","TreeSelectionDoc"],"mappings":"+fAYA,QAAA,CACAA,KAAA,WACA,MAAA,CACAC,YAAA,CACAC,MAiBA,4uBACAC,YAAA,CACAD,MAAA,41BAiCA,+TC9BA,CACAF,KAAA,WACA,MAAA,CACAI,aAAA,KACAC,aAAA,KACAC,cAAA,KACAC,cAAA,KACAC,cAAA,KACAC,MAAA,KAEA,EACAC,YAAA,KACAC,QAAAA,WACAC,KAAAF,YAAA,IAAAG,CACA,EACAC,mBAAAC,IAAAA,EACAH,KAAAA,KAAAF,YAAAM,eAAAC,MAAA,SAAAjB,GAAA,OAAAe,EAAAN,MAAAT,CAAA,GACA,EACAkB,QAAA,CACAC,aAAAA,SAAAC,GACAR,KAAAS,OAAAC,IAAA,CAAAC,SAAA,UAAAC,QAAA,gBAAAC,OAAAL,EAAAM,MAAAC,KAAA,KACA,EACAC,eAAAA,SAAAR,GACAR,KAAAS,OAAAC,IAAA,CAAAC,SAAA,UAAAC,QAAA,kBAAAC,OAAAL,EAAAM,MAAAC,KAAA,KACA,GAEAE,WAAA,CAAAC,iBAAAA"}
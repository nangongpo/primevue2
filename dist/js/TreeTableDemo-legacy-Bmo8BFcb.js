!function(){function e(n){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(n)}function n(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function t(n,t,o){var a;return a=function(n,t){if("object"!=e(n)||!n)return n;var o=n[Symbol.toPrimitive];if(void 0!==o){var a=o.call(n,t||"default");if("object"!=e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(n)}(t,"string"),(t="symbol"==e(a)?a:a+"")in n?Object.defineProperty(n,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[t]=o,n}function o(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(!e)return;if("string"==typeof e)return a(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return a(e,n)}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var o=0,r=function(){};return{s:r,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,d=!0,i=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return d=e.done,e},e:function(e){i=!0,l=e},f:function(){try{d||null==t.return||t.return()}finally{if(i)throw l}}}}function a(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}System.register(["./NodeService-legacy-DWh9huOt.js","./app.component-legacy-7lS-4wLG.js","./resize-observer-polyfill-legacy-0iJwNYH9.js","./app.fullcalendar-legacy-DHW3cqgj.js","./preact-legacy-D7Jvwh8t.js","./app.core-legacy-DJ-X2bns.js"],(function(e,a){"use strict";var r,l;return{setters:[function(e){r=e.N},function(e){l=e.n},null,null,null,null],execute:function(){var a=document.createElement("style");a.textContent="button[data-v-382dee63]{margin-right:.5rem}\n/*$vite$:1*/",document.head.appendChild(a);var d=l({name:"Documentation",data:function(){return{importCode:{basic:"\nimport TreeTable from 'primevue2/treetable';\nimport Column from 'primevue2/column';\n        "},baseCode:{basic:'\n<TreeTable :value="nodes">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},baseCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n        "},baseCode3:{basic:"\nexport default class NodeService {\n\n    getTreeTableNodes() {\n        return fetch('demo/data/treetablenodes.json').then(res => res.json()).then(d => d.data);\n    }\n\n}\n        "},baseCode4:{basic:'\n{\n    "root":\n    [\n        {\n            "key": "0",\n            "data":{\n                "name":"Applications",\n                "size":"100kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "0-0",\n                    "data":{\n                        "name":"Vue",\n                        "size":"25kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "0-0-0",\n                            "data":{\n                                "name":"Vue.app",\n                                "size":"10kb",\n                                "type":"Application"\n                            }\n                        },\n                        {\n                            "key": "0-0-1",\n                            "data":{\n                                "name":"native.app",\n                                "size":"10kb",\n                                "type":"Application"\n                            }\n                        },\n                        {\n                            "key": "0-0-2",\n                            "data":{\n                                "name":"mobile.app",\n                                "size":"5kb",\n                                "type":"Application"\n                            }\n                        }\n                    ]\n                },\n                {\n                    "key": "0-1",\n                    "data":{\n                        "name":"editor.app",\n                        "size":"25kb",\n                        "type":"Application"\n                    }\n                },\n                {\n                    "key": "0-2",\n                    "data":{\n                        "name":"settings.app",\n                        "size":"50kb",\n                        "type":"Application"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "1",\n            "data":{\n                "name":"Cloud",\n                "size":"20kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "1-0",\n                    "data":{\n                        "name":"backup-1.zip",\n                        "size":"10kb",\n                        "type":"Zip"\n                    }\n                },\n                {\n                    "key": "1-1",\n                    "data":{\n                        "name":"backup-2.zip",\n                        "size":"10kb",\n                        "type":"Zip"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "2",\n            "data": {\n                "name":"Desktop",\n                "size":"150kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "2-0",\n                    "data":{\n                        "name":"note-meeting.txt",\n                        "size":"50kb",\n                        "type":"Text"\n                    }\n                },\n                {\n                    "key": "2-1",\n                    "data":{\n                        "name":"note-todo.txt",\n                        "size":"100kb",\n                        "type":"Text"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "3",\n            "data":{\n                "name":"Documents",\n                "size":"75kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "3-0",\n                    "data":{\n                        "name":"Work",\n                        "size":"55kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "3-0-0",\n                            "data":{\n                                "name":"Expenses.doc",\n                                "size":"30kb",\n                                "type":"Document"\n                            }\n                        },\n                        {\n                            "key": "3-0-1",\n                            "data":{\n                                "name":"Resume.doc",\n                                "size":"25kb",\n                                "type":"Resume"\n                            }\n                        }\n                    ]\n                },\n                {\n                    "key": "3-1",\n                    "data":{\n                        "name":"Home",\n                        "size":"20kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "3-1-0",\n                            "data":{\n                                "name":"Invoices",\n                                "size":"20kb",\n                                "type":"Text"\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            "key": "4",\n            "data": {\n                "name":"Downloads",\n                "size":"25kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "4-0",\n                    "data": {\n                        "name":"Spanish",\n                        "size":"10kb",\n                        "type":"Folder"\n                    },\n                    "children":[\n                        {\n                            "key": "4-0-0",\n                            "data":{\n                                "name":"tutorial-a1.txt",\n                                "size":"5kb",\n                                "type":"Text"\n                            }\n                        },\n                        {\n                            "key": "4-0-1",\n                            "data":{\n                                "name":"tutorial-a2.txt",\n                                "size":"5kb",\n                                "type":"Text"\n                            }\n                        }\n                    ]\n                },\n                {\n                    "key": "4-1",\n                    "data":{\n                        "name":"Travel",\n                        "size":"15kb",\n                        "type":"Text"\n                    },\n                    "children":[\n                        {\n                            "key": "4-1-0",\n                            "data":{\n                                "name":"Hotel.pdf",\n                                "size":"10kb",\n                                "type":"PDF"\n                            }\n                        },\n                        {\n                            "key": "4-1-1",\n                            "data":{\n                                "name":"Flight.pdf",\n                                "size":"5kb",\n                                "type":"PDF"\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            "key": "5",\n            "data": {\n                "name":"Main",\n                "size":"50kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "5-0",\n                    "data":{\n                        "name":"bin",\n                        "size":"50kb",\n                        "type":"Link"\n                    }\n                },\n                {\n                    "key": "5-1",\n                    "data":{\n                        "name":"etc",\n                        "size":"100kb",\n                        "type":"Link"\n                    }\n                },\n                {\n                    "key": "5-2",\n                    "data":{\n                        "name":"var",\n                        "size":"100kb",\n                        "type":"Link"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "6",\n            "data":{\n                "name":"Other",\n                "size":"5kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "6-0",\n                    "data":{\n                        "name":"todo.txt",\n                        "size":"3kb",\n                        "type":"Text"\n                    }\n                },\n                {\n                    "key": "6-1",\n                    "data":{\n                        "name":"logo.png",\n                        "size":"2kb",\n                        "type":"Picture"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "7",\n            "data":{\n                "name":"Pictures",\n                "size":"150kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "7-0",\n                    "data":{\n                        "name":"barcelona.jpg",\n                        "size":"90kb",\n                        "type":"Picture"\n                    }\n                },\n                {\n                    "key": "7-1",\n                    "data":{\n                        "name":"primevue.png",\n                        "size":"30kb",\n                        "type":"Picture"\n                    }\n                },\n                {\n                    "key": "7-2",\n                    "data":{\n                        "name":"prime.jpg",\n                        "size":"30kb",\n                        "type":"Picture"\n                    }\n                }\n            ]\n        },\n        {\n            "key": "8",\n            "data":{\n                "name":"Videos",\n                "size":"1500kb",\n                "type":"Folder"\n            },\n            "children":[\n                {\n                    "key": "8-0",\n                    "data":{\n                        "name":"primefaces.mkv",\n                        "size":"1000kb",\n                        "type":"Video"\n                    }\n                },\n                {\n                    "key": "8-1",\n                    "data":{\n                        "name":"intro.avi",\n                        "size":"500kb",\n                        "type":"Video"\n                    }\n                }\n            ]\n        }\n    ]\n}\n        '},dynamicColumnsCode:{basic:'\n<TreeTable :value="nodes">\n    <Column v-for="col of columns" :key="col.field"\n        :field="col.field" :header="col.header" :expander="col.expander"></Column>\n</TreeTable>\n        '},dynamicColumnsCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            columns: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'name', header: 'Vin', expander: true},\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n        "},programmaticControlCode:{basic:'\n<div style="margin-bottom: 1em">\n    <Button type="button" icon="pi pi-plus" label="Expand All" @click="expandAll" />\n    <Button type="button" icon="pi pi-minus" label="Collapse All" @click="collapseAll" />\n</div>\n<TreeTable :value="nodes" :expandedKeys="expandedKeys">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},programmaticControlCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            if (node.children && node.children.length) {\n                this.expandedKeys[node.key] = true;\n\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n        "},programmaticControlCode3:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => {\n            this.nodes = data;\n            this.expandedKeys[this.nodes[0].key] = true;\n            this.expandedKeys[this.nodes[1].key] = true;\n        });\n    }\n}\n        "},templatingCode:{basic:'\n<TreeTable :value="nodes">\n    <template #header>\n        FileSystem\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n    <Column headerStyle="width: 8em" bodyStyle="text-align: center">\n        <template #header>\n            <Button type="button" icon="pi pi-cog"></Button>\n        </template>\n        <template #body="slotProps">\n            <Button type="button" icon="pi pi-search" class="p-button-success" style="margin-right: .5em"></Button>\n            <Button type="button" icon="pi pi-pencil" class="p-button-warning"></Button>\n        </template>\n    </Column>\n    <template #footer>\n        <div style="text-align:left">\n            <Button icon="pi pi-refresh" />\n        </div>\n    </template>\n</TreeTable>\n        '},sizesCode:{basic:'\n<TreeTable :value="nodes" class="p-treetable-sm">\n    <template #header>\n        Small Table\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<TreeTable :value="nodes">\n    <template #header>\n        Small Table\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<TreeTable :value="nodes" class="p-treetable-lg">\n    <template #header>\n        Small Table\n    </template>\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},paginationCode:{basic:'\n<TreeTable :value="nodes" :paginator="true" :rows="10">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},paginationCode2:{basic:'\n<TreeTable :value="nodes" :paginator="true" :rows="10">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n    <template #paginatorstart>\n        <Button type="button" icon="pi pi-refresh" />\n    </template>\n    <template #paginatorend>\n        <Button type="button" icon="pi pi-cloud" />\n    </template>\n</TreeTable>\n        '},paginationCode3:{basic:'\n<TreeTable :value="nodes" :paginator="true" :rows="10" :first="firstRecordIndex">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},sortingCode:{basic:'\n<TreeTable :value="nodes" sortMode="single">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n        '},sortingCode2:{basic:'\n<TreeTable :value="nodes" sortMode="multiple">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n        '},sortingCode3:{basic:'\n<TreeTable :value="nodes" sortField="size" :sortOrder="1"">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n\n<TreeTable :value="nodes" sortMode="single" sortField="dynamicSortField" :sortOrder="dynamicSortOrder">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n        '},sortingCode4:{basic:'\n<TreeTable :value="nodes" sortMode="multiple" :multiSortMeta="multiSortMeta">\n    <Column field="name" header="Name" :expander="true" :sortable="true"></Column>\n    <Column field="size" header="Size" :sortable="true"></Column>\n    <Column field="type" header="Type" :sortable="true"></Column>\n</TreeTable>\n        '},sortingCode5:{basic:"\ndata() {\n    return {\n        multiSortMeta: [\n            {field: 'year', order: 1},\n            {field: 'brand', order: -1}\n        ]\n    }\n}\n        "},filteringCode:{basic:'\n<TreeTable :value="nodes" :filters="filters" filterMode="lenient">\n    <template #header>\n        <div style="text-align: right">\n            <i class="pi pi-search" style="margin: 4px 4px 0px 0px;"></i>\n            <InputText v-model="filters[\'global\']" placeholder="Global Search" size="50" />\n        </div>\n    </template>\n    <Column field="name" header="Name" :expander="true">\n        <template #filter>\n            <InputText type="text" v-model="filters[\'name\']" class="p-column-filter" />\n        </template>\n    </Column>\n    <Column field="size" header="Size">\n        <template #filter>\n            <InputText type="text" v-model="filters[\'size\']" class="p-column-filter" />\n        </template>\n    </Column>\n    <Column field="type" header="Type">\n        <template #filter>\n            <InputText type="text" v-model="filters[\'type\']" class="p-column-filter" />\n        </template>\n    </Column>\n</TreeTable>\n        '},filteringCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            filters: {},\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n        "},selectionCode:{basic:'\n<TreeTable :value="nodes" selectionMode="multiple" :selectionKeys.sync="selectedKeys1">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Multiple Selection without MetaKey</h3>\n<TreeTable :value="nodes" selectionMode="multiple" :selectionKeys.sync="selectedKeys2" :metaKeySelection="false">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Checkbox Selection</h3>\n<TreeTable :value="nodes" selectionMode="checkbox" :selectionKeys.sync="selectedKeys3">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Events</h3>\n<TreeTable :value="nodes" selectionMode="single" :selectionKeys.sync="selectedKey2"\n    @node-select="onNodeSelect" @node-unselect="onNodeUnselect">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},selectionCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.data.name, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.data.name, life: 3000});\n        }\n    }\n}\n        "},selectionCode3:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => {\n            this.nodes = data;\n\n            //single preselection\n            this.selectedKey1[this.nodes[0].key] = true;\n\n            //multiple preselection\n            this.selectedKeys2[this.nodes[0].key] = true;\n            this.selectedKeys2[this.nodes[1].key] = true;\n\n            //checkbox preselection\n            this.selectedKeys2[this.nodes[1].key] = {checked: true};\n        });\n    }\n}\n        "},lazyCode:{basic:'\n<TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n    @node-expand="onExpand" @page="onPage" :totalRecords="totalRecords">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},lazyCode2:{basic:"\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n        "},columnResizeCode:{basic:'\n<h3>Fit Mode</h3>\n<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="fit">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Expand Mode</h3>\n<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="expand">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},columnResizeCode2:{basic:'\n<TreeTable :value="nodes" :resizableColumns="true">\n    <Column field="name" header="Name" :expander="true"></Column headerStyle="width: 20%">\n    <Column field="size" header="Size" headerStyle="width: 40%"></Column>\n    <Column field="type" header="Type headerStyle="width: 40%""></Column>\n</TreeTable>\n        '},responsiveCode:{basic:'\n<TreeTable :value="nodes" class="p-treetable-responsive">\n    <template #header>\n        Responsive\n    </template>\n    <Column field="name" header="Name" :expander="true">\n            <template #body="slotProps">\n            {{slotProps.node.data.name}}\n            <span class="sm-visible">{{slotProps.node.data.size}}</span>\n            <span class="sm-visible">{{slotProps.node.data.type}}</span>\n        </template>\n    </Column>\n    <Column field="size" header="Size" headerClass="sm-invisible" bodyClass="sm-invisible"></Column>\n    <Column field="type" header="Type" headerClass="sm-invisible" bodyClass="sm-invisible"></Column>\n</TreeTable>\n        '},responsiveCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n        "},responsiveCode3:{basic:"\n.sm-visible {\n    display: none;\n}\n\n@media screen and (max-width: 40em) {\n    :deep(.sm-invisible) {\n        display: none;\n    }\n\n    :deep(.sm-visible) {\n        display: inline;\n        margin-right: .5rem;\n    }\n}\n        "}}}},(function(){var e=this,n=e._self._c;return n("div",[n("h5",[e._v("Import")]),n("DocSectionCode",{attrs:{code:e.importCode,importCode:""}}),n("h5",[e._v("Getting Started")]),e._m(0),n("h5",[e._v("TreeNode API utilized by the TreeTable")]),e._m(1),n("p",[e._v("Example below loads the nodes from a remote datasource via a service called NodeService.")]),n("DocSectionCode",{attrs:{code:e.baseCode}}),n("DocSectionCode",{attrs:{code:e.baseCode2,importCode:""}}),n("DocSectionCode",{attrs:{code:e.baseCode3,importCode:""}}),n("p",[e._v("The json response sample would be as following.")]),n("div",{staticStyle:{height:"400px",overflow:"auto"}},[n("DocSectionCode",{attrs:{code:e.baseCode4,importCode:""}})],1),n("h5",[e._v("Dynamic Columns")]),n("p",[e._v("Column components can be dynamically generated using a v-for as well.")]),n("DocSectionCode",{attrs:{code:e.dynamicColumnsCode}}),n("DocSectionCode",{attrs:{code:e.dynamicColumnsCode2,importCode:""}}),n("h5",[e._v("Column Component Properties utilized by the TreeTable")]),e._m(2),n("h5",[e._v("Programmatic Control")]),e._m(3),n("p",[e._v("Example below expands and collapses all nodes with buttons.")]),n("DocSectionCode",{attrs:{code:e.programmaticControlCode}}),n("DocSectionCode",{attrs:{code:e.programmaticControlCode2,importCode:""}}),n("p",[e._v("To display some nodes as expanded by default, simply add their keys to the map.")]),n("DocSectionCode",{attrs:{code:e.programmaticControlCode3,importCode:""}}),n("h5",[e._v("Templating")]),e._m(4),n("DocSectionCode",{attrs:{code:e.templatingCode}}),n("h5",[e._v("Sizes")]),e._m(5),n("DocSectionCode",{attrs:{code:e.sizesCode}}),n("h5",[e._v("Pagination")]),n("p",[e._v("Pagination is enabled by setting "),n("i",[e._v("paginator")]),e._v(" property to true and defining the "),n("i",[e._v("rows")]),e._v(" property defines the number of rows per page. See the "),n("router-link",{attrs:{to:"/paginator"}},[e._v("Paginator")]),e._v(" for the available customization options such as paginator templates, page links, rows per page options and more which can be passed through the TreeTable.")],1),n("DocSectionCode",{attrs:{code:e.paginationCode}}),n("p",[e._v("paginatorstart and paginatorend templates are available to specify custom content at the left and right side.")]),n("DocSectionCode",{attrs:{code:e.paginationCode2}}),e._m(6),n("DocSectionCode",{attrs:{code:e.paginationCode3}}),n("h5",[e._v("Sorting")]),e._m(7),n("DocSectionCode",{attrs:{code:e.sortingCode}}),e._m(8),n("DocSectionCode",{attrs:{code:e.sortingCode2}}),e._m(9),n("DocSectionCode",{attrs:{code:e.sortingCode3}}),e._m(10),n("DocSectionCode",{attrs:{code:e.sortingCode4}}),n("DocSectionCode",{attrs:{code:e.sortingCode5,importCode:""}}),n("h5",[e._v("Filtering")]),e._m(11),e._m(12),e._m(13),n("DocSectionCode",{attrs:{code:e.filteringCode}}),n("DocSectionCode",{attrs:{code:e.filteringCode2,importCode:""}}),n("h5",[e._v("Selection")]),e._m(14),e._m(15),n("DocSectionCode",{attrs:{code:e.selectionCode}}),n("DocSectionCode",{attrs:{code:e.selectionCode2,importCode:""}}),n("p",[e._v("To display some nodes as selected by default, simply add their keys to the map.")]),n("DocSectionCode",{attrs:{code:e.selectionCode3,importCode:""}}),n("h5",[e._v("Lazy")]),e._m(16),e._m(17),e._v(". "),n("p",[e._v(" Example below uses an in memory collection to mimic a lazy loading scenario with timeouts.")]),n("DocSectionCode",{attrs:{code:e.lazyCode}}),n("DocSectionCode",{attrs:{code:e.lazyCode2,importCode:""}}),n("h5",[e._v("Column Resize")]),e._m(18),n("DocSectionCode",{attrs:{code:e.columnResizeCode}}),n("p",[e._v("It is important to note that when you need to change column widths, since table width is 100%, giving fixed pixel widths does not work well as browsers scale them, instead give percentage widths.")]),n("DocSectionCode",{attrs:{code:e.columnResizeCode2}}),n("h5",[e._v("Responsive")]),n("p",[e._v("TreeTable display can be optimized according to screen sizes, this example demonstrates a demo where columns are stacked on small screens.")]),n("DocSectionCode",{attrs:{code:e.responsiveCode}}),n("DocSectionCode",{attrs:{code:e.responsiveCode2,importCode:""}}),n("DocSectionCode",{attrs:{code:e.responsiveCode3,importStyle:""}}),n("h5",[e._v("Properties")]),n("p",[e._v("Any property such as style and class are passed to the underlying root element. Following is the additional property to configure the component.")]),e._m(19),n("h5",[e._v("Events")]),e._m(20),n("h5",[e._v("Slots")]),e._m(21),n("h5",[e._v("Styling")]),n("p",[e._v("Following is the list of structural style classes, for theming classes visit "),n("router-link",{attrs:{to:"/theming"}},[e._v("theming")]),e._v(" page.")],1),e._m(22),n("h5",[e._v("Dependencies")]),n("p",[e._v("None.")])],1)}),[function(){var e=this,n=e._self._c;return n("p",[e._v("Tree component requires an array of TreeNode objects as its "),n("i",[e._v("value")]),e._v(" and columns defined with Column component.")])},function(){var e=this,n=e._self._c;return n("div",{staticClass:"doc-tablewrapper"},[n("table",{staticClass:"doc-table"},[n("thead",[n("tr",[n("th",[e._v("Name")]),n("th",[e._v("Type")]),n("th",[e._v("Default")]),n("th",[e._v("Description")])])]),n("tbody",[n("tr",[n("td",[e._v("key")]),n("td",[e._v("any")]),n("td",[e._v("null")]),n("td",[e._v("Mandatory unique key of the node.")])]),n("tr",[n("td",[e._v("data")]),n("td",[e._v("any")]),n("td",[e._v("null")]),n("td",[e._v("Data represented by the node.")])]),n("tr",[n("td",[e._v("children")]),n("td",[e._v("TreeNode[]")]),n("td",[e._v("null")]),n("td",[e._v("An array of treenodes as children.")])]),n("tr",[n("td",[e._v("style")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Inline style of the node.")])]),n("tr",[n("td",[e._v("styleClass")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Style class of the node.")])]),n("tr",[n("td",[e._v("leaf")]),n("td",[e._v("boolean")]),n("td",[e._v("null")]),n("td",[e._v("Specifies if the node has children. Used in lazy loading.")])])])])])},function(){var e=this,n=e._self._c;return n("div",{staticClass:"doc-tablewrapper"},[n("table",{staticClass:"doc-table"},[n("thead",[n("tr",[n("th",[e._v("Name")]),n("th",[e._v("Type")]),n("th",[e._v("Default")]),n("th",[e._v("Description")])])]),n("tbody",[n("tr",[n("td",[e._v("columnKey")]),n("td",[e._v("any")]),n("td",[e._v("null")]),n("td",[e._v("Identifier of a column if field property is not defined.")])]),n("tr",[n("td",[e._v("expander")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("Whether the column would display a toggle icon.")])]),n("tr",[n("td",[e._v("field")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Property name or a getter function of a row data.")])]),n("tr",[n("td",[e._v("sortField")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Property name or a getter function of a row data used for sorting, defaults to field.")])]),n("tr",[n("td",[e._v("sortable")]),n("td",[e._v("any")]),n("td",[e._v("false")]),n("td",[e._v("Defines if a column is sortable.")])]),n("tr",[n("td",[e._v("header")]),n("td",[e._v("any")]),n("td",[e._v("null")]),n("td",[e._v("Header content of the column.")])]),n("tr",[n("td",[e._v("footer")]),n("td",[e._v("any")]),n("td",[e._v("null")]),n("td",[e._v("Footer content of the column.")])]),n("tr",[n("td",[e._v("headerStyle")]),n("td",[e._v("object")]),n("td",[e._v("null")]),n("td",[e._v("Inline style of the column.")])]),n("tr",[n("td",[e._v("headerClass")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Style class of the column.")])]),n("tr",[n("td",[e._v("bodyStyle")]),n("td",[e._v("object")]),n("td",[e._v("null")]),n("td",[e._v("Inline style of the column.")])]),n("tr",[n("td",[e._v("bodyClass")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Style class of the column.")])]),n("tr",[n("td",[e._v("footerStyle")]),n("td",[e._v("object")]),n("td",[e._v("null")]),n("td",[e._v("Inline style of the column.")])]),n("tr",[n("td",[e._v("footerClass")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Style class of the column.")])]),n("tr",[n("td",[e._v("filterHeaderStyle")]),n("td",[e._v("object")]),n("td",[e._v("null")]),n("td",[e._v("Inline style of the column filter header.")])]),n("tr",[n("td",[e._v("filterHeaderClass")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Style class of the column filter header.")])]),n("tr",[n("td",[e._v("filterMatchMode")]),n("td",[e._v("string")]),n("td",[e._v("startsWith")]),n("td",[e._v('Defines filterMatchMode; "startsWith", "contains", "endsWidth", "equals", "notEquals", "in" and "custom".')])]),n("tr",[n("td",[e._v("excludeGlobalFilter")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("Whether to exclude from global filtering or not.")])])])])])},function(){var e=this,n=e._self._c;return n("p",[e._v("Tree state can be controlled programmatically with the "),n("i",[e._v("expandedKeys")]),e._v(" property that defines the keys that are expanded. This property is a Map instance whose key is the key of a node and value is a boolean. Note that "),n("i",[e._v("expandedKeys")]),e._v(" also supports two-way binding with the sync modifier. ")])},function(){var e=this,n=e._self._c;return n("p",[e._v("Field data of a corresponding node is displayed as the cell content by default, this can be customized using a "),n("i",[e._v("body")]),e._v(" template where current node data and column properties are passed via the slot props. On the other hand, "),n("i",[e._v("header")]),e._v(" and "),n("i",[e._v("footer")]),e._v(" sections of a column can either be defined with the properties or the templates. Similarly TreeTable itself also provides header and footer properties along with the templates for the main header and footer of the table. ")])},function(){var e=this,n=e._self._c;return n("p",[e._v("In addition to the regular table, a smal and a large version are available with different paddings. For a table with smaller paddings use "),n("i",[e._v("p-treetable-sm")]),e._v(" class and for a larger one use "),n("i",[e._v("p-treetable-lg")]),e._v(".")])},function(){var e=this,n=e._self._c;return n("p",[e._v("Paginator can also be programmed programmatically using a binding to the "),n("i",[e._v("first")]),e._v(' property that defines the index of the first element to display. For example setting first to zero will reset the paginator to the very first page. This property also supports "sync" keyword in case you\'d like your binding to be updated whenever the user changes the page.')])},function(){var e=this,n=e._self._c;return n("p",[e._v("Enabling "),n("i",[e._v("sortable")]),e._v(" property at column component would be enough to make a column sortable. The property to use when sorting is the "),n("i",[e._v("field")]),e._v(" by default and can be customized using the "),n("i",[e._v("sortField")]),e._v(". ")])},function(){var e=this,n=e._self._c;return n("p",[e._v("By default sorting is executed on the clicked column only. To enable multiple field sorting, set "),n("i",[e._v("sortMode")]),e._v(' property to "multiple" and use metakey when clicking on another column.')])},function(){var e=this,n=e._self._c;return n("p",[e._v("In case you'd like to display the table as sorted per a single column by default on mount or programmatically apply sort, use "),n("i",[e._v("sortField")]),e._v(" and "),n("i",[e._v("sortOrder")]),e._v(' properties. These two properties also support the "sync" keyword to get updated when the user applies sort a column.')])},function(){var e=this,n=e._self._c;return n("p",[e._v("In multiple mode, use the "),n("i",[e._v("multiSortMeta")]),e._v(" property and bind an array of SortMeta objects instead.")])},function(){var e=this,n=e._self._c;return n("p",[e._v("Filtering is enabled by defining a filter template per column to populate the "),n("i",[e._v("filters")]),e._v(" property of the TreeTable. The "),n("i",[e._v("filters")]),e._v(' property should be an key-value object where keys are the field name and the value is the filter value. The filter template receives the column properties via the slotProps and accepts any form element as the filter element. Default match mode is "startsWith" and this can be configured per column using the '),n("i",[e._v("filterMatchMode")]),e._v(' property that also accepts "contains", "endsWith", "equals", "notEquals" and "in" as available modes.')])},function(){var e=this,n=e._self._c;return n("p",[e._v("Optionally a global filter is available to search against all the fields, in this case the special "),n("i",[e._v("global")]),e._v(" keyword should be the property to be populated.")])},function(){var e=this,n=e._self._c;return n("p",[e._v("In addition "),n("i",[e._v("filterMode")]),e._v(" specifies the filtering strategy. In "),n("b",[e._v("lenient")]),e._v(" mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in "),n("b",[e._v("strict")]),e._v(" mode when the query matches a node, filtering continues on all descendants.")])},function(){var e=this,n=e._self._c;return n("p",[e._v("Tree supports "),n("b",[e._v("single")]),e._v(", "),n("b",[e._v("multiple")]),e._v(" and "),n("b",[e._v("checkbox")]),e._v(" selection modes. Define the "),n("i",[e._v("selectionKeys")]),e._v(" with the sync operator and the "),n("i",[e._v("selectionMode")]),e._v(" properties to enable the selection. By default in multiple selection mode, metaKey is necessary to add to existing selections however this can be configured with "),n("i",[e._v("metaKeySelection")]),e._v(" property. Note that in touch enabled devices, Tree does not require metaKey. In addition selection on a particular node can be disabled if the "),n("i",[e._v("selectable")]),e._v(" is false on the node instance.")])},function(){var e=this,n=e._self._c;return n("p",[e._v("Similarly to the "),n("i",[e._v("expandedKeys")]),e._v(", "),n("i",[e._v("selectionKeys")]),e._v(' is a Map instance whose key is the key of a node and value is a boolean in "single" and "multiple" cases. On the other hand in "checkbox" mode, instead of a boolean, value should be an object that has "checked" and "partialChecked" properties to represent the checked state of a node.')])},function(){var e=this,n=e._self._c;return n("p",[e._v("Lazy Loading is handy to deal with huge datasets. Idea is instead of loading the whole tree, load nodes on demand when necessary. The important part when lazy loading nodes is setting "),n("i",[e._v("leaf")]),e._v(" to true on a node instance so that even without children, tree would render an expand icon. Example below uses an in memory collection to mimic a lazy loading scenario with timeouts. ")])},function(){var e=this,n=e._self._c;return n("p",[e._v("In addition lazy loading of root level nodes is implemented by handling pagination and sorting using "),n("i",[e._v("page")]),e._v(" and "),n("i",[e._v("sort")]),e._v(" events by making a remote query using the information passed to the events such as first offset, number of rows and sort field for ordering. Filtering is handled differently as filter elements are defined using templates, use the event you prefer on your form elements such as input, change, blur to make a remote call by passing the filters property to update the displayed data. Note that, in lazy filtering, totalRecords should also be updated to align the data with the paginator.")])},function(){var e=this,n=e._self._c;return n("p",[e._v("Columns can be resized using drag drop by setting the "),n("i",[e._v("resizableColumns")]),e._v(' to true. There are two resize modes; "fit" and "expand". Fit is the default one and the overall table width does not change when a column is resized. In "expand" mode, table width also changes along with the column width. '),n("i",[e._v("column-resize-end")]),e._v(" is a callback that passes the resized column header and delta change as a parameter.")])},function(){var e=this,n=e._self._c;return n("div",{staticClass:"doc-tablewrapper"},[n("table",{staticClass:"doc-table"},[n("thead",[n("tr",[n("th",[e._v("Name")]),n("th",[e._v("Type")]),n("th",[e._v("Default")]),n("th",[e._v("Description")])])]),n("tbody",[n("tr",[n("td",[e._v("value")]),n("td",[e._v("array")]),n("td",[e._v("null")]),n("td",[e._v("An array of treenodes.")])]),n("tr",[n("td",[e._v("expandedKeys")]),n("td",[e._v("array")]),n("td",[e._v("null")]),n("td",[e._v("A map of keys to represent the state of the tree expansion state in controlled mode.")])]),n("tr",[n("td",[e._v("selectionKeys")]),n("td",[e._v("any")]),n("td",[e._v("null")]),n("td",[e._v("A map of keys to control the selection state.")])]),n("tr",[n("td",[e._v("selectionMode")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v('Defines the selection mode, valid values "single", "multiple", and "checkbox".')])]),n("tr",[n("td",[e._v("metaKeySelection")]),n("td",[e._v("boolean")]),n("td",[e._v("true")]),n("td",[e._v("Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.")])]),n("tr",[n("td",[e._v("rows")]),n("td",[e._v("number")]),n("td",[e._v("null")]),n("td",[e._v("Number of rows to display per page.")])]),n("tr",[n("td",[e._v("first")]),n("td",[e._v("number")]),n("td",[e._v("0")]),n("td",[e._v("Index of the first row to be displayed.")])]),n("tr",[n("td",[e._v("totalRecords")]),n("td",[e._v("number")]),n("td",[e._v("null")]),n("td",[e._v("Number of total records, defaults to length of value when not defined.")])]),n("tr",[n("td",[e._v("paginator")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("When specified as true, enables the pagination.")])]),n("tr",[n("td",[e._v("paginatorPosition")]),n("td",[e._v("string")]),n("td",[e._v("bottom")]),n("td",[e._v('Position of the paginator, options are "top","bottom" or "both".')])]),n("tr",[n("td",[e._v("alwaysShowPaginator")]),n("td",[e._v("boolean")]),n("td",[e._v("true")]),n("td",[e._v("Whether to show it even there is only one page.")])]),n("tr",[n("td",[e._v("paginatorTemplate")]),n("td",[e._v("string")]),n("td",[e._v("FirstPageLink PrevPageLink PageLinks "),n("br"),e._v(" NextPageLink LastPageLink RowsPerPageDropdown")]),n("td",[e._v("Template of the paginator.")])]),n("tr",[n("td",[e._v("pageLinkSize")]),n("td",[e._v("number")]),n("td",[e._v("5")]),n("td",[e._v("Number of page links to display.")])]),n("tr",[n("td",[e._v("rowsPerPageOptions")]),n("td",[e._v("array")]),n("td",[e._v("null")]),n("td",[e._v("Array of integer values to display inside rows per page dropdown.")])]),n("tr",[n("td",[e._v("currentPageReportTemplate")]),n("td",[e._v("string")]),n("td",[e._v("({currentPage} of {totalPages})")]),n("td",[e._v("Template of the current page report element.")])]),n("tr",[n("td",[e._v("lazy")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("Defines if data is loaded and interacted with in lazy manner.")])]),n("tr",[n("td",[e._v("loading")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("Displays a loader to indicate data load is in progress.")])]),n("tr",[n("td",[e._v("loadingIcon")]),n("td",[e._v("string")]),n("td",[e._v("pi pi-spinner")]),n("td",[e._v("The icon to show while indicating data load is in progress.")])]),n("tr",[n("td",[e._v("rowHover")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("When enabled, background of the rows change on hover.")])]),n("tr",[n("td",[e._v("autoLayout")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("Whether the cell widths scale according to their content or not.")])]),n("tr",[n("td",[e._v("sortField")]),n("td",[e._v("string")]),n("td",[e._v("null")]),n("td",[e._v("Property name or a getter function of a row data used for sorting by default.")])]),n("tr",[n("td",[e._v("sortOrder")]),n("td",[e._v("number")]),n("td",[e._v("null")]),n("td",[e._v("Order to sort the data by default.")])]),n("tr",[n("td",[e._v("defaultSortOrder")]),n("td",[e._v("number")]),n("td",[e._v("1")]),n("td",[e._v("Default sort order of an unsorted column.")])]),n("tr",[n("td",[e._v("multiSortMeta")]),n("td",[e._v("array")]),n("td",[e._v("null")]),n("td",[e._v("An array of SortMeta objects to sort the data by default in multiple sort mode.")])]),n("tr",[n("td",[e._v("sortMode")]),n("td",[e._v("string")]),n("td",[e._v("single")]),n("td",[e._v("Defines whether sorting works on single column or on multiple columns.")])]),n("tr",[n("td",[e._v("removableSort")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("When enabled, columns can have an un-sorted state.")])]),n("tr",[n("td",[e._v("filters")]),n("td",[e._v("object")]),n("td",[e._v("null")]),n("td",[e._v("Filters object with key-value pairs to define the filters.")])]),n("tr",[n("td",[e._v("filterMode")]),n("td",[e._v("string")]),n("td",[e._v("lenient")]),n("td",[e._v('Mode for filtering valid values are "lenient" and "strict". Default is lenient.')])]),n("tr",[n("td",[e._v("filterLocale")]),n("td",[e._v("string")]),n("td",[e._v("undefined")]),n("td",[e._v("Locale to use in filtering. The default locale is the host environment's current locale.")])]),n("tr",[n("td",[e._v("resizableColumns")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("When enabled, columns can be resized using drag and drop.")])]),n("tr",[n("td",[e._v("columnResizeMode")]),n("td",[e._v("string")]),n("td",[e._v("fit")]),n("td",[e._v("Defines whether the overall table width should change on column resize, "),n("br"),e._v(' valid values are "fit" and "expand".')])]),n("tr",[n("td",[e._v("indentation")]),n("td",[e._v("number")]),n("td",[e._v("1")]),n("td",[e._v("Indentation factor as rem value for children nodes. Defaults to 1rem.")])]),n("tr",[n("td",[e._v("showGridlines")]),n("td",[e._v("boolean")]),n("td",[e._v("false")]),n("td",[e._v("Whether to show grid lines between cells.")])])])])])},function(){var e=this,n=e._self._c;return n("div",{staticClass:"doc-tablewrapper"},[n("table",{staticClass:"doc-table"},[n("thead",[n("tr",[n("th",[e._v("Name")]),n("th",[e._v("Parameters")]),n("th",[e._v("Description")])])]),n("tbody",[n("tr",[n("td",[e._v("page")]),n("td",[e._v("event.originalEvent: Browser event "),n("br"),e._v(" event.page: New page number "),n("br"),e._v(" event.pageCount: Total page count "),n("br"),e._v(" event.first: Index of first record "),n("br"),e._v(" event.rows: Number of rows to display in new page "),n("br"),e._v(" event.sortField: Field to sort against "),n("br"),e._v(" event.sortOrder: Sort order as integer "),n("br"),e._v(" event.multiSortMeta: MultiSort metadata "),n("br"),e._v(" event.filters: Collection of active filters "),n("br"),e._v(" event.filterMatchModes: Match modes per field ")]),n("td",[e._v("Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation.")])]),n("tr",[n("td",[e._v("sort")]),n("td",[e._v("event.originalEvent: Browser event "),n("br"),e._v(" event.first: Index of first record "),n("br"),e._v(" event.rows: Number of rows to display in new page "),n("br"),e._v(" event.sortField: Field to sort against "),n("br"),e._v(" event.sortOrder: Sort order as integer "),n("br"),e._v(" event.multiSortMeta: MultiSort metadata "),n("br"),e._v(" event.filters: Collection of active filters "),n("br"),e._v(" event.filterMatchModes: Match modes per field ")]),n("td",[e._v("Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation.")])]),n("tr",[n("td",[e._v("filter")]),n("td",[e._v("event.originalEvent: Browser event "),n("br"),e._v(" event.first: Index of first record "),n("br"),e._v(" event.rows: Number of rows to display in new page "),n("br"),e._v(" event.sortField: Field to sort against "),n("br"),e._v(" event.sortOrder: Sort order as integer "),n("br"),e._v(" event.multiSortMeta: MultiSort metadata "),n("br"),e._v(" event.filters: Collection of active filters "),n("br"),e._v(" event.filteredValue: Filtered collection "),n("br"),e._v(" event.filterMatchModes: Match modes per field ")]),n("td",[e._v("Event to emit after filtering, not triggered in lazy mode.")])]),n("tr",[n("td",[e._v("node-select")]),n("td",[e._v("node: Node instance")]),n("td",[e._v("Callback to invoke when a node is selected.")])]),n("tr",[n("td",[e._v("node-unselect")]),n("td",[e._v("node: Node instance")]),n("td",[e._v("Callback to invoke when a node is unselected.")])]),n("tr",[n("td",[e._v("node-expand")]),n("td",[e._v("node: Node instance")]),n("td",[e._v("Callback to invoke when a node is expanded.")])]),n("tr",[n("td",[e._v("node-collapse")]),n("td",[e._v("node: Node instance")]),n("td",[e._v("Callback to invoke when a node is collapsed.")])]),n("tr",[n("td",[e._v("column-resize-end")]),n("td",[e._v("event.element: DOM element of the resized column."),n("br"),e._v(" event.delta: Change in column width")]),n("td",[e._v("Callback to invoke when a column is resized.")])])])])])},function(){var e=this,n=e._self._c;return n("div",{staticClass:"doc-tablewrapper"},[n("table",{staticClass:"doc-table"},[n("thead",[n("tr",[n("th",[e._v("Name")]),n("th",[e._v("Parameters")])])]),n("tbody",[n("tr",[n("td",[e._v("header")]),n("td",[e._v("-")])]),n("tr",[n("td",[e._v("paginatorstart")]),n("td",[e._v("-")])]),n("tr",[n("td",[e._v("paginatorend")]),n("td",[e._v("-")])]),n("tr",[n("td",[e._v("empty")]),n("td",[e._v("-")])]),n("tr",[n("td",[e._v("footer")]),n("td",[e._v("-")])])])])])},function(){var e=this,n=e._self._c;return n("div",{staticClass:"doc-tablewrapper"},[n("table",{staticClass:"doc-table"},[n("thead",[n("tr",[n("th",[e._v("Name")]),n("th",[e._v("Element")])])]),n("tbody",[n("tr",[n("td",[e._v("p-treetable")]),n("td",[e._v("Container element.")])]),n("tr",[n("td",[e._v("p-treetable-header")]),n("td",[e._v("Header section.")])]),n("tr",[n("td",[e._v("p-treetable-footer")]),n("td",[e._v("Footer section.")])]),n("tr",[n("td",[e._v("p-column-title")]),n("td",[e._v("Title of a column.")])]),n("tr",[n("td",[e._v("p-sortable-column")]),n("td",[e._v("Sortable column header.")])]),n("tr",[n("td",[e._v("p-treetable-scrollable-header")]),n("td",[e._v("Container of header in a scrollable table.")])]),n("tr",[n("td",[e._v("p-treetable-scrollable-body")]),n("td",[e._v("Container of body in a scrollable table.")])]),n("tr",[n("td",[e._v("p-treetable-scrollable-footer")]),n("td",[e._v("Container of footer in a scrollable table.")])]),n("tr",[n("td",[e._v("p-treetable-emptymessage")]),n("td",[e._v("Cell containing the empty message.")])]),n("tr",[n("td",[e._v("p-treetable-toggler")]),n("td",[e._v("Toggler icon.")])])])])])}],!1,null,null).exports,i=l({name:"SourceCode",data:function(){return{sourceCode1:{basic:'\n<h3>Basic</h3>\n<TreeTable :value="nodes">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n\n<h3>Dynamic Columns</h3>\n<TreeTable :value="nodes">\n    <Column v-for="col of columns" :key="col.field"\n        :field="col.field" :header="col.header" :expander="col.expander"></Column>\n</TreeTable>\n\n<h3>Programmatic Control</h3>\n<div style="margin-bottom: 1em">\n    <Button type="button" icon="pi pi-plus" label="Expand All" @click="expandAll" />\n    <Button type="button" icon="pi pi-minus" label="Collapse All" @click="collapseAll" />\n</div>\n<TreeTable :value="nodes" :expandedKeys="expandedKeys">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},sourceCode2:{basic:"\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            columns: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'name', header: 'Vin', expander: true},\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            if (node.children &amp;&amp; node.children.length) {\n                this.expandedKeys[node.key] = true;\n\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n        "}}}},(function(){var e=this,n=e._self._c;return n("div",[e._m(0),n("DocSectionCode",{attrs:{code:e.sourceCode1}}),n("DocSectionCode",{attrs:{code:e.sourceCode2,importCode:""}})],1)}),[function(){var e=this._self._c;return e("a",{staticClass:"btn-viewsource",attrs:{href:"https://github.com/nangongpo/primevue2/tree/main/src/views/treetable",target:"_blank",rel:"noopener noreferrer"}},[e("span",[this._v("View on GitHub")])])}],!1,null,null).exports,s={data:function(){return{nodes:null,columns:null,expandedKeys:{}}},nodeService:null,created:function(){this.nodeService=new r,this.columns=[{field:"name",header:"Vin",expander:!0},{field:"size",header:"Size"},{field:"type",header:"Type"}]},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(n){return e.nodes=n}))},methods:{expandAll:function(){var e,a=o(this.nodes);try{for(a.s();!(e=a.n()).done;){var r=e.value;this.expandNode(r)}}catch(l){a.e(l)}finally{a.f()}this.expandedKeys=function(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?n(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}({},this.expandedKeys)},collapseAll:function(){this.expandedKeys={}},expandNode:function(e){if(e.children&&e.children.length){this.expandedKeys[e.key]=!0;var n,t=o(e.children);try{for(t.s();!(n=t.n()).done;){var a=n.value;this.expandNode(a)}}catch(r){t.e(r)}finally{t.f()}}}},components:{TreeTableDoc:l({components:{Documentation:d,SourceCode:i}},(function(){var e=this._self._c;return e("div",{staticClass:"content-section documentation"},[e("TabView",[e("TabPanel",{attrs:{header:"Documentation"}},[e("Documentation")],1),e("TabPanel",{attrs:{header:"Source"}},[e("SourceCode")],1)],1)],1)}),[],!1,null,null).exports}};e("default",l(s,(function(){var e=this,n=e._self._c;return n("div",[e._m(0),n("div",{staticClass:"content-section implementation"},[n("div",{staticClass:"card"},[n("h5",[e._v("Basic")]),n("TreeTable",{attrs:{value:e.nodes}},[n("Column",{attrs:{field:"name",header:"Name",expander:!0}}),n("Column",{attrs:{field:"size",header:"Size"}}),n("Column",{attrs:{field:"type",header:"Type"}})],1)],1),n("div",{staticClass:"card"},[n("h5",[e._v("Dynamic Columns")]),n("TreeTable",{attrs:{value:e.nodes}},e._l(e.columns,(function(e){return n("Column",{key:e.field,attrs:{field:e.field,header:e.header,expander:e.expander}})})),1)],1),n("div",{staticClass:"card"},[n("h5",[e._v("Programmatic Control")]),n("div",{staticStyle:{"margin-bottom":"1em"}},[n("Button",{attrs:{type:"button",icon:"pi pi-plus",label:"Expand All"},on:{click:e.expandAll}}),n("Button",{attrs:{type:"button",icon:"pi pi-minus",label:"Collapse All"},on:{click:e.collapseAll}})],1),n("TreeTable",{attrs:{value:e.nodes,expandedKeys:e.expandedKeys}},[n("Column",{attrs:{field:"name",header:"Name",expander:!0}}),n("Column",{attrs:{field:"size",header:"Size"}}),n("Column",{attrs:{field:"type",header:"Type"}})],1)],1)]),n("TreeTableDoc")],1)}),[function(){var e=this,n=e._self._c;return n("div",{staticClass:"content-section introduction"},[n("div",{staticClass:"feature-intro"},[n("h1",[e._v("TreeTable")]),n("p",[e._v("TreeTable is used to display hierarchical data in tabular format.")])])])}],!1,null,"382dee63").exports)}}}))}();
//# sourceMappingURL=TreeTableDemo-legacy-Bmo8BFcb.js.map

!function(){function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function n(t,n,o){var a;return a=function(t,n){if("object"!=e(t)||!t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var a=o.call(t,n||"default");if("object"!=e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(t)}(n,"string"),(n="symbol"==e(a)?a:a+"")in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t}System.register(["./app.component-legacy-BPrNxUCK.js","./app.fullcalendar-legacy-BjBSiNq4.js","./preact-legacy-D7Jvwh8t.js","./app.core-legacy-NUaqKLPR.js"],(function(e,o){"use strict";var a;return{setters:[function(e){a=e.n},null,null,null],execute:function(){var o={data:function(){return{nodes:null,rows:10,loading:!1,totalRecords:0}},mounted:function(){var e=this;this.loading=!0,setTimeout((function(){e.loading=!1,e.nodes=e.loadNodes(0,e.rows),e.totalRecords=1e3}),1e3)},methods:{onExpand:function(e){var o=this;e.children||(this.loading=!0,setTimeout((function(){var a=function(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?t(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}({},e);a.children=[{data:{name:a.data.name+" - 0",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}},{data:{name:a.data.name+" - 1",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}}];var r=o.nodes.map((function(t){return t.key===e.key&&(t=a),t}));o.loading=!1,o.nodes=r}),250))},onPage:function(e){var t=this;this.loading=!0,setTimeout((function(){t.loading=!1,t.nodes=t.loadNodes(e.first,t.rows)}),1e3)},loadNodes:function(e,t){for(var n=[],o=0;o<t;o++){var a={key:e+o,data:{name:"Item "+(e+o),size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+(e+o)},leaf:!1};n.push(a)}return n}}};e("default",a(o,(function(){var e=this,t=e._self._c;return t("div",[e._m(0),t("div",{staticClass:"content-section implementation"},[t("div",{staticClass:"card"},[t("TreeTable",{attrs:{value:e.nodes,lazy:!0,paginator:!0,rows:e.rows,loading:e.loading,totalRecords:e.totalRecords},on:{"node-expand":e.onExpand,page:e.onPage}},[t("Column",{attrs:{field:"name",header:"Name",expander:!0}}),t("Column",{attrs:{field:"size",header:"Size"}}),t("Column",{attrs:{field:"type",header:"Type"}})],1)],1)]),t("div",{staticClass:"content-section documentation"},[t("TabView",[t("TabPanel",{attrs:{header:"Source"}},[t("CodeHighlight",[[e._v(' <TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading" @node-expand="onExpand" @page="onPage" :totalRecords="totalRecords"> <Column field="name" header="Name" :expander="true"></Column> <Column field="size" header="Size"></Column> <Column field="type" header="Type"></Column> </TreeTable> ')]],2),t("CodeHighlight",{attrs:{lang:"javascript"}},[e._v(" export default { data() { return { nodes: null, rows: 10, loading: false, totalRecords: 0 } }, mounted() { this.loading = true; setTimeout(() => { this.loading = false; this.nodes = this.loadNodes(0, this.rows); this.totalRecords = 1000; }, 1000); }, methods: { onExpand(node) { if (!node.children) { this.loading = true; setTimeout(() => { let lazyNode = {...node}; lazyNode.children = [ { data: { name: lazyNode.data.name + ' - 0', size: Math.floor(Math.random() * 1000) + 1 + 'kb', type: 'File' }, }, { data: { name: lazyNode.data.name + ' - 1', size: Math.floor(Math.random() * 1000) + 1 + 'kb', type: 'File' } } ]; let nodes = this.nodes.map(n => { if (n.key === node.key) { n = lazyNode; } return n; }); this.loading = false; this.nodes = nodes; }, 250); } }, onPage(event) { this.loading = true; //imitate delay of a backend call setTimeout(() => { this.loading = false; this.nodes = this.loadNodes(event.first, this.rows); }, 1000); }, loadNodes(first, rows) { let nodes = []; for(let i = 0; i < rows; i++) { let node = { key: (first + i), data: { name: 'Item ' + (first + i), size: Math.floor(Math.random() * 1000) + 1 + 'kb', type: 'Type ' + (first + i) }, leaf: false }; nodes.push(node); } return nodes; } } } ")])],1)],1)],1)])}),[function(){var e=this,t=e._self._c;return t("div",{staticClass:"content-section introduction"},[t("div",{staticClass:"feature-intro"},[t("h1",[e._v("TreeTable "),t("span",[e._v("Lazy")])]),t("p",[e._v("Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..")])])])}],!1,null,null).exports)}}}))}();
//# sourceMappingURL=TreeTableLazyDemo-legacy-CeIZ44zJ.js.map

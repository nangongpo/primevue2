{"version":3,"file":"parchment-legacy-DCraDLkV.js","sources":["../../node_modules/parchment/dist/parchment.js"],"sourcesContent":["var Scope = /* @__PURE__ */ ((Scope2) => (Scope2[Scope2.TYPE = 3] = \"TYPE\", Scope2[Scope2.LEVEL = 12] = \"LEVEL\", Scope2[Scope2.ATTRIBUTE = 13] = \"ATTRIBUTE\", Scope2[Scope2.BLOT = 14] = \"BLOT\", Scope2[Scope2.INLINE = 7] = \"INLINE\", Scope2[Scope2.BLOCK = 11] = \"BLOCK\", Scope2[Scope2.BLOCK_BLOT = 10] = \"BLOCK_BLOT\", Scope2[Scope2.INLINE_BLOT = 6] = \"INLINE_BLOT\", Scope2[Scope2.BLOCK_ATTRIBUTE = 9] = \"BLOCK_ATTRIBUTE\", Scope2[Scope2.INLINE_ATTRIBUTE = 5] = \"INLINE_ATTRIBUTE\", Scope2[Scope2.ANY = 15] = \"ANY\", Scope2))(Scope || {});\nclass Attributor {\n  constructor(attrName, keyName, options = {}) {\n    this.attrName = attrName, this.keyName = keyName;\n    const attributeBit = Scope.TYPE & Scope.ATTRIBUTE;\n    this.scope = options.scope != null ? (\n      // Ignore type bits, force attribute bit\n      options.scope & Scope.LEVEL | attributeBit\n    ) : Scope.ATTRIBUTE, options.whitelist != null && (this.whitelist = options.whitelist);\n  }\n  static keys(node) {\n    return Array.from(node.attributes).map((item) => item.name);\n  }\n  add(node, value) {\n    return this.canAdd(node, value) ? (node.setAttribute(this.keyName, value), !0) : !1;\n  }\n  canAdd(_node, value) {\n    return this.whitelist == null ? !0 : typeof value == \"string\" ? this.whitelist.indexOf(value.replace(/[\"']/g, \"\")) > -1 : this.whitelist.indexOf(value) > -1;\n  }\n  remove(node) {\n    node.removeAttribute(this.keyName);\n  }\n  value(node) {\n    const value = node.getAttribute(this.keyName);\n    return this.canAdd(node, value) && value ? value : \"\";\n  }\n}\nclass ParchmentError extends Error {\n  constructor(message) {\n    message = \"[Parchment] \" + message, super(message), this.message = message, this.name = this.constructor.name;\n  }\n}\nconst _Registry = class _Registry {\n  constructor() {\n    this.attributes = {}, this.classes = {}, this.tags = {}, this.types = {};\n  }\n  static find(node, bubble = !1) {\n    if (node == null)\n      return null;\n    if (this.blots.has(node))\n      return this.blots.get(node) || null;\n    if (bubble) {\n      let parentNode = null;\n      try {\n        parentNode = node.parentNode;\n      } catch {\n        return null;\n      }\n      return this.find(parentNode, bubble);\n    }\n    return null;\n  }\n  create(scroll, input, value) {\n    const match2 = this.query(input);\n    if (match2 == null)\n      throw new ParchmentError(`Unable to create ${input} blot`);\n    const blotClass = match2, node = (\n      // @ts-expect-error Fix me later\n      input instanceof Node || input.nodeType === Node.TEXT_NODE ? input : blotClass.create(value)\n    ), blot = new blotClass(scroll, node, value);\n    return _Registry.blots.set(blot.domNode, blot), blot;\n  }\n  find(node, bubble = !1) {\n    return _Registry.find(node, bubble);\n  }\n  query(query, scope = Scope.ANY) {\n    let match2;\n    return typeof query == \"string\" ? match2 = this.types[query] || this.attributes[query] : query instanceof Text || query.nodeType === Node.TEXT_NODE ? match2 = this.types.text : typeof query == \"number\" ? query & Scope.LEVEL & Scope.BLOCK ? match2 = this.types.block : query & Scope.LEVEL & Scope.INLINE && (match2 = this.types.inline) : query instanceof Element && ((query.getAttribute(\"class\") || \"\").split(/\\s+/).some((name) => (match2 = this.classes[name], !!match2)), match2 = match2 || this.tags[query.tagName]), match2 == null ? null : \"scope\" in match2 && scope & Scope.LEVEL & match2.scope && scope & Scope.TYPE & match2.scope ? match2 : null;\n  }\n  register(...definitions) {\n    return definitions.map((definition) => {\n      const isBlot = \"blotName\" in definition, isAttr = \"attrName\" in definition;\n      if (!isBlot && !isAttr)\n        throw new ParchmentError(\"Invalid definition\");\n      if (isBlot && definition.blotName === \"abstract\")\n        throw new ParchmentError(\"Cannot register abstract class\");\n      const key = isBlot ? definition.blotName : isAttr ? definition.attrName : void 0;\n      return this.types[key] = definition, isAttr ? typeof definition.keyName == \"string\" && (this.attributes[definition.keyName] = definition) : isBlot && (definition.className && (this.classes[definition.className] = definition), definition.tagName && (Array.isArray(definition.tagName) ? definition.tagName = definition.tagName.map((tagName) => tagName.toUpperCase()) : definition.tagName = definition.tagName.toUpperCase(), (Array.isArray(definition.tagName) ? definition.tagName : [definition.tagName]).forEach((tag) => {\n        (this.tags[tag] == null || definition.className == null) && (this.tags[tag] = definition);\n      }))), definition;\n    });\n  }\n};\n_Registry.blots = /* @__PURE__ */ new WeakMap();\nlet Registry = _Registry;\nfunction match(node, prefix) {\n  return (node.getAttribute(\"class\") || \"\").split(/\\s+/).filter((name) => name.indexOf(`${prefix}-`) === 0);\n}\nclass ClassAttributor extends Attributor {\n  static keys(node) {\n    return (node.getAttribute(\"class\") || \"\").split(/\\s+/).map((name) => name.split(\"-\").slice(0, -1).join(\"-\"));\n  }\n  add(node, value) {\n    return this.canAdd(node, value) ? (this.remove(node), node.classList.add(`${this.keyName}-${value}`), !0) : !1;\n  }\n  remove(node) {\n    match(node, this.keyName).forEach((name) => {\n      node.classList.remove(name);\n    }), node.classList.length === 0 && node.removeAttribute(\"class\");\n  }\n  value(node) {\n    const value = (match(node, this.keyName)[0] || \"\").slice(this.keyName.length + 1);\n    return this.canAdd(node, value) ? value : \"\";\n  }\n}\nconst ClassAttributor$1 = ClassAttributor;\nfunction camelize(name) {\n  const parts = name.split(\"-\"), rest = parts.slice(1).map((part) => part[0].toUpperCase() + part.slice(1)).join(\"\");\n  return parts[0] + rest;\n}\nclass StyleAttributor extends Attributor {\n  static keys(node) {\n    return (node.getAttribute(\"style\") || \"\").split(\";\").map((value) => value.split(\":\")[0].trim());\n  }\n  add(node, value) {\n    return this.canAdd(node, value) ? (node.style[camelize(this.keyName)] = value, !0) : !1;\n  }\n  remove(node) {\n    node.style[camelize(this.keyName)] = \"\", node.getAttribute(\"style\") || node.removeAttribute(\"style\");\n  }\n  value(node) {\n    const value = node.style[camelize(this.keyName)];\n    return this.canAdd(node, value) ? value : \"\";\n  }\n}\nconst StyleAttributor$1 = StyleAttributor;\nclass AttributorStore {\n  constructor(domNode) {\n    this.attributes = {}, this.domNode = domNode, this.build();\n  }\n  attribute(attribute, value) {\n    value ? attribute.add(this.domNode, value) && (attribute.value(this.domNode) != null ? this.attributes[attribute.attrName] = attribute : delete this.attributes[attribute.attrName]) : (attribute.remove(this.domNode), delete this.attributes[attribute.attrName]);\n  }\n  build() {\n    this.attributes = {};\n    const blot = Registry.find(this.domNode);\n    if (blot == null)\n      return;\n    const attributes = Attributor.keys(this.domNode), classes = ClassAttributor$1.keys(this.domNode), styles = StyleAttributor$1.keys(this.domNode);\n    attributes.concat(classes).concat(styles).forEach((name) => {\n      const attr = blot.scroll.query(name, Scope.ATTRIBUTE);\n      attr instanceof Attributor && (this.attributes[attr.attrName] = attr);\n    });\n  }\n  copy(target) {\n    Object.keys(this.attributes).forEach((key) => {\n      const value = this.attributes[key].value(this.domNode);\n      target.format(key, value);\n    });\n  }\n  move(target) {\n    this.copy(target), Object.keys(this.attributes).forEach((key) => {\n      this.attributes[key].remove(this.domNode);\n    }), this.attributes = {};\n  }\n  values() {\n    return Object.keys(this.attributes).reduce(\n      (attributes, name) => (attributes[name] = this.attributes[name].value(this.domNode), attributes),\n      {}\n    );\n  }\n}\nconst AttributorStore$1 = AttributorStore, _ShadowBlot = class _ShadowBlot {\n  constructor(scroll, domNode) {\n    this.scroll = scroll, this.domNode = domNode, Registry.blots.set(domNode, this), this.prev = null, this.next = null;\n  }\n  static create(rawValue) {\n    if (this.tagName == null)\n      throw new ParchmentError(\"Blot definition missing tagName\");\n    let node, value;\n    return Array.isArray(this.tagName) ? (typeof rawValue == \"string\" ? (value = rawValue.toUpperCase(), parseInt(value, 10).toString() === value && (value = parseInt(value, 10))) : typeof rawValue == \"number\" && (value = rawValue), typeof value == \"number\" ? node = document.createElement(this.tagName[value - 1]) : value && this.tagName.indexOf(value) > -1 ? node = document.createElement(value) : node = document.createElement(this.tagName[0])) : node = document.createElement(this.tagName), this.className && node.classList.add(this.className), node;\n  }\n  // Hack for accessing inherited static methods\n  get statics() {\n    return this.constructor;\n  }\n  attach() {\n  }\n  clone() {\n    const domNode = this.domNode.cloneNode(!1);\n    return this.scroll.create(domNode);\n  }\n  detach() {\n    this.parent != null && this.parent.removeChild(this), Registry.blots.delete(this.domNode);\n  }\n  deleteAt(index, length) {\n    this.isolate(index, length).remove();\n  }\n  formatAt(index, length, name, value) {\n    const blot = this.isolate(index, length);\n    if (this.scroll.query(name, Scope.BLOT) != null && value)\n      blot.wrap(name, value);\n    else if (this.scroll.query(name, Scope.ATTRIBUTE) != null) {\n      const parent = this.scroll.create(this.statics.scope);\n      blot.wrap(parent), parent.format(name, value);\n    }\n  }\n  insertAt(index, value, def) {\n    const blot = def == null ? this.scroll.create(\"text\", value) : this.scroll.create(value, def), ref = this.split(index);\n    this.parent.insertBefore(blot, ref || void 0);\n  }\n  isolate(index, length) {\n    const target = this.split(index);\n    if (target == null)\n      throw new Error(\"Attempt to isolate at end\");\n    return target.split(length), target;\n  }\n  length() {\n    return 1;\n  }\n  offset(root = this.parent) {\n    return this.parent == null || this === root ? 0 : this.parent.children.offset(this) + this.parent.offset(root);\n  }\n  optimize(_context) {\n    this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer) && this.wrap(this.statics.requiredContainer.blotName);\n  }\n  remove() {\n    this.domNode.parentNode != null && this.domNode.parentNode.removeChild(this.domNode), this.detach();\n  }\n  replaceWith(name, value) {\n    const replacement = typeof name == \"string\" ? this.scroll.create(name, value) : name;\n    return this.parent != null && (this.parent.insertBefore(replacement, this.next || void 0), this.remove()), replacement;\n  }\n  split(index, _force) {\n    return index === 0 ? this : this.next;\n  }\n  update(_mutations, _context) {\n  }\n  wrap(name, value) {\n    const wrapper = typeof name == \"string\" ? this.scroll.create(name, value) : name;\n    if (this.parent != null && this.parent.insertBefore(wrapper, this.next || void 0), typeof wrapper.appendChild != \"function\")\n      throw new ParchmentError(`Cannot wrap ${name}`);\n    return wrapper.appendChild(this), wrapper;\n  }\n};\n_ShadowBlot.blotName = \"abstract\";\nlet ShadowBlot = _ShadowBlot;\nconst _LeafBlot = class _LeafBlot extends ShadowBlot {\n  /**\n   * Returns the value represented by domNode if it is this Blot's type\n   * No checking that domNode can represent this Blot type is required so\n   * applications needing it should check externally before calling.\n   */\n  static value(_domNode) {\n    return !0;\n  }\n  /**\n   * Given location represented by node and offset from DOM Selection Range,\n   * return index to that location.\n   */\n  index(node, offset) {\n    return this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY ? Math.min(offset, 1) : -1;\n  }\n  /**\n   * Given index to location within blot, return node and offset representing\n   * that location, consumable by DOM Selection Range\n   */\n  position(index, _inclusive) {\n    let offset = Array.from(this.parent.domNode.childNodes).indexOf(this.domNode);\n    return index > 0 && (offset += 1), [this.parent.domNode, offset];\n  }\n  /**\n   * Return value represented by this blot\n   * Should not change without interaction from API or\n   * user change detectable by update()\n   */\n  value() {\n    return {\n      [this.statics.blotName]: this.statics.value(this.domNode) || !0\n    };\n  }\n};\n_LeafBlot.scope = Scope.INLINE_BLOT;\nlet LeafBlot = _LeafBlot;\nconst LeafBlot$1 = LeafBlot;\nclass LinkedList {\n  constructor() {\n    this.head = null, this.tail = null, this.length = 0;\n  }\n  append(...nodes) {\n    if (this.insertBefore(nodes[0], null), nodes.length > 1) {\n      const rest = nodes.slice(1);\n      this.append(...rest);\n    }\n  }\n  at(index) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur && index > 0; )\n      index -= 1, cur = next();\n    return cur;\n  }\n  contains(node) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; ) {\n      if (cur === node)\n        return !0;\n      cur = next();\n    }\n    return !1;\n  }\n  indexOf(node) {\n    const next = this.iterator();\n    let cur = next(), index = 0;\n    for (; cur; ) {\n      if (cur === node)\n        return index;\n      index += 1, cur = next();\n    }\n    return -1;\n  }\n  insertBefore(node, refNode) {\n    node != null && (this.remove(node), node.next = refNode, refNode != null ? (node.prev = refNode.prev, refNode.prev != null && (refNode.prev.next = node), refNode.prev = node, refNode === this.head && (this.head = node)) : this.tail != null ? (this.tail.next = node, node.prev = this.tail, this.tail = node) : (node.prev = null, this.head = this.tail = node), this.length += 1);\n  }\n  offset(target) {\n    let index = 0, cur = this.head;\n    for (; cur != null; ) {\n      if (cur === target)\n        return index;\n      index += cur.length(), cur = cur.next;\n    }\n    return -1;\n  }\n  remove(node) {\n    this.contains(node) && (node.prev != null && (node.prev.next = node.next), node.next != null && (node.next.prev = node.prev), node === this.head && (this.head = node.next), node === this.tail && (this.tail = node.prev), this.length -= 1);\n  }\n  iterator(curNode = this.head) {\n    return () => {\n      const ret = curNode;\n      return curNode != null && (curNode = curNode.next), ret;\n    };\n  }\n  find(index, inclusive = !1) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; ) {\n      const length = cur.length();\n      if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0))\n        return [cur, index];\n      index -= length, cur = next();\n    }\n    return [null, 0];\n  }\n  forEach(callback) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; )\n      callback(cur), cur = next();\n  }\n  forEachAt(index, length, callback) {\n    if (length <= 0)\n      return;\n    const [startNode, offset] = this.find(index);\n    let curIndex = index - offset;\n    const next = this.iterator(startNode);\n    let cur = next();\n    for (; cur && curIndex < index + length; ) {\n      const curLength = cur.length();\n      index > curIndex ? callback(\n        cur,\n        index - curIndex,\n        Math.min(length, curIndex + curLength - index)\n      ) : callback(cur, 0, Math.min(curLength, index + length - curIndex)), curIndex += curLength, cur = next();\n    }\n  }\n  map(callback) {\n    return this.reduce((memo, cur) => (memo.push(callback(cur)), memo), []);\n  }\n  reduce(callback, memo) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; )\n      memo = callback(memo, cur), cur = next();\n    return memo;\n  }\n}\nfunction makeAttachedBlot(node, scroll) {\n  const found = scroll.find(node);\n  if (found)\n    return found;\n  try {\n    return scroll.create(node);\n  } catch {\n    const blot = scroll.create(Scope.INLINE);\n    return Array.from(node.childNodes).forEach((child) => {\n      blot.domNode.appendChild(child);\n    }), node.parentNode && node.parentNode.replaceChild(blot.domNode, node), blot.attach(), blot;\n  }\n}\nconst _ParentBlot = class _ParentBlot extends ShadowBlot {\n  constructor(scroll, domNode) {\n    super(scroll, domNode), this.uiNode = null, this.build();\n  }\n  appendChild(other) {\n    this.insertBefore(other);\n  }\n  attach() {\n    super.attach(), this.children.forEach((child) => {\n      child.attach();\n    });\n  }\n  attachUI(node) {\n    this.uiNode != null && this.uiNode.remove(), this.uiNode = node, _ParentBlot.uiClass && this.uiNode.classList.add(_ParentBlot.uiClass), this.uiNode.setAttribute(\"contenteditable\", \"false\"), this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n  }\n  /**\n   * Called during construction, should fill its own children LinkedList.\n   */\n  build() {\n    this.children = new LinkedList(), Array.from(this.domNode.childNodes).filter((node) => node !== this.uiNode).reverse().forEach((node) => {\n      try {\n        const child = makeAttachedBlot(node, this.scroll);\n        this.insertBefore(child, this.children.head || void 0);\n      } catch (err) {\n        if (err instanceof ParchmentError)\n          return;\n        throw err;\n      }\n    });\n  }\n  deleteAt(index, length) {\n    if (index === 0 && length === this.length())\n      return this.remove();\n    this.children.forEachAt(index, length, (child, offset, childLength) => {\n      child.deleteAt(offset, childLength);\n    });\n  }\n  descendant(criteria, index = 0) {\n    const [child, offset] = this.children.find(index);\n    return criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria ? [child, offset] : child instanceof _ParentBlot ? child.descendant(criteria, offset) : [null, -1];\n  }\n  descendants(criteria, index = 0, length = Number.MAX_VALUE) {\n    let descendants = [], lengthLeft = length;\n    return this.children.forEachAt(\n      index,\n      length,\n      (child, childIndex, childLength) => {\n        (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) && descendants.push(child), child instanceof _ParentBlot && (descendants = descendants.concat(\n          child.descendants(criteria, childIndex, lengthLeft)\n        )), lengthLeft -= childLength;\n      }\n    ), descendants;\n  }\n  detach() {\n    this.children.forEach((child) => {\n      child.detach();\n    }), super.detach();\n  }\n  enforceAllowedChildren() {\n    let done = !1;\n    this.children.forEach((child) => {\n      done || this.statics.allowedChildren.some(\n        (def) => child instanceof def\n      ) || (child.statics.scope === Scope.BLOCK_BLOT ? (child.next != null && this.splitAfter(child), child.prev != null && this.splitAfter(child.prev), child.parent.unwrap(), done = !0) : child instanceof _ParentBlot ? child.unwrap() : child.remove());\n    });\n  }\n  formatAt(index, length, name, value) {\n    this.children.forEachAt(index, length, (child, offset, childLength) => {\n      child.formatAt(offset, childLength, name, value);\n    });\n  }\n  insertAt(index, value, def) {\n    const [child, offset] = this.children.find(index);\n    if (child)\n      child.insertAt(offset, value, def);\n    else {\n      const blot = def == null ? this.scroll.create(\"text\", value) : this.scroll.create(value, def);\n      this.appendChild(blot);\n    }\n  }\n  insertBefore(childBlot, refBlot) {\n    childBlot.parent != null && childBlot.parent.children.remove(childBlot);\n    let refDomNode = null;\n    this.children.insertBefore(childBlot, refBlot || null), childBlot.parent = this, refBlot != null && (refDomNode = refBlot.domNode), (this.domNode.parentNode !== childBlot.domNode || this.domNode.nextSibling !== refDomNode) && this.domNode.insertBefore(childBlot.domNode, refDomNode), childBlot.attach();\n  }\n  length() {\n    return this.children.reduce((memo, child) => memo + child.length(), 0);\n  }\n  moveChildren(targetParent, refNode) {\n    this.children.forEach((child) => {\n      targetParent.insertBefore(child, refNode);\n    });\n  }\n  optimize(context) {\n    if (super.optimize(context), this.enforceAllowedChildren(), this.uiNode != null && this.uiNode !== this.domNode.firstChild && this.domNode.insertBefore(this.uiNode, this.domNode.firstChild), this.children.length === 0)\n      if (this.statics.defaultChild != null) {\n        const child = this.scroll.create(this.statics.defaultChild.blotName);\n        this.appendChild(child);\n      } else\n        this.remove();\n  }\n  path(index, inclusive = !1) {\n    const [child, offset] = this.children.find(index, inclusive), position = [[this, index]];\n    return child instanceof _ParentBlot ? position.concat(child.path(offset, inclusive)) : (child != null && position.push([child, offset]), position);\n  }\n  removeChild(child) {\n    this.children.remove(child);\n  }\n  replaceWith(name, value) {\n    const replacement = typeof name == \"string\" ? this.scroll.create(name, value) : name;\n    return replacement instanceof _ParentBlot && this.moveChildren(replacement), super.replaceWith(replacement);\n  }\n  split(index, force = !1) {\n    if (!force) {\n      if (index === 0)\n        return this;\n      if (index === this.length())\n        return this.next;\n    }\n    const after = this.clone();\n    return this.parent && this.parent.insertBefore(after, this.next || void 0), this.children.forEachAt(index, this.length(), (child, offset, _length) => {\n      const split = child.split(offset, force);\n      split != null && after.appendChild(split);\n    }), after;\n  }\n  splitAfter(child) {\n    const after = this.clone();\n    for (; child.next != null; )\n      after.appendChild(child.next);\n    return this.parent && this.parent.insertBefore(after, this.next || void 0), after;\n  }\n  unwrap() {\n    this.parent && this.moveChildren(this.parent, this.next || void 0), this.remove();\n  }\n  update(mutations, _context) {\n    const addedNodes = [], removedNodes = [];\n    mutations.forEach((mutation) => {\n      mutation.target === this.domNode && mutation.type === \"childList\" && (addedNodes.push(...mutation.addedNodes), removedNodes.push(...mutation.removedNodes));\n    }), removedNodes.forEach((node) => {\n      if (node.parentNode != null && // @ts-expect-error Fix me later\n      node.tagName !== \"IFRAME\" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY)\n        return;\n      const blot = this.scroll.find(node);\n      blot != null && (blot.domNode.parentNode == null || blot.domNode.parentNode === this.domNode) && blot.detach();\n    }), addedNodes.filter((node) => node.parentNode === this.domNode && node !== this.uiNode).sort((a, b) => a === b ? 0 : a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING ? 1 : -1).forEach((node) => {\n      let refBlot = null;\n      node.nextSibling != null && (refBlot = this.scroll.find(node.nextSibling));\n      const blot = makeAttachedBlot(node, this.scroll);\n      (blot.next !== refBlot || blot.next == null) && (blot.parent != null && blot.parent.removeChild(this), this.insertBefore(blot, refBlot || void 0));\n    }), this.enforceAllowedChildren();\n  }\n};\n_ParentBlot.uiClass = \"\";\nlet ParentBlot = _ParentBlot;\nconst ParentBlot$1 = ParentBlot;\nfunction isEqual(obj1, obj2) {\n  if (Object.keys(obj1).length !== Object.keys(obj2).length)\n    return !1;\n  for (const prop in obj1)\n    if (obj1[prop] !== obj2[prop])\n      return !1;\n  return !0;\n}\nconst _InlineBlot = class _InlineBlot extends ParentBlot$1 {\n  static create(value) {\n    return super.create(value);\n  }\n  static formats(domNode, scroll) {\n    const match2 = scroll.query(_InlineBlot.blotName);\n    if (!(match2 != null && domNode.tagName === match2.tagName)) {\n      if (typeof this.tagName == \"string\")\n        return !0;\n      if (Array.isArray(this.tagName))\n        return domNode.tagName.toLowerCase();\n    }\n  }\n  constructor(scroll, domNode) {\n    super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);\n  }\n  format(name, value) {\n    if (name === this.statics.blotName && !value)\n      this.children.forEach((child) => {\n        child instanceof _InlineBlot || (child = child.wrap(_InlineBlot.blotName, !0)), this.attributes.copy(child);\n      }), this.unwrap();\n    else {\n      const format = this.scroll.query(name, Scope.INLINE);\n      if (format == null)\n        return;\n      format instanceof Attributor ? this.attributes.attribute(format, value) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value);\n    }\n  }\n  formats() {\n    const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);\n    return format != null && (formats[this.statics.blotName] = format), formats;\n  }\n  formatAt(index, length, name, value) {\n    this.formats()[name] != null || this.scroll.query(name, Scope.ATTRIBUTE) ? this.isolate(index, length).format(name, value) : super.formatAt(index, length, name, value);\n  }\n  optimize(context) {\n    super.optimize(context);\n    const formats = this.formats();\n    if (Object.keys(formats).length === 0)\n      return this.unwrap();\n    const next = this.next;\n    next instanceof _InlineBlot && next.prev === this && isEqual(formats, next.formats()) && (next.moveChildren(this), next.remove());\n  }\n  replaceWith(name, value) {\n    const replacement = super.replaceWith(name, value);\n    return this.attributes.copy(replacement), replacement;\n  }\n  update(mutations, context) {\n    super.update(mutations, context), mutations.some(\n      (mutation) => mutation.target === this.domNode && mutation.type === \"attributes\"\n    ) && this.attributes.build();\n  }\n  wrap(name, value) {\n    const wrapper = super.wrap(name, value);\n    return wrapper instanceof _InlineBlot && this.attributes.move(wrapper), wrapper;\n  }\n};\n_InlineBlot.allowedChildren = [_InlineBlot, LeafBlot$1], _InlineBlot.blotName = \"inline\", _InlineBlot.scope = Scope.INLINE_BLOT, _InlineBlot.tagName = \"SPAN\";\nlet InlineBlot = _InlineBlot;\nconst InlineBlot$1 = InlineBlot, _BlockBlot = class _BlockBlot extends ParentBlot$1 {\n  static create(value) {\n    return super.create(value);\n  }\n  static formats(domNode, scroll) {\n    const match2 = scroll.query(_BlockBlot.blotName);\n    if (!(match2 != null && domNode.tagName === match2.tagName)) {\n      if (typeof this.tagName == \"string\")\n        return !0;\n      if (Array.isArray(this.tagName))\n        return domNode.tagName.toLowerCase();\n    }\n  }\n  constructor(scroll, domNode) {\n    super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);\n  }\n  format(name, value) {\n    const format = this.scroll.query(name, Scope.BLOCK);\n    format != null && (format instanceof Attributor ? this.attributes.attribute(format, value) : name === this.statics.blotName && !value ? this.replaceWith(_BlockBlot.blotName) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value));\n  }\n  formats() {\n    const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);\n    return format != null && (formats[this.statics.blotName] = format), formats;\n  }\n  formatAt(index, length, name, value) {\n    this.scroll.query(name, Scope.BLOCK) != null ? this.format(name, value) : super.formatAt(index, length, name, value);\n  }\n  insertAt(index, value, def) {\n    if (def == null || this.scroll.query(value, Scope.INLINE) != null)\n      super.insertAt(index, value, def);\n    else {\n      const after = this.split(index);\n      if (after != null) {\n        const blot = this.scroll.create(value, def);\n        after.parent.insertBefore(blot, after);\n      } else\n        throw new Error(\"Attempt to insertAt after block boundaries\");\n    }\n  }\n  replaceWith(name, value) {\n    const replacement = super.replaceWith(name, value);\n    return this.attributes.copy(replacement), replacement;\n  }\n  update(mutations, context) {\n    super.update(mutations, context), mutations.some(\n      (mutation) => mutation.target === this.domNode && mutation.type === \"attributes\"\n    ) && this.attributes.build();\n  }\n};\n_BlockBlot.blotName = \"block\", _BlockBlot.scope = Scope.BLOCK_BLOT, _BlockBlot.tagName = \"P\", _BlockBlot.allowedChildren = [\n  InlineBlot$1,\n  _BlockBlot,\n  LeafBlot$1\n];\nlet BlockBlot = _BlockBlot;\nconst BlockBlot$1 = BlockBlot, _ContainerBlot = class _ContainerBlot extends ParentBlot$1 {\n  checkMerge() {\n    return this.next !== null && this.next.statics.blotName === this.statics.blotName;\n  }\n  deleteAt(index, length) {\n    super.deleteAt(index, length), this.enforceAllowedChildren();\n  }\n  formatAt(index, length, name, value) {\n    super.formatAt(index, length, name, value), this.enforceAllowedChildren();\n  }\n  insertAt(index, value, def) {\n    super.insertAt(index, value, def), this.enforceAllowedChildren();\n  }\n  optimize(context) {\n    super.optimize(context), this.children.length > 0 && this.next != null && this.checkMerge() && (this.next.moveChildren(this), this.next.remove());\n  }\n};\n_ContainerBlot.blotName = \"container\", _ContainerBlot.scope = Scope.BLOCK_BLOT;\nlet ContainerBlot = _ContainerBlot;\nconst ContainerBlot$1 = ContainerBlot;\nclass EmbedBlot extends LeafBlot$1 {\n  static formats(_domNode, _scroll) {\n  }\n  format(name, value) {\n    super.formatAt(0, this.length(), name, value);\n  }\n  formatAt(index, length, name, value) {\n    index === 0 && length === this.length() ? this.format(name, value) : super.formatAt(index, length, name, value);\n  }\n  formats() {\n    return this.statics.formats(this.domNode, this.scroll);\n  }\n}\nconst EmbedBlot$1 = EmbedBlot, OBSERVER_CONFIG = {\n  attributes: !0,\n  characterData: !0,\n  characterDataOldValue: !0,\n  childList: !0,\n  subtree: !0\n}, MAX_OPTIMIZE_ITERATIONS = 100, _ScrollBlot = class _ScrollBlot extends ParentBlot$1 {\n  constructor(registry, node) {\n    super(null, node), this.registry = registry, this.scroll = this, this.build(), this.observer = new MutationObserver((mutations) => {\n      this.update(mutations);\n    }), this.observer.observe(this.domNode, OBSERVER_CONFIG), this.attach();\n  }\n  create(input, value) {\n    return this.registry.create(this, input, value);\n  }\n  find(node, bubble = !1) {\n    const blot = this.registry.find(node, bubble);\n    return blot ? blot.scroll === this ? blot : bubble ? this.find(blot.scroll.domNode.parentNode, !0) : null : null;\n  }\n  query(query, scope = Scope.ANY) {\n    return this.registry.query(query, scope);\n  }\n  register(...definitions) {\n    return this.registry.register(...definitions);\n  }\n  build() {\n    this.scroll != null && super.build();\n  }\n  detach() {\n    super.detach(), this.observer.disconnect();\n  }\n  deleteAt(index, length) {\n    this.update(), index === 0 && length === this.length() ? this.children.forEach((child) => {\n      child.remove();\n    }) : super.deleteAt(index, length);\n  }\n  formatAt(index, length, name, value) {\n    this.update(), super.formatAt(index, length, name, value);\n  }\n  insertAt(index, value, def) {\n    this.update(), super.insertAt(index, value, def);\n  }\n  optimize(mutations = [], context = {}) {\n    super.optimize(context);\n    const mutationsMap = context.mutationsMap || /* @__PURE__ */ new WeakMap();\n    let records = Array.from(this.observer.takeRecords());\n    for (; records.length > 0; )\n      mutations.push(records.pop());\n    const mark = (blot, markParent = !0) => {\n      blot == null || blot === this || blot.domNode.parentNode != null && (mutationsMap.has(blot.domNode) || mutationsMap.set(blot.domNode, []), markParent && mark(blot.parent));\n    }, optimize = (blot) => {\n      mutationsMap.has(blot.domNode) && (blot instanceof ParentBlot$1 && blot.children.forEach(optimize), mutationsMap.delete(blot.domNode), blot.optimize(context));\n    };\n    let remaining = mutations;\n    for (let i = 0; remaining.length > 0; i += 1) {\n      if (i >= MAX_OPTIMIZE_ITERATIONS)\n        throw new Error(\"[Parchment] Maximum optimize iterations reached\");\n      for (remaining.forEach((mutation) => {\n        const blot = this.find(mutation.target, !0);\n        blot != null && (blot.domNode === mutation.target && (mutation.type === \"childList\" ? (mark(this.find(mutation.previousSibling, !1)), Array.from(mutation.addedNodes).forEach((node) => {\n          const child = this.find(node, !1);\n          mark(child, !1), child instanceof ParentBlot$1 && child.children.forEach((grandChild) => {\n            mark(grandChild, !1);\n          });\n        })) : mutation.type === \"attributes\" && mark(blot.prev)), mark(blot));\n      }), this.children.forEach(optimize), remaining = Array.from(this.observer.takeRecords()), records = remaining.slice(); records.length > 0; )\n        mutations.push(records.pop());\n    }\n  }\n  update(mutations, context = {}) {\n    mutations = mutations || this.observer.takeRecords();\n    const mutationsMap = /* @__PURE__ */ new WeakMap();\n    mutations.map((mutation) => {\n      const blot = this.find(mutation.target, !0);\n      return blot == null ? null : mutationsMap.has(blot.domNode) ? (mutationsMap.get(blot.domNode).push(mutation), null) : (mutationsMap.set(blot.domNode, [mutation]), blot);\n    }).forEach((blot) => {\n      blot != null && blot !== this && mutationsMap.has(blot.domNode) && blot.update(mutationsMap.get(blot.domNode) || [], context);\n    }), context.mutationsMap = mutationsMap, mutationsMap.has(this.domNode) && super.update(mutationsMap.get(this.domNode), context), this.optimize(mutations, context);\n  }\n};\n_ScrollBlot.blotName = \"scroll\", _ScrollBlot.defaultChild = BlockBlot$1, _ScrollBlot.allowedChildren = [BlockBlot$1, ContainerBlot$1], _ScrollBlot.scope = Scope.BLOCK_BLOT, _ScrollBlot.tagName = \"DIV\";\nlet ScrollBlot = _ScrollBlot;\nconst ScrollBlot$1 = ScrollBlot, _TextBlot = class _TextBlot extends LeafBlot$1 {\n  static create(value) {\n    return document.createTextNode(value);\n  }\n  static value(domNode) {\n    return domNode.data;\n  }\n  constructor(scroll, node) {\n    super(scroll, node), this.text = this.statics.value(this.domNode);\n  }\n  deleteAt(index, length) {\n    this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);\n  }\n  index(node, offset) {\n    return this.domNode === node ? offset : -1;\n  }\n  insertAt(index, value, def) {\n    def == null ? (this.text = this.text.slice(0, index) + value + this.text.slice(index), this.domNode.data = this.text) : super.insertAt(index, value, def);\n  }\n  length() {\n    return this.text.length;\n  }\n  optimize(context) {\n    super.optimize(context), this.text = this.statics.value(this.domNode), this.text.length === 0 ? this.remove() : this.next instanceof _TextBlot && this.next.prev === this && (this.insertAt(this.length(), this.next.value()), this.next.remove());\n  }\n  position(index, _inclusive = !1) {\n    return [this.domNode, index];\n  }\n  split(index, force = !1) {\n    if (!force) {\n      if (index === 0)\n        return this;\n      if (index === this.length())\n        return this.next;\n    }\n    const after = this.scroll.create(this.domNode.splitText(index));\n    return this.parent.insertBefore(after, this.next || void 0), this.text = this.statics.value(this.domNode), after;\n  }\n  update(mutations, _context) {\n    mutations.some((mutation) => mutation.type === \"characterData\" && mutation.target === this.domNode) && (this.text = this.statics.value(this.domNode));\n  }\n  value() {\n    return this.text;\n  }\n};\n_TextBlot.blotName = \"text\", _TextBlot.scope = Scope.INLINE_BLOT;\nlet TextBlot = _TextBlot;\nconst TextBlot$1 = TextBlot;\nexport {\n  Attributor,\n  AttributorStore$1 as AttributorStore,\n  BlockBlot$1 as BlockBlot,\n  ClassAttributor$1 as ClassAttributor,\n  ContainerBlot$1 as ContainerBlot,\n  EmbedBlot$1 as EmbedBlot,\n  InlineBlot$1 as InlineBlot,\n  LeafBlot$1 as LeafBlot,\n  ParentBlot$1 as ParentBlot,\n  Registry,\n  Scope,\n  ScrollBlot$1 as ScrollBlot,\n  StyleAttributor$1 as StyleAttributor,\n  TextBlot$1 as TextBlot\n};\n//# sourceMappingURL=parchment.js.map\n"],"names":["Scope","exports","Scope2","TYPE","LEVEL","ATTRIBUTE","BLOT","INLINE","BLOCK","BLOCK_BLOT","INLINE_BLOT","BLOCK_ATTRIBUTE","INLINE_ATTRIBUTE","ANY","Attributor","_createClass","attrName","keyName","options","arguments","length","undefined","_classCallCheck","this","attributeBit","scope","whitelist","key","value","node","canAdd","setAttribute","_node","indexOf","replace","removeAttribute","getAttribute","Array","from","attributes","map","item","name","ParchmentError","_Error","message","_this","_callSuper","constructor","_inherits","_wrapNativeSuper","Error","_Registry","classes","tags","types","scroll","input","match2","query","concat","blotClass","Node","nodeType","TEXT_NODE","create","blot","blots","set","domNode","bubble","find","_this2","Text","text","block","inline","Element","split","some","tagName","_len","_this3","definitions","_key","definition","isBlot","isAttr","blotName","className","isArray","toUpperCase","forEach","tag","has","get","parentNode","_unused","WeakMap","Registry","match","prefix","filter","ClassAttributor","_Attributor","remove","classList","add","slice","join","ClassAttributor$1","camelize","parts","rest","part","StyleAttributor","_Attributor2","style","trim","StyleAttributor$1","AttributorStore$1","AttributorStore","build","attribute","_this4","keys","styles","attr","target","_this5","Object","format","_this6","copy","_this7","reduce","_ShadowBlot","prev","next","cloneNode","parent","removeChild","delete","index","isolate","wrap","statics","def","ref","insertBefore","root","children","offset","_context","requiredContainer","detach","replacement","_force","_mutations","wrapper","appendChild","rawValue","parseInt","toString","document","createElement","ShadowBlot","_LeafBlot","_ShadowBlot2","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","Math","min","_inclusive","childNodes","_defineProperty","_domNode","LeafBlot$1","LinkedList","head","tail","_len2","nodes","_key2","append","apply","_toConsumableArray","iterator","cur","refNode","contains","curNode","ret","inclusive","callback","_this$find2","_slicedToArray","startNode","curIndex","curLength","memo","push","makeAttachedBlot","found","_unused2","child","replaceChild","attach","_ParentBlot","_ShadowBlot3","_this8","uiNode","other","_get","_getPrototypeOf","prototype","call","uiClass","firstChild","_this9","reverse","err","forEachAt","childLength","deleteAt","criteria","_this$children$find2","descendant","Number","MAX_VALUE","descendants","lengthLeft","childIndex","_this10","done","allowedChildren","splitAfter","unwrap","formatAt","_this$children$find4","insertAt","childBlot","refBlot","refDomNode","nextSibling","targetParent","context","enforceAllowedChildren","defaultChild","_this$children$find6","position","path","moveChildren","force","after","clone","_length","mutations","_this11","addedNodes","removedNodes","mutation","type","body","sort","a","b","DOCUMENT_POSITION_FOLLOWING","ParentBlot$1","_InlineBlot","_ParentBlot$","_this12","_this13","formats","replaceWith","values","obj1","obj2","prop","isEqual","_this14","move","toLowerCase","InlineBlot$1","_BlockBlot","_ParentBlot$2","_this15","_this16","BlockBlot$1","_ContainerBlot","_ParentBlot$3","checkMerge","ContainerBlot$1","EmbedBlot","_LeafBlot$","_scroll","EmbedBlot$1","OBSERVER_CONFIG","characterData","characterDataOldValue","childList","subtree","_ScrollBlot","_ParentBlot$4","registry","_this17","_assertThisInitialized","observer","MutationObserver","update","observe","_this$registry","register","disconnect","_this18","mutationsMap","records","takeRecords","pop","mark","markParent","optimize","remaining","i","previousSibling","grandChild","_this19","ScrollBlot$1","_TextBlot","_LeafBlot$2","_this20","data","splitText","_this21","createTextNode","TextBlot$1"],"mappings":"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","x_google_ignoreList":[0]}
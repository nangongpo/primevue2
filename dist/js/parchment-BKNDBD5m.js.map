{"version":3,"file":"parchment-BKNDBD5m.js","sources":["../../node_modules/parchment/dist/parchment.js"],"sourcesContent":["var Scope = /* @__PURE__ */ ((Scope2) => (Scope2[Scope2.TYPE = 3] = \"TYPE\", Scope2[Scope2.LEVEL = 12] = \"LEVEL\", Scope2[Scope2.ATTRIBUTE = 13] = \"ATTRIBUTE\", Scope2[Scope2.BLOT = 14] = \"BLOT\", Scope2[Scope2.INLINE = 7] = \"INLINE\", Scope2[Scope2.BLOCK = 11] = \"BLOCK\", Scope2[Scope2.BLOCK_BLOT = 10] = \"BLOCK_BLOT\", Scope2[Scope2.INLINE_BLOT = 6] = \"INLINE_BLOT\", Scope2[Scope2.BLOCK_ATTRIBUTE = 9] = \"BLOCK_ATTRIBUTE\", Scope2[Scope2.INLINE_ATTRIBUTE = 5] = \"INLINE_ATTRIBUTE\", Scope2[Scope2.ANY = 15] = \"ANY\", Scope2))(Scope || {});\nclass Attributor {\n  constructor(attrName, keyName, options = {}) {\n    this.attrName = attrName, this.keyName = keyName;\n    const attributeBit = Scope.TYPE & Scope.ATTRIBUTE;\n    this.scope = options.scope != null ? (\n      // Ignore type bits, force attribute bit\n      options.scope & Scope.LEVEL | attributeBit\n    ) : Scope.ATTRIBUTE, options.whitelist != null && (this.whitelist = options.whitelist);\n  }\n  static keys(node) {\n    return Array.from(node.attributes).map((item) => item.name);\n  }\n  add(node, value) {\n    return this.canAdd(node, value) ? (node.setAttribute(this.keyName, value), !0) : !1;\n  }\n  canAdd(_node, value) {\n    return this.whitelist == null ? !0 : typeof value == \"string\" ? this.whitelist.indexOf(value.replace(/[\"']/g, \"\")) > -1 : this.whitelist.indexOf(value) > -1;\n  }\n  remove(node) {\n    node.removeAttribute(this.keyName);\n  }\n  value(node) {\n    const value = node.getAttribute(this.keyName);\n    return this.canAdd(node, value) && value ? value : \"\";\n  }\n}\nclass ParchmentError extends Error {\n  constructor(message) {\n    message = \"[Parchment] \" + message, super(message), this.message = message, this.name = this.constructor.name;\n  }\n}\nconst _Registry = class _Registry {\n  constructor() {\n    this.attributes = {}, this.classes = {}, this.tags = {}, this.types = {};\n  }\n  static find(node, bubble = !1) {\n    if (node == null)\n      return null;\n    if (this.blots.has(node))\n      return this.blots.get(node) || null;\n    if (bubble) {\n      let parentNode = null;\n      try {\n        parentNode = node.parentNode;\n      } catch {\n        return null;\n      }\n      return this.find(parentNode, bubble);\n    }\n    return null;\n  }\n  create(scroll, input, value) {\n    const match2 = this.query(input);\n    if (match2 == null)\n      throw new ParchmentError(`Unable to create ${input} blot`);\n    const blotClass = match2, node = (\n      // @ts-expect-error Fix me later\n      input instanceof Node || input.nodeType === Node.TEXT_NODE ? input : blotClass.create(value)\n    ), blot = new blotClass(scroll, node, value);\n    return _Registry.blots.set(blot.domNode, blot), blot;\n  }\n  find(node, bubble = !1) {\n    return _Registry.find(node, bubble);\n  }\n  query(query, scope = Scope.ANY) {\n    let match2;\n    return typeof query == \"string\" ? match2 = this.types[query] || this.attributes[query] : query instanceof Text || query.nodeType === Node.TEXT_NODE ? match2 = this.types.text : typeof query == \"number\" ? query & Scope.LEVEL & Scope.BLOCK ? match2 = this.types.block : query & Scope.LEVEL & Scope.INLINE && (match2 = this.types.inline) : query instanceof Element && ((query.getAttribute(\"class\") || \"\").split(/\\s+/).some((name) => (match2 = this.classes[name], !!match2)), match2 = match2 || this.tags[query.tagName]), match2 == null ? null : \"scope\" in match2 && scope & Scope.LEVEL & match2.scope && scope & Scope.TYPE & match2.scope ? match2 : null;\n  }\n  register(...definitions) {\n    return definitions.map((definition) => {\n      const isBlot = \"blotName\" in definition, isAttr = \"attrName\" in definition;\n      if (!isBlot && !isAttr)\n        throw new ParchmentError(\"Invalid definition\");\n      if (isBlot && definition.blotName === \"abstract\")\n        throw new ParchmentError(\"Cannot register abstract class\");\n      const key = isBlot ? definition.blotName : isAttr ? definition.attrName : void 0;\n      return this.types[key] = definition, isAttr ? typeof definition.keyName == \"string\" && (this.attributes[definition.keyName] = definition) : isBlot && (definition.className && (this.classes[definition.className] = definition), definition.tagName && (Array.isArray(definition.tagName) ? definition.tagName = definition.tagName.map((tagName) => tagName.toUpperCase()) : definition.tagName = definition.tagName.toUpperCase(), (Array.isArray(definition.tagName) ? definition.tagName : [definition.tagName]).forEach((tag) => {\n        (this.tags[tag] == null || definition.className == null) && (this.tags[tag] = definition);\n      }))), definition;\n    });\n  }\n};\n_Registry.blots = /* @__PURE__ */ new WeakMap();\nlet Registry = _Registry;\nfunction match(node, prefix) {\n  return (node.getAttribute(\"class\") || \"\").split(/\\s+/).filter((name) => name.indexOf(`${prefix}-`) === 0);\n}\nclass ClassAttributor extends Attributor {\n  static keys(node) {\n    return (node.getAttribute(\"class\") || \"\").split(/\\s+/).map((name) => name.split(\"-\").slice(0, -1).join(\"-\"));\n  }\n  add(node, value) {\n    return this.canAdd(node, value) ? (this.remove(node), node.classList.add(`${this.keyName}-${value}`), !0) : !1;\n  }\n  remove(node) {\n    match(node, this.keyName).forEach((name) => {\n      node.classList.remove(name);\n    }), node.classList.length === 0 && node.removeAttribute(\"class\");\n  }\n  value(node) {\n    const value = (match(node, this.keyName)[0] || \"\").slice(this.keyName.length + 1);\n    return this.canAdd(node, value) ? value : \"\";\n  }\n}\nconst ClassAttributor$1 = ClassAttributor;\nfunction camelize(name) {\n  const parts = name.split(\"-\"), rest = parts.slice(1).map((part) => part[0].toUpperCase() + part.slice(1)).join(\"\");\n  return parts[0] + rest;\n}\nclass StyleAttributor extends Attributor {\n  static keys(node) {\n    return (node.getAttribute(\"style\") || \"\").split(\";\").map((value) => value.split(\":\")[0].trim());\n  }\n  add(node, value) {\n    return this.canAdd(node, value) ? (node.style[camelize(this.keyName)] = value, !0) : !1;\n  }\n  remove(node) {\n    node.style[camelize(this.keyName)] = \"\", node.getAttribute(\"style\") || node.removeAttribute(\"style\");\n  }\n  value(node) {\n    const value = node.style[camelize(this.keyName)];\n    return this.canAdd(node, value) ? value : \"\";\n  }\n}\nconst StyleAttributor$1 = StyleAttributor;\nclass AttributorStore {\n  constructor(domNode) {\n    this.attributes = {}, this.domNode = domNode, this.build();\n  }\n  attribute(attribute, value) {\n    value ? attribute.add(this.domNode, value) && (attribute.value(this.domNode) != null ? this.attributes[attribute.attrName] = attribute : delete this.attributes[attribute.attrName]) : (attribute.remove(this.domNode), delete this.attributes[attribute.attrName]);\n  }\n  build() {\n    this.attributes = {};\n    const blot = Registry.find(this.domNode);\n    if (blot == null)\n      return;\n    const attributes = Attributor.keys(this.domNode), classes = ClassAttributor$1.keys(this.domNode), styles = StyleAttributor$1.keys(this.domNode);\n    attributes.concat(classes).concat(styles).forEach((name) => {\n      const attr = blot.scroll.query(name, Scope.ATTRIBUTE);\n      attr instanceof Attributor && (this.attributes[attr.attrName] = attr);\n    });\n  }\n  copy(target) {\n    Object.keys(this.attributes).forEach((key) => {\n      const value = this.attributes[key].value(this.domNode);\n      target.format(key, value);\n    });\n  }\n  move(target) {\n    this.copy(target), Object.keys(this.attributes).forEach((key) => {\n      this.attributes[key].remove(this.domNode);\n    }), this.attributes = {};\n  }\n  values() {\n    return Object.keys(this.attributes).reduce(\n      (attributes, name) => (attributes[name] = this.attributes[name].value(this.domNode), attributes),\n      {}\n    );\n  }\n}\nconst AttributorStore$1 = AttributorStore, _ShadowBlot = class _ShadowBlot {\n  constructor(scroll, domNode) {\n    this.scroll = scroll, this.domNode = domNode, Registry.blots.set(domNode, this), this.prev = null, this.next = null;\n  }\n  static create(rawValue) {\n    if (this.tagName == null)\n      throw new ParchmentError(\"Blot definition missing tagName\");\n    let node, value;\n    return Array.isArray(this.tagName) ? (typeof rawValue == \"string\" ? (value = rawValue.toUpperCase(), parseInt(value, 10).toString() === value && (value = parseInt(value, 10))) : typeof rawValue == \"number\" && (value = rawValue), typeof value == \"number\" ? node = document.createElement(this.tagName[value - 1]) : value && this.tagName.indexOf(value) > -1 ? node = document.createElement(value) : node = document.createElement(this.tagName[0])) : node = document.createElement(this.tagName), this.className && node.classList.add(this.className), node;\n  }\n  // Hack for accessing inherited static methods\n  get statics() {\n    return this.constructor;\n  }\n  attach() {\n  }\n  clone() {\n    const domNode = this.domNode.cloneNode(!1);\n    return this.scroll.create(domNode);\n  }\n  detach() {\n    this.parent != null && this.parent.removeChild(this), Registry.blots.delete(this.domNode);\n  }\n  deleteAt(index, length) {\n    this.isolate(index, length).remove();\n  }\n  formatAt(index, length, name, value) {\n    const blot = this.isolate(index, length);\n    if (this.scroll.query(name, Scope.BLOT) != null && value)\n      blot.wrap(name, value);\n    else if (this.scroll.query(name, Scope.ATTRIBUTE) != null) {\n      const parent = this.scroll.create(this.statics.scope);\n      blot.wrap(parent), parent.format(name, value);\n    }\n  }\n  insertAt(index, value, def) {\n    const blot = def == null ? this.scroll.create(\"text\", value) : this.scroll.create(value, def), ref = this.split(index);\n    this.parent.insertBefore(blot, ref || void 0);\n  }\n  isolate(index, length) {\n    const target = this.split(index);\n    if (target == null)\n      throw new Error(\"Attempt to isolate at end\");\n    return target.split(length), target;\n  }\n  length() {\n    return 1;\n  }\n  offset(root = this.parent) {\n    return this.parent == null || this === root ? 0 : this.parent.children.offset(this) + this.parent.offset(root);\n  }\n  optimize(_context) {\n    this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer) && this.wrap(this.statics.requiredContainer.blotName);\n  }\n  remove() {\n    this.domNode.parentNode != null && this.domNode.parentNode.removeChild(this.domNode), this.detach();\n  }\n  replaceWith(name, value) {\n    const replacement = typeof name == \"string\" ? this.scroll.create(name, value) : name;\n    return this.parent != null && (this.parent.insertBefore(replacement, this.next || void 0), this.remove()), replacement;\n  }\n  split(index, _force) {\n    return index === 0 ? this : this.next;\n  }\n  update(_mutations, _context) {\n  }\n  wrap(name, value) {\n    const wrapper = typeof name == \"string\" ? this.scroll.create(name, value) : name;\n    if (this.parent != null && this.parent.insertBefore(wrapper, this.next || void 0), typeof wrapper.appendChild != \"function\")\n      throw new ParchmentError(`Cannot wrap ${name}`);\n    return wrapper.appendChild(this), wrapper;\n  }\n};\n_ShadowBlot.blotName = \"abstract\";\nlet ShadowBlot = _ShadowBlot;\nconst _LeafBlot = class _LeafBlot extends ShadowBlot {\n  /**\n   * Returns the value represented by domNode if it is this Blot's type\n   * No checking that domNode can represent this Blot type is required so\n   * applications needing it should check externally before calling.\n   */\n  static value(_domNode) {\n    return !0;\n  }\n  /**\n   * Given location represented by node and offset from DOM Selection Range,\n   * return index to that location.\n   */\n  index(node, offset) {\n    return this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY ? Math.min(offset, 1) : -1;\n  }\n  /**\n   * Given index to location within blot, return node and offset representing\n   * that location, consumable by DOM Selection Range\n   */\n  position(index, _inclusive) {\n    let offset = Array.from(this.parent.domNode.childNodes).indexOf(this.domNode);\n    return index > 0 && (offset += 1), [this.parent.domNode, offset];\n  }\n  /**\n   * Return value represented by this blot\n   * Should not change without interaction from API or\n   * user change detectable by update()\n   */\n  value() {\n    return {\n      [this.statics.blotName]: this.statics.value(this.domNode) || !0\n    };\n  }\n};\n_LeafBlot.scope = Scope.INLINE_BLOT;\nlet LeafBlot = _LeafBlot;\nconst LeafBlot$1 = LeafBlot;\nclass LinkedList {\n  constructor() {\n    this.head = null, this.tail = null, this.length = 0;\n  }\n  append(...nodes) {\n    if (this.insertBefore(nodes[0], null), nodes.length > 1) {\n      const rest = nodes.slice(1);\n      this.append(...rest);\n    }\n  }\n  at(index) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur && index > 0; )\n      index -= 1, cur = next();\n    return cur;\n  }\n  contains(node) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; ) {\n      if (cur === node)\n        return !0;\n      cur = next();\n    }\n    return !1;\n  }\n  indexOf(node) {\n    const next = this.iterator();\n    let cur = next(), index = 0;\n    for (; cur; ) {\n      if (cur === node)\n        return index;\n      index += 1, cur = next();\n    }\n    return -1;\n  }\n  insertBefore(node, refNode) {\n    node != null && (this.remove(node), node.next = refNode, refNode != null ? (node.prev = refNode.prev, refNode.prev != null && (refNode.prev.next = node), refNode.prev = node, refNode === this.head && (this.head = node)) : this.tail != null ? (this.tail.next = node, node.prev = this.tail, this.tail = node) : (node.prev = null, this.head = this.tail = node), this.length += 1);\n  }\n  offset(target) {\n    let index = 0, cur = this.head;\n    for (; cur != null; ) {\n      if (cur === target)\n        return index;\n      index += cur.length(), cur = cur.next;\n    }\n    return -1;\n  }\n  remove(node) {\n    this.contains(node) && (node.prev != null && (node.prev.next = node.next), node.next != null && (node.next.prev = node.prev), node === this.head && (this.head = node.next), node === this.tail && (this.tail = node.prev), this.length -= 1);\n  }\n  iterator(curNode = this.head) {\n    return () => {\n      const ret = curNode;\n      return curNode != null && (curNode = curNode.next), ret;\n    };\n  }\n  find(index, inclusive = !1) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; ) {\n      const length = cur.length();\n      if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0))\n        return [cur, index];\n      index -= length, cur = next();\n    }\n    return [null, 0];\n  }\n  forEach(callback) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; )\n      callback(cur), cur = next();\n  }\n  forEachAt(index, length, callback) {\n    if (length <= 0)\n      return;\n    const [startNode, offset] = this.find(index);\n    let curIndex = index - offset;\n    const next = this.iterator(startNode);\n    let cur = next();\n    for (; cur && curIndex < index + length; ) {\n      const curLength = cur.length();\n      index > curIndex ? callback(\n        cur,\n        index - curIndex,\n        Math.min(length, curIndex + curLength - index)\n      ) : callback(cur, 0, Math.min(curLength, index + length - curIndex)), curIndex += curLength, cur = next();\n    }\n  }\n  map(callback) {\n    return this.reduce((memo, cur) => (memo.push(callback(cur)), memo), []);\n  }\n  reduce(callback, memo) {\n    const next = this.iterator();\n    let cur = next();\n    for (; cur; )\n      memo = callback(memo, cur), cur = next();\n    return memo;\n  }\n}\nfunction makeAttachedBlot(node, scroll) {\n  const found = scroll.find(node);\n  if (found)\n    return found;\n  try {\n    return scroll.create(node);\n  } catch {\n    const blot = scroll.create(Scope.INLINE);\n    return Array.from(node.childNodes).forEach((child) => {\n      blot.domNode.appendChild(child);\n    }), node.parentNode && node.parentNode.replaceChild(blot.domNode, node), blot.attach(), blot;\n  }\n}\nconst _ParentBlot = class _ParentBlot extends ShadowBlot {\n  constructor(scroll, domNode) {\n    super(scroll, domNode), this.uiNode = null, this.build();\n  }\n  appendChild(other) {\n    this.insertBefore(other);\n  }\n  attach() {\n    super.attach(), this.children.forEach((child) => {\n      child.attach();\n    });\n  }\n  attachUI(node) {\n    this.uiNode != null && this.uiNode.remove(), this.uiNode = node, _ParentBlot.uiClass && this.uiNode.classList.add(_ParentBlot.uiClass), this.uiNode.setAttribute(\"contenteditable\", \"false\"), this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n  }\n  /**\n   * Called during construction, should fill its own children LinkedList.\n   */\n  build() {\n    this.children = new LinkedList(), Array.from(this.domNode.childNodes).filter((node) => node !== this.uiNode).reverse().forEach((node) => {\n      try {\n        const child = makeAttachedBlot(node, this.scroll);\n        this.insertBefore(child, this.children.head || void 0);\n      } catch (err) {\n        if (err instanceof ParchmentError)\n          return;\n        throw err;\n      }\n    });\n  }\n  deleteAt(index, length) {\n    if (index === 0 && length === this.length())\n      return this.remove();\n    this.children.forEachAt(index, length, (child, offset, childLength) => {\n      child.deleteAt(offset, childLength);\n    });\n  }\n  descendant(criteria, index = 0) {\n    const [child, offset] = this.children.find(index);\n    return criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria ? [child, offset] : child instanceof _ParentBlot ? child.descendant(criteria, offset) : [null, -1];\n  }\n  descendants(criteria, index = 0, length = Number.MAX_VALUE) {\n    let descendants = [], lengthLeft = length;\n    return this.children.forEachAt(\n      index,\n      length,\n      (child, childIndex, childLength) => {\n        (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) && descendants.push(child), child instanceof _ParentBlot && (descendants = descendants.concat(\n          child.descendants(criteria, childIndex, lengthLeft)\n        )), lengthLeft -= childLength;\n      }\n    ), descendants;\n  }\n  detach() {\n    this.children.forEach((child) => {\n      child.detach();\n    }), super.detach();\n  }\n  enforceAllowedChildren() {\n    let done = !1;\n    this.children.forEach((child) => {\n      done || this.statics.allowedChildren.some(\n        (def) => child instanceof def\n      ) || (child.statics.scope === Scope.BLOCK_BLOT ? (child.next != null && this.splitAfter(child), child.prev != null && this.splitAfter(child.prev), child.parent.unwrap(), done = !0) : child instanceof _ParentBlot ? child.unwrap() : child.remove());\n    });\n  }\n  formatAt(index, length, name, value) {\n    this.children.forEachAt(index, length, (child, offset, childLength) => {\n      child.formatAt(offset, childLength, name, value);\n    });\n  }\n  insertAt(index, value, def) {\n    const [child, offset] = this.children.find(index);\n    if (child)\n      child.insertAt(offset, value, def);\n    else {\n      const blot = def == null ? this.scroll.create(\"text\", value) : this.scroll.create(value, def);\n      this.appendChild(blot);\n    }\n  }\n  insertBefore(childBlot, refBlot) {\n    childBlot.parent != null && childBlot.parent.children.remove(childBlot);\n    let refDomNode = null;\n    this.children.insertBefore(childBlot, refBlot || null), childBlot.parent = this, refBlot != null && (refDomNode = refBlot.domNode), (this.domNode.parentNode !== childBlot.domNode || this.domNode.nextSibling !== refDomNode) && this.domNode.insertBefore(childBlot.domNode, refDomNode), childBlot.attach();\n  }\n  length() {\n    return this.children.reduce((memo, child) => memo + child.length(), 0);\n  }\n  moveChildren(targetParent, refNode) {\n    this.children.forEach((child) => {\n      targetParent.insertBefore(child, refNode);\n    });\n  }\n  optimize(context) {\n    if (super.optimize(context), this.enforceAllowedChildren(), this.uiNode != null && this.uiNode !== this.domNode.firstChild && this.domNode.insertBefore(this.uiNode, this.domNode.firstChild), this.children.length === 0)\n      if (this.statics.defaultChild != null) {\n        const child = this.scroll.create(this.statics.defaultChild.blotName);\n        this.appendChild(child);\n      } else\n        this.remove();\n  }\n  path(index, inclusive = !1) {\n    const [child, offset] = this.children.find(index, inclusive), position = [[this, index]];\n    return child instanceof _ParentBlot ? position.concat(child.path(offset, inclusive)) : (child != null && position.push([child, offset]), position);\n  }\n  removeChild(child) {\n    this.children.remove(child);\n  }\n  replaceWith(name, value) {\n    const replacement = typeof name == \"string\" ? this.scroll.create(name, value) : name;\n    return replacement instanceof _ParentBlot && this.moveChildren(replacement), super.replaceWith(replacement);\n  }\n  split(index, force = !1) {\n    if (!force) {\n      if (index === 0)\n        return this;\n      if (index === this.length())\n        return this.next;\n    }\n    const after = this.clone();\n    return this.parent && this.parent.insertBefore(after, this.next || void 0), this.children.forEachAt(index, this.length(), (child, offset, _length) => {\n      const split = child.split(offset, force);\n      split != null && after.appendChild(split);\n    }), after;\n  }\n  splitAfter(child) {\n    const after = this.clone();\n    for (; child.next != null; )\n      after.appendChild(child.next);\n    return this.parent && this.parent.insertBefore(after, this.next || void 0), after;\n  }\n  unwrap() {\n    this.parent && this.moveChildren(this.parent, this.next || void 0), this.remove();\n  }\n  update(mutations, _context) {\n    const addedNodes = [], removedNodes = [];\n    mutations.forEach((mutation) => {\n      mutation.target === this.domNode && mutation.type === \"childList\" && (addedNodes.push(...mutation.addedNodes), removedNodes.push(...mutation.removedNodes));\n    }), removedNodes.forEach((node) => {\n      if (node.parentNode != null && // @ts-expect-error Fix me later\n      node.tagName !== \"IFRAME\" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY)\n        return;\n      const blot = this.scroll.find(node);\n      blot != null && (blot.domNode.parentNode == null || blot.domNode.parentNode === this.domNode) && blot.detach();\n    }), addedNodes.filter((node) => node.parentNode === this.domNode && node !== this.uiNode).sort((a, b) => a === b ? 0 : a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING ? 1 : -1).forEach((node) => {\n      let refBlot = null;\n      node.nextSibling != null && (refBlot = this.scroll.find(node.nextSibling));\n      const blot = makeAttachedBlot(node, this.scroll);\n      (blot.next !== refBlot || blot.next == null) && (blot.parent != null && blot.parent.removeChild(this), this.insertBefore(blot, refBlot || void 0));\n    }), this.enforceAllowedChildren();\n  }\n};\n_ParentBlot.uiClass = \"\";\nlet ParentBlot = _ParentBlot;\nconst ParentBlot$1 = ParentBlot;\nfunction isEqual(obj1, obj2) {\n  if (Object.keys(obj1).length !== Object.keys(obj2).length)\n    return !1;\n  for (const prop in obj1)\n    if (obj1[prop] !== obj2[prop])\n      return !1;\n  return !0;\n}\nconst _InlineBlot = class _InlineBlot extends ParentBlot$1 {\n  static create(value) {\n    return super.create(value);\n  }\n  static formats(domNode, scroll) {\n    const match2 = scroll.query(_InlineBlot.blotName);\n    if (!(match2 != null && domNode.tagName === match2.tagName)) {\n      if (typeof this.tagName == \"string\")\n        return !0;\n      if (Array.isArray(this.tagName))\n        return domNode.tagName.toLowerCase();\n    }\n  }\n  constructor(scroll, domNode) {\n    super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);\n  }\n  format(name, value) {\n    if (name === this.statics.blotName && !value)\n      this.children.forEach((child) => {\n        child instanceof _InlineBlot || (child = child.wrap(_InlineBlot.blotName, !0)), this.attributes.copy(child);\n      }), this.unwrap();\n    else {\n      const format = this.scroll.query(name, Scope.INLINE);\n      if (format == null)\n        return;\n      format instanceof Attributor ? this.attributes.attribute(format, value) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value);\n    }\n  }\n  formats() {\n    const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);\n    return format != null && (formats[this.statics.blotName] = format), formats;\n  }\n  formatAt(index, length, name, value) {\n    this.formats()[name] != null || this.scroll.query(name, Scope.ATTRIBUTE) ? this.isolate(index, length).format(name, value) : super.formatAt(index, length, name, value);\n  }\n  optimize(context) {\n    super.optimize(context);\n    const formats = this.formats();\n    if (Object.keys(formats).length === 0)\n      return this.unwrap();\n    const next = this.next;\n    next instanceof _InlineBlot && next.prev === this && isEqual(formats, next.formats()) && (next.moveChildren(this), next.remove());\n  }\n  replaceWith(name, value) {\n    const replacement = super.replaceWith(name, value);\n    return this.attributes.copy(replacement), replacement;\n  }\n  update(mutations, context) {\n    super.update(mutations, context), mutations.some(\n      (mutation) => mutation.target === this.domNode && mutation.type === \"attributes\"\n    ) && this.attributes.build();\n  }\n  wrap(name, value) {\n    const wrapper = super.wrap(name, value);\n    return wrapper instanceof _InlineBlot && this.attributes.move(wrapper), wrapper;\n  }\n};\n_InlineBlot.allowedChildren = [_InlineBlot, LeafBlot$1], _InlineBlot.blotName = \"inline\", _InlineBlot.scope = Scope.INLINE_BLOT, _InlineBlot.tagName = \"SPAN\";\nlet InlineBlot = _InlineBlot;\nconst InlineBlot$1 = InlineBlot, _BlockBlot = class _BlockBlot extends ParentBlot$1 {\n  static create(value) {\n    return super.create(value);\n  }\n  static formats(domNode, scroll) {\n    const match2 = scroll.query(_BlockBlot.blotName);\n    if (!(match2 != null && domNode.tagName === match2.tagName)) {\n      if (typeof this.tagName == \"string\")\n        return !0;\n      if (Array.isArray(this.tagName))\n        return domNode.tagName.toLowerCase();\n    }\n  }\n  constructor(scroll, domNode) {\n    super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);\n  }\n  format(name, value) {\n    const format = this.scroll.query(name, Scope.BLOCK);\n    format != null && (format instanceof Attributor ? this.attributes.attribute(format, value) : name === this.statics.blotName && !value ? this.replaceWith(_BlockBlot.blotName) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value));\n  }\n  formats() {\n    const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);\n    return format != null && (formats[this.statics.blotName] = format), formats;\n  }\n  formatAt(index, length, name, value) {\n    this.scroll.query(name, Scope.BLOCK) != null ? this.format(name, value) : super.formatAt(index, length, name, value);\n  }\n  insertAt(index, value, def) {\n    if (def == null || this.scroll.query(value, Scope.INLINE) != null)\n      super.insertAt(index, value, def);\n    else {\n      const after = this.split(index);\n      if (after != null) {\n        const blot = this.scroll.create(value, def);\n        after.parent.insertBefore(blot, after);\n      } else\n        throw new Error(\"Attempt to insertAt after block boundaries\");\n    }\n  }\n  replaceWith(name, value) {\n    const replacement = super.replaceWith(name, value);\n    return this.attributes.copy(replacement), replacement;\n  }\n  update(mutations, context) {\n    super.update(mutations, context), mutations.some(\n      (mutation) => mutation.target === this.domNode && mutation.type === \"attributes\"\n    ) && this.attributes.build();\n  }\n};\n_BlockBlot.blotName = \"block\", _BlockBlot.scope = Scope.BLOCK_BLOT, _BlockBlot.tagName = \"P\", _BlockBlot.allowedChildren = [\n  InlineBlot$1,\n  _BlockBlot,\n  LeafBlot$1\n];\nlet BlockBlot = _BlockBlot;\nconst BlockBlot$1 = BlockBlot, _ContainerBlot = class _ContainerBlot extends ParentBlot$1 {\n  checkMerge() {\n    return this.next !== null && this.next.statics.blotName === this.statics.blotName;\n  }\n  deleteAt(index, length) {\n    super.deleteAt(index, length), this.enforceAllowedChildren();\n  }\n  formatAt(index, length, name, value) {\n    super.formatAt(index, length, name, value), this.enforceAllowedChildren();\n  }\n  insertAt(index, value, def) {\n    super.insertAt(index, value, def), this.enforceAllowedChildren();\n  }\n  optimize(context) {\n    super.optimize(context), this.children.length > 0 && this.next != null && this.checkMerge() && (this.next.moveChildren(this), this.next.remove());\n  }\n};\n_ContainerBlot.blotName = \"container\", _ContainerBlot.scope = Scope.BLOCK_BLOT;\nlet ContainerBlot = _ContainerBlot;\nconst ContainerBlot$1 = ContainerBlot;\nclass EmbedBlot extends LeafBlot$1 {\n  static formats(_domNode, _scroll) {\n  }\n  format(name, value) {\n    super.formatAt(0, this.length(), name, value);\n  }\n  formatAt(index, length, name, value) {\n    index === 0 && length === this.length() ? this.format(name, value) : super.formatAt(index, length, name, value);\n  }\n  formats() {\n    return this.statics.formats(this.domNode, this.scroll);\n  }\n}\nconst EmbedBlot$1 = EmbedBlot, OBSERVER_CONFIG = {\n  attributes: !0,\n  characterData: !0,\n  characterDataOldValue: !0,\n  childList: !0,\n  subtree: !0\n}, MAX_OPTIMIZE_ITERATIONS = 100, _ScrollBlot = class _ScrollBlot extends ParentBlot$1 {\n  constructor(registry, node) {\n    super(null, node), this.registry = registry, this.scroll = this, this.build(), this.observer = new MutationObserver((mutations) => {\n      this.update(mutations);\n    }), this.observer.observe(this.domNode, OBSERVER_CONFIG), this.attach();\n  }\n  create(input, value) {\n    return this.registry.create(this, input, value);\n  }\n  find(node, bubble = !1) {\n    const blot = this.registry.find(node, bubble);\n    return blot ? blot.scroll === this ? blot : bubble ? this.find(blot.scroll.domNode.parentNode, !0) : null : null;\n  }\n  query(query, scope = Scope.ANY) {\n    return this.registry.query(query, scope);\n  }\n  register(...definitions) {\n    return this.registry.register(...definitions);\n  }\n  build() {\n    this.scroll != null && super.build();\n  }\n  detach() {\n    super.detach(), this.observer.disconnect();\n  }\n  deleteAt(index, length) {\n    this.update(), index === 0 && length === this.length() ? this.children.forEach((child) => {\n      child.remove();\n    }) : super.deleteAt(index, length);\n  }\n  formatAt(index, length, name, value) {\n    this.update(), super.formatAt(index, length, name, value);\n  }\n  insertAt(index, value, def) {\n    this.update(), super.insertAt(index, value, def);\n  }\n  optimize(mutations = [], context = {}) {\n    super.optimize(context);\n    const mutationsMap = context.mutationsMap || /* @__PURE__ */ new WeakMap();\n    let records = Array.from(this.observer.takeRecords());\n    for (; records.length > 0; )\n      mutations.push(records.pop());\n    const mark = (blot, markParent = !0) => {\n      blot == null || blot === this || blot.domNode.parentNode != null && (mutationsMap.has(blot.domNode) || mutationsMap.set(blot.domNode, []), markParent && mark(blot.parent));\n    }, optimize = (blot) => {\n      mutationsMap.has(blot.domNode) && (blot instanceof ParentBlot$1 && blot.children.forEach(optimize), mutationsMap.delete(blot.domNode), blot.optimize(context));\n    };\n    let remaining = mutations;\n    for (let i = 0; remaining.length > 0; i += 1) {\n      if (i >= MAX_OPTIMIZE_ITERATIONS)\n        throw new Error(\"[Parchment] Maximum optimize iterations reached\");\n      for (remaining.forEach((mutation) => {\n        const blot = this.find(mutation.target, !0);\n        blot != null && (blot.domNode === mutation.target && (mutation.type === \"childList\" ? (mark(this.find(mutation.previousSibling, !1)), Array.from(mutation.addedNodes).forEach((node) => {\n          const child = this.find(node, !1);\n          mark(child, !1), child instanceof ParentBlot$1 && child.children.forEach((grandChild) => {\n            mark(grandChild, !1);\n          });\n        })) : mutation.type === \"attributes\" && mark(blot.prev)), mark(blot));\n      }), this.children.forEach(optimize), remaining = Array.from(this.observer.takeRecords()), records = remaining.slice(); records.length > 0; )\n        mutations.push(records.pop());\n    }\n  }\n  update(mutations, context = {}) {\n    mutations = mutations || this.observer.takeRecords();\n    const mutationsMap = /* @__PURE__ */ new WeakMap();\n    mutations.map((mutation) => {\n      const blot = this.find(mutation.target, !0);\n      return blot == null ? null : mutationsMap.has(blot.domNode) ? (mutationsMap.get(blot.domNode).push(mutation), null) : (mutationsMap.set(blot.domNode, [mutation]), blot);\n    }).forEach((blot) => {\n      blot != null && blot !== this && mutationsMap.has(blot.domNode) && blot.update(mutationsMap.get(blot.domNode) || [], context);\n    }), context.mutationsMap = mutationsMap, mutationsMap.has(this.domNode) && super.update(mutationsMap.get(this.domNode), context), this.optimize(mutations, context);\n  }\n};\n_ScrollBlot.blotName = \"scroll\", _ScrollBlot.defaultChild = BlockBlot$1, _ScrollBlot.allowedChildren = [BlockBlot$1, ContainerBlot$1], _ScrollBlot.scope = Scope.BLOCK_BLOT, _ScrollBlot.tagName = \"DIV\";\nlet ScrollBlot = _ScrollBlot;\nconst ScrollBlot$1 = ScrollBlot, _TextBlot = class _TextBlot extends LeafBlot$1 {\n  static create(value) {\n    return document.createTextNode(value);\n  }\n  static value(domNode) {\n    return domNode.data;\n  }\n  constructor(scroll, node) {\n    super(scroll, node), this.text = this.statics.value(this.domNode);\n  }\n  deleteAt(index, length) {\n    this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);\n  }\n  index(node, offset) {\n    return this.domNode === node ? offset : -1;\n  }\n  insertAt(index, value, def) {\n    def == null ? (this.text = this.text.slice(0, index) + value + this.text.slice(index), this.domNode.data = this.text) : super.insertAt(index, value, def);\n  }\n  length() {\n    return this.text.length;\n  }\n  optimize(context) {\n    super.optimize(context), this.text = this.statics.value(this.domNode), this.text.length === 0 ? this.remove() : this.next instanceof _TextBlot && this.next.prev === this && (this.insertAt(this.length(), this.next.value()), this.next.remove());\n  }\n  position(index, _inclusive = !1) {\n    return [this.domNode, index];\n  }\n  split(index, force = !1) {\n    if (!force) {\n      if (index === 0)\n        return this;\n      if (index === this.length())\n        return this.next;\n    }\n    const after = this.scroll.create(this.domNode.splitText(index));\n    return this.parent.insertBefore(after, this.next || void 0), this.text = this.statics.value(this.domNode), after;\n  }\n  update(mutations, _context) {\n    mutations.some((mutation) => mutation.type === \"characterData\" && mutation.target === this.domNode) && (this.text = this.statics.value(this.domNode));\n  }\n  value() {\n    return this.text;\n  }\n};\n_TextBlot.blotName = \"text\", _TextBlot.scope = Scope.INLINE_BLOT;\nlet TextBlot = _TextBlot;\nconst TextBlot$1 = TextBlot;\nexport {\n  Attributor,\n  AttributorStore$1 as AttributorStore,\n  BlockBlot$1 as BlockBlot,\n  ClassAttributor$1 as ClassAttributor,\n  ContainerBlot$1 as ContainerBlot,\n  EmbedBlot$1 as EmbedBlot,\n  InlineBlot$1 as InlineBlot,\n  LeafBlot$1 as LeafBlot,\n  ParentBlot$1 as ParentBlot,\n  Registry,\n  Scope,\n  ScrollBlot$1 as ScrollBlot,\n  StyleAttributor$1 as StyleAttributor,\n  TextBlot$1 as TextBlot\n};\n//# sourceMappingURL=parchment.js.map\n"],"names":["Scope","Scope2","Attributor","attrName","keyName","options","attributeBit","node","item","value","_node","ParchmentError","message","_Registry","bubble","parentNode","e","scroll","input","match2","blotClass","blot","query","scope","name","definitions","definition","isBlot","isAttr","key","tagName","tag","Registry","match","prefix","ClassAttributor","ClassAttributor$1","camelize","parts","rest","part","StyleAttributor","StyleAttributor$1","AttributorStore","domNode","attribute","attributes","classes","styles","attr","target","AttributorStore$1","_ShadowBlot","rawValue","index","length","parent","def","ref","root","_context","replacement","_force","_mutations","wrapper","ShadowBlot","_LeafBlot","_domNode","offset","_inclusive","LeafBlot","LeafBlot$1","LinkedList","nodes","next","cur","refNode","curNode","ret","inclusive","callback","startNode","curIndex","curLength","memo","makeAttachedBlot","found","child","_ParentBlot","other","err","childLength","criteria","descendants","lengthLeft","childIndex","done","childBlot","refBlot","refDomNode","targetParent","context","position","force","after","_length","split","mutations","addedNodes","removedNodes","mutation","a","b","ParentBlot","ParentBlot$1","isEqual","obj1","obj2","prop","_InlineBlot","format","formats","InlineBlot","InlineBlot$1","_BlockBlot","BlockBlot","BlockBlot$1","_ContainerBlot","ContainerBlot","ContainerBlot$1","EmbedBlot","_scroll","EmbedBlot$1","OBSERVER_CONFIG","MAX_OPTIMIZE_ITERATIONS","_ScrollBlot","registry","mutationsMap","records","mark","markParent","optimize","remaining","i","grandChild","ScrollBlot","ScrollBlot$1","_TextBlot","TextBlot","TextBlot$1"],"mappings":"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","x_google_ignoreList":[0]}
import{n}from"./app.component-CxwrbeA3.js";import"./resize-observer-polyfill-B1PUzC5B.js";import"./app.fullcalendar-DqAsc8Hg.js";import"./preact-CNwUjBXN.js";import"./app.core-fp3qH1H1.js";const d={data(){return{sourceCode1:{basic:'\n<TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n    @node-expand="onExpand" @page="onPage" :totalRecords="totalRecords">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n        '},sourceCode2:{basic:"\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n        "}}}};var i=function(){var e=this,a=e._self._c;return a("div",{staticClass:"content-section documentation"},[a("TabView",[a("TabPanel",{attrs:{header:"Source"}},[a("DocSectionCode",{attrs:{code:e.sourceCode1}}),a("DocSectionCode",{attrs:{code:e.sourceCode2,importCode:""}})],1)],1)],1)},r=[],l=n(d,i,r,!1,null,null);const m=l.exports,c={data(){return{nodes:null,rows:10,loading:!1,totalRecords:0}},mounted(){this.loading=!0,setTimeout(()=>{this.loading=!1,this.nodes=this.loadNodes(0,this.rows),this.totalRecords=1e3},1e3)},methods:{onExpand(t){t.children||(this.loading=!0,setTimeout(()=>{let e={...t};e.children=[{data:{name:e.data.name+" - 0",size:Math.floor(Math.random()*1e3)+1+"kb",type:"File"}},{data:{name:e.data.name+" - 1",size:Math.floor(Math.random()*1e3)+1+"kb",type:"File"}}];let a=this.nodes.map(o=>(o.key===t.key&&(o=e),o));this.loading=!1,this.nodes=a},250))},onPage(t){this.loading=!0,setTimeout(()=>{this.loading=!1,this.nodes=this.loadNodes(t.first,this.rows)},1e3)},loadNodes(t,e){let a=[];for(let o=0;o<e;o++){let s={key:t+o,data:{name:"Item "+(t+o),size:Math.floor(Math.random()*1e3)+1+"kb",type:"Type "+(t+o)},leaf:!1};a.push(s)}return a}},components:{TreeTableLazyDoc:m}};var h=function(){var e=this,a=e._self._c;return a("div",[e._m(0),a("div",{staticClass:"content-section implementation"},[a("div",{staticClass:"card"},[a("TreeTable",{attrs:{value:e.nodes,lazy:!0,paginator:!0,rows:e.rows,loading:e.loading,totalRecords:e.totalRecords},on:{"node-expand":e.onExpand,page:e.onPage}},[a("Column",{attrs:{field:"name",header:"Name",expander:!0}}),a("Column",{attrs:{field:"size",header:"Size"}}),a("Column",{attrs:{field:"type",header:"Type"}})],1)],1)]),a("TreeTableLazyDoc")],1)},u=[function(){var t=this,e=t._self._c;return e("div",{staticClass:"content-section introduction"},[e("div",{staticClass:"feature-intro"},[e("h1",[t._v("TreeTable "),e("span",[t._v("Lazy")])]),e("p",[t._v("Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..")])])])}],f=n(c,h,u,!1,null,null);const T=f.exports;export{T as default};
//# sourceMappingURL=TreeTableLazyDemo-DB1XnVTP.js.map

import{N as n}from"./NodeService-DGU-G-ef.js";import{n as d}from"./app.component-2M6wTQPG.js";import"./app.fullcalendar-CKwQu0km.js";import"./preact-CNwUjBXN.js";import"./app.core-Bxt8ZFo4.js";const o={data(){return{selectedKey1:null,selectedKey2:null,selectedKeys1:null,selectedKeys2:null,selectedKeys3:null,nodes:null}},nodeService:null,created(){this.nodeService=new n},mounted(){this.nodeService.getTreeTableNodes().then(s=>this.nodes=s)},methods:{onNodeSelect(s){this.$toast.add({severity:"success",summary:"Node Selected",detail:s.data.name,life:3e3})},onNodeUnselect(s){this.$toast.add({severity:"success",summary:"Node Unselected",detail:s.data.name,life:3e3})}}};var a=function(){var e=this,t=e._self._c;return t("div",[e._m(0),t("div",{staticClass:"content-section implementation"},[t("div",{staticClass:"card"},[t("h5",[e._v("Single Selection")]),t("TreeTable",{attrs:{value:e.nodes,selectionMode:"single",selectionKeys:e.selectedKey1},on:{"update:selectionKeys":function(l){e.selectedKey1=l},"update:selection-keys":function(l){e.selectedKey1=l}}},[t("Column",{attrs:{field:"name",header:"Name",expander:!0}}),t("Column",{attrs:{field:"size",header:"Size"}}),t("Column",{attrs:{field:"type",header:"Type"}})],1)],1),t("div",{staticClass:"card"},[t("h5",[e._v("Multiple Selection with MetaKey")]),t("TreeTable",{attrs:{value:e.nodes,selectionMode:"multiple",selectionKeys:e.selectedKeys1},on:{"update:selectionKeys":function(l){e.selectedKeys1=l},"update:selection-keys":function(l){e.selectedKeys1=l}}},[t("Column",{attrs:{field:"name",header:"Name",expander:!0}}),t("Column",{attrs:{field:"size",header:"Size"}}),t("Column",{attrs:{field:"type",header:"Type"}})],1)],1),t("div",{staticClass:"card"},[t("h5",[e._v("Multiple Selection without MetaKey")]),t("TreeTable",{attrs:{value:e.nodes,selectionMode:"multiple",selectionKeys:e.selectedKeys2,metaKeySelection:!1},on:{"update:selectionKeys":function(l){e.selectedKeys2=l},"update:selection-keys":function(l){e.selectedKeys2=l}}},[t("Column",{attrs:{field:"name",header:"Name",expander:!0}}),t("Column",{attrs:{field:"size",header:"Size"}}),t("Column",{attrs:{field:"type",header:"Type"}})],1)],1),t("div",{staticClass:"card"},[t("h5",[e._v("Checkbox Selection")]),t("TreeTable",{attrs:{value:e.nodes,selectionMode:"checkbox",selectionKeys:e.selectedKeys3},on:{"update:selectionKeys":function(l){e.selectedKeys3=l},"update:selection-keys":function(l){e.selectedKeys3=l}}},[t("Column",{attrs:{field:"name",header:"Name",expander:!0}}),t("Column",{attrs:{field:"size",header:"Size"}}),t("Column",{attrs:{field:"type",header:"Type"}})],1)],1),t("div",{staticClass:"card"},[t("h5",[e._v("Events")]),t("TreeTable",{attrs:{value:e.nodes,selectionMode:"single",selectionKeys:e.selectedKey2},on:{"update:selectionKeys":function(l){e.selectedKey2=l},"update:selection-keys":function(l){e.selectedKey2=l},"node-select":e.onNodeSelect,"node-unselect":e.onNodeUnselect}},[t("Column",{attrs:{field:"name",header:"Name",expander:!0}}),t("Column",{attrs:{field:"size",header:"Size"}}),t("Column",{attrs:{field:"type",header:"Type"}})],1)],1)]),t("div",{staticClass:"content-section documentation"},[t("TabView",[t("TabPanel",{attrs:{header:"Source"}},[t("CodeHighlight",[[e._v(' <h3>Single Selection</h3> <TreeTable :value="nodes" selectionMode="single" :selectionKeys.sync="selectedKey1"> <Column field="name" header="Name" :expander="true"></Column> <Column field="size" header="Size"></Column> <Column field="type" header="Type"></Column> </TreeTable> <h3>Multiple Selection with MetaKey</h3> <TreeTable :value="nodes" selectionMode="multiple" :selectionKeys.sync="selectedKeys1"> <Column field="name" header="Name" :expander="true"></Column> <Column field="size" header="Size"></Column> <Column field="type" header="Type"></Column> </TreeTable> <h3>Multiple Selection without MetaKey</h3> <TreeTable :value="nodes" selectionMode="multiple" :selectionKeys.sync="selectedKeys2" :metaKeySelection="false"> <Column field="name" header="Name" :expander="true"></Column> <Column field="size" header="Size"></Column> <Column field="type" header="Type"></Column> </TreeTable> <h3>Checkbox Selection</h3> <TreeTable :value="nodes" selectionMode="checkbox" :selectionKeys.sync="selectedKeys3"> <Column field="name" header="Name" :expander="true"></Column> <Column field="size" header="Size"></Column> <Column field="type" header="Type"></Column> </TreeTable> <h3>Events</h3> <TreeTable :value="nodes" selectionMode="single" :selectionKeys.sync="selectedKey2" @node-select="onNodeSelect" @node-unselect="onNodeUnselect"> <Column field="name" header="Name" :expander="true"></Column> <Column field="size" header="Size"></Column> <Column field="type" header="Type"></Column> </TreeTable> ')]],2),t("CodeHighlight",{attrs:{lang:"javascript"}},[e._v(" import NodeService from '../../service/NodeService'; export default { data() { return { selectedKey1: null, selectedKey2: null, selectedKeys1: null, selectedKeys2: null, selectedKeys3: null, nodes: null } }, nodeService: null, created() { this.nodeService = new NodeService(); }, mounted() { this.nodeService.getTreeTableNodes().then(data => this.nodes = data); }, methods: { onNodeSelect(node) { this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.data.name, life: 3000}); }, onNodeUnselect(node) { this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.data.name, life: 3000}); } } } ")])],1)],1)],1)])},i=[function(){var s=this,e=s._self._c;return e("div",{staticClass:"content-section introduction"},[e("div",{staticClass:"feature-intro"},[e("h1",[s._v("TreeTable "),e("span",[s._v("Selection")])]),e("p",[s._v("TreeTable supports "),e("b",[s._v("single")]),s._v(", "),e("b",[s._v("multiple")]),s._v(" and "),e("b",[s._v("checkbox")]),s._v(" as selection modes.")])])])}],c=d(o,a,i,!1,null,null);const p=c.exports;export{p as default};
//# sourceMappingURL=TreeTableSelectionDemo-BN82Txhv.js.map

{"version":3,"file":"TreeLazyDemo-kL3ZRNEV.js","sources":["../../src/doc/tree/Lazy.vue","../../src/views/tree/TreeLazyDemo.vue"],"sourcesContent":["<template>\n  <div class=\"content-section documentation\">\n    <TabView>\n      <TabPanel header=\"Source\">\n        <DocSectionCode :code=\"sourceCode1\" />\n        <DocSectionCode :code=\"sourceCode2\" importCode />\n      </TabPanel>\n    </TabView>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      sourceCode1: {\n        basic: `\n<Tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n        `\n      },\n      sourceCode2: {\n        basic: `\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.nodes = this.initateNodes();\n            this.loading = false;\n        }, 2000);\n    },\n    methods: {\n        onNodeExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...this.nodes}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    this.nodes = _nodes;\n                    this.loading = false;\n                }, 500);\n            }\n        },\n        initateNodes() {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n    }\n}\n        `\n      },\n    }\n  }\n}\n</script>\n","<template>\n  <div>\n    <div class=\"content-section introduction\">\n      <div class=\"feature-intro\">\n        <h1>Tree <span>Lazy</span></h1>\n        <p>\n          Lazy loading is handy when dealing with huge datasets. This example imitates a lazy loading case with\n          timeouts.\n        </p>\n      </div>\n    </div>\n\n    <div class=\"content-section implementation\">\n      <div class=\"card\">\n        <Tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n      </div>\n    </div>\n\n    <TreeLazyDoc />\n  </div>\n</template>\n\n<script>\nimport TreeLazyDoc from '@/doc/tree/Lazy.vue'\nimport NodeService from '../../service/NodeService'\n\nexport default {\n  data() {\n    return {\n      loading: false,\n      nodes: null\n    }\n  },\n  nodeService: null,\n  created() {\n    this.nodeService = new NodeService()\n  },\n  mounted() {\n    this.loading = true\n\n    setTimeout(() => {\n      this.nodes = this.initateNodes()\n      this.loading = false\n    }, 2000)\n  },\n  methods: {\n    onNodeExpand(node) {\n      if (!node.children) {\n        this.loading = true\n\n        setTimeout(() => {\n          let _node = { ...node }\n          _node.children = []\n\n          for (let i = 0; i < 3; i++) {\n            _node.children.push({\n              key: node.key + '-' + i,\n              label: 'Lazy ' + node.label + '-' + i\n            })\n          }\n\n          let _nodes = { ...this.nodes }\n          _nodes[parseInt(node.key, 10)] = _node\n\n          this.nodes = _nodes\n          this.loading = false\n        }, 500)\n      }\n    },\n    initateNodes() {\n      return [\n        {\n          key: '0',\n          label: 'Node 0',\n          leaf: false\n        },\n        {\n          key: '1',\n          label: 'Node 1',\n          leaf: false\n        },\n        {\n          key: '2',\n          label: 'Node 2',\n          leaf: false\n        }\n      ]\n    }\n  },\n  components: { TreeLazyDoc }\n}\n</script>\n\n<style scoped>\nbutton {\n  margin-right: 0.5rem;\n}\n</style>\n"],"names":["_sfc_main","NodeService","node","_node","i","_nodes","TreeLazyDoc"],"mappings":"gPAYA,MAAAA,EAAA,CACA,MAAA,CACA,MAAA,CACA,YAAA,CACA,MAAA,yFAGA,EACA,YAAA,CACA,MAAA,6nDAkEA,CACA,CACA,CACA,0UChEAA,EAAA,CACA,MAAA,CACA,MAAA,CACA,QAAA,GACA,MAAA,IACA,CACA,EACA,YAAA,KACA,SAAA,CACA,KAAA,YAAA,IAAAC,CACA,EACA,SAAA,CACA,KAAA,QAAA,GAEA,WAAA,IAAA,CACA,KAAA,MAAA,KAAA,aAAA,EACA,KAAA,QAAA,EACA,EAAA,GAAA,CACA,EACA,QAAA,CACA,aAAAC,EAAA,CACAA,EAAA,WACA,KAAA,QAAA,GAEA,WAAA,IAAA,CACA,IAAAC,EAAA,CAAA,GAAAD,CAAA,EACAC,EAAA,SAAA,CAAA,EAEA,QAAAC,EAAA,EAAAA,EAAA,EAAAA,IACAD,EAAA,SAAA,KAAA,CACA,IAAAD,EAAA,IAAA,IAAAE,EACA,MAAA,QAAAF,EAAA,MAAA,IAAAE,CACA,CAAA,EAGA,IAAAC,EAAA,CAAA,GAAA,KAAA,KAAA,EACAA,EAAA,SAAAH,EAAA,IAAA,EAAA,CAAA,EAAAC,EAEA,KAAA,MAAAE,EACA,KAAA,QAAA,EACA,EAAA,GAAA,EAEA,EACA,cAAA,CACA,MAAA,CACA,CACA,IAAA,IACA,MAAA,SACA,KAAA,EACA,EACA,CACA,IAAA,IACA,MAAA,SACA,KAAA,EACA,EACA,CACA,IAAA,IACA,MAAA,SACA,KAAA,EACA,CACA,CACA,CACA,EACA,WAAA,CAAA,YAAAC,CAAA,CACA"}
import{n as i,aJ as l,aK as n}from"./app.component-D2FSMXVj.js";import{C as d}from"./CustomerService-4zeCbf_T.js";import{_ as s}from"./flag_placeholder-BDuXeLXp.js";import"./app.fullcalendar-CKwQu0km.js";import"./preact-CNwUjBXN.js";import"./app.core-Bxt8ZFo4.js";const v={};var u=function(){var t=this,e=t._self._c;return e("div",{staticClass:"content-section documentation"},[e("TabView",[e("TabPanel",{attrs:{header:"Documentation"}},[e("h5",[t._v("Import")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import DataTable from 'primevue2/datatable'; import Column from 'primevue2/column'; import ColumnGroup from 'primevue2/columngroup'; //optional for column grouping ")]),e("h5",[t._v("Getting Started")]),e("p",[t._v("DataTable requires a value as an array of objects and columns defined with Column component. Throughout the samples, a car interface having vin, brand, year and color properties is used to define an object to be displayed by the datatable. Cars are loaded by a CarService that connects to a server to fetch. Note that this is only for demo purposes, DataTable does not have any restrictions on how the data is provided.")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" export default class CarService { getCarsSmall() { return fetch('demo/data/cars-small.json').then(res => res.json()).then(d => d.data); } getCarsMedium() { return fetch('demo/data/cars-medium.json').then(res => res.json()).then(d => d.data); } getCarsLarge() { return fetch('demo/data/cars-large.json').then(res => res.json()).then(d => d.data); } } ")]),e("p",[t._v("Example response;")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(' { "data": [ {"brand": "Volkswagen", "year": 2012, "color": "Orange", "vin": "dsad231ff"}, {"brand": "Audi", "year": 2011, "color": "Black", "vin": "gwregre345"}, {"brand": "Renault", "year": 2005, "color": "Gray", "vin": "h354htr"}, {"brand": "BMW", "year": 2003, "color": "Blue", "vin": "j6w54qgh"}, {"brand": "Mercedes", "year": 1995, "color": "Orange", "vin": "hrtwy34"}, {"brand": "Volvo", "year": 2005, "color": "Black", "vin": "jejtyj"}, {"brand": "Honda", "year": 2012, "color": "Yellow", "vin": "g43gr"}, {"brand": "Jaguar", "year": 2013, "color": "Orange", "vin": "greg34"}, {"brand": "Ford", "year": 2000, "color": "Black", "vin": "h54hw5"}, {"brand": "Fiat", "year": 2013, "color": "Red", "vin": "245t2s"} ] } ')]),e("p",[t._v("Following sample datatable has 4 columns and retrieves the data from a service on mount.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { cars: null } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); } } ")]),e("h5",[t._v("Dynamic Columns")]),e("p",[t._v("Column components can be dynamically generated using a v-for as well.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars"> <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { columns: null, cars: null } }, carService: null, created() { this.carService = new CarService(); this.columns = [ {field: 'vin', header: 'Vin'}, {field: 'year', header: 'Year'}, {field: 'brand', header: 'Brand'}, {field: 'color', header: 'Color'} ]; }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); } } ")]),e("h5",[t._v("Column Component Properties utilized by the DataTable")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Type")]),e("th",[t._v("Default")]),e("th",[t._v("Description")])])]),e("tbody",[e("tr",[e("td",[t._v("columnKey")]),e("td",[t._v("any")]),e("td",[t._v("null")]),e("td",[t._v("Identifier of a column if field property is not defined.")])]),e("tr",[e("td",[t._v("field")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Property represented by the column.")])]),e("tr",[e("td",[t._v("sortField")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Property name to use in sorting, defaults to field.")])]),e("tr",[e("td",[t._v("filterField")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Property name to use in filtering, defaults to field.")])]),e("tr",[e("td",[t._v("sortable")]),e("td",[t._v("any")]),e("td",[t._v("false")]),e("td",[t._v("Defines if a column is sortable.")])]),e("tr",[e("td",[t._v("header")]),e("td",[t._v("any")]),e("td",[t._v("null")]),e("td",[t._v("Header content of the column.")])]),e("tr",[e("td",[t._v("footer")]),e("td",[t._v("any")]),e("td",[t._v("null")]),e("td",[t._v("Footer content of the column.")])]),e("tr",[e("td",[t._v("styles")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Inline style of header, body and footer cells.")])]),e("tr",[e("td",[t._v("className")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Style class of header, body and footer cells.")])]),e("tr",[e("td",[t._v("headerStyle")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Inline style of the column header.")])]),e("tr",[e("td",[t._v("headerClass")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Style class of the column header.")])]),e("tr",[e("td",[t._v("bodyStyle")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Inline style of the column body.")])]),e("tr",[e("td",[t._v("bodyClass")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Style class of the column body.")])]),e("tr",[e("td",[t._v("footerStyle")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Inline style of the column footer.")])]),e("tr",[e("td",[t._v("footerClass")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Style class of the column footer.")])]),e("tr",[e("td",[t._v("showFilterMenu")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Whether to display the filter overlay.")])]),e("tr",[e("td",[t._v("showFilterOperator")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("When enabled, match all and match any operator selector is displayed.")])]),e("tr",[e("td",[t._v("showClearButton")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Displays a button to clear the column filtering.")])]),e("tr",[e("td",[t._v("showApplyButton")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Displays a button to apply the column filtering.")])]),e("tr",[e("td",[t._v("showFilterMatchModes")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Whether to show the match modes selector.")])]),e("tr",[e("td",[t._v("showAddButton")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("When enabled, a button is displayed to add more rules.")])]),e("tr",[e("td",[t._v("filterMatchModeOptions")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("An array of label-value pairs to override the global match mode options.")])]),e("tr",[e("td",[t._v("maxConstraints")]),e("td",[t._v("number")]),e("td",[t._v("2")]),e("td",[t._v("Maximum number of constraints for a column filter.")])]),e("tr",[e("td",[t._v("excludeGlobalFilter")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether to exclude from global filtering or not.")])]),e("tr",[e("td",[t._v("filterHeaderStyle")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Inline style of the column filter header in row filter display.")])]),e("tr",[e("td",[t._v("filterHeaderClass")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Style class of the column filter header in row filter display.")])]),e("tr",[e("td",[t._v("filterMenuStyle")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Inline style of the column filter overlay.")])]),e("tr",[e("td",[t._v("filterMenuClass")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Style class of the column filter overlay.")])]),e("tr",[e("td",[t._v("selectionMode")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v('Defines column based selection mode, options are "single" and "multiple".')])]),e("tr",[e("td",[t._v("expander")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Displays an icon to toggle row expansion.")])]),e("tr",[e("td",[t._v("colspan")]),e("td",[t._v("number")]),e("td",[t._v("null")]),e("td",[t._v("Number of columns to span for grouping.")])]),e("tr",[e("td",[t._v("rowspan")]),e("td",[t._v("number")]),e("td",[t._v("null")]),e("td",[t._v("Number of rows to span for grouping.")])]),e("tr",[e("td",[t._v("rowReorder")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether this column displays an icon to reorder the rows.")])]),e("tr",[e("td",[t._v("rowReorderIcon")]),e("td",[t._v("string")]),e("td",[t._v("pi pi-bars")]),e("td",[t._v("Icon of the drag handle to reorder rows.")])]),e("tr",[e("td",[t._v("reorderableColumn")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Defines if the column itself can be reordered with dragging.")])]),e("tr",[e("td",[t._v("rowEditor")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When enabled, column displays row editor controls.")])]),e("tr",[e("td",[t._v("frozen")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether the column is fixed in horizontal scrolling.")])]),e("tr",[e("td",[t._v("alignFrozen")]),e("td",[t._v("string")]),e("td",[t._v("left")]),e("td",[t._v("Position of a frozen column, valid values are left and right.")])]),e("tr",[e("td",[t._v("exportable")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Whether the column is included in data export.")])]),e("tr",[e("td",[t._v("exportHeader")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Custom export header of the column to be exported as CSV.")])]),e("tr",[e("td",[t._v("filterMatchMode")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Defines the filtering algorithm to use when searching the options.")])]),e("tr",[e("td",[t._v("hidden")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether the column is rendered.")])])])])]),e("h5",[t._v("Column Slots")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Parameters")])])]),e("tbody",[e("tr",[e("td",[t._v("header")]),e("td",[t._v("column: Column node")])]),e("tr",[e("td",[t._v("body")]),e("td",[t._v("data: Row data "),e("br"),t._v(" column: Column node "),e("br"),t._v(" field: Column field "),e("br"),t._v(" index: Row index "),e("br"),t._v(" frozenRow: Is row frozen "),e("br"),t._v(" editorInitCallback: Callback function")])]),e("tr",[e("td",[t._v("footer")]),e("td",[t._v("column: Column node")])]),e("tr",[e("td",[t._v("editor")]),e("td",[t._v("data: Row data "),e("br"),t._v(" column: Column node "),e("br"),t._v(" field: Column field "),e("br"),t._v(" index: Row index "),e("br"),t._v(" frozenRow: Is row frozen "),e("br"),t._v(" editorSaveCallback: Callback function "),e("br"),t._v(" editorCancelCallback: Callback function")])]),e("tr",[e("td",[t._v("filter")]),e("td",[t._v("field: Column field "),e("br"),t._v(" filterModel: {value,matchMode} Filter metadata "),e("br"),t._v(" filterCallback: Callback function")])]),e("tr",[e("td",[t._v("filterheader")]),e("td",[t._v("field: Column field "),e("br"),t._v(" filterModel: {value,matchMode} Filter metadata "),e("br"),t._v(" filterCallback: Callback function")])]),e("tr",[e("td",[t._v("filterfooter")]),e("td",[t._v("field: Column field "),e("br"),t._v(" filterModel: {value,matchMode} Filter metadata "),e("br"),t._v(" filterCallback: Callback function")])]),e("tr",[e("td",[t._v("filterclear")]),e("td",[t._v("field: Column field "),e("br"),t._v(" filterModel: {value,matchMode} Filter metadata "),e("br"),t._v(" filterCallback: Callback function")])]),e("tr",[e("td",[t._v("filterapply")]),e("td",[t._v("field: Column field "),e("br"),t._v(" filterModel: {value,matchMode} Filter metadata "),e("br"),t._v(" filterCallback: Callback function")])])])])]),e("h5",[t._v("Auto Layout")]),e("p",[t._v("Default table-layout is fixed meaning the cell widths do not depend on their content. If you require cells to scale based on their contents set "),e("i",[t._v("autoLayout")]),t._v(" property to true. Note that Scrollable and/or Resizable tables do not support auto layout due to technical limitations.")]),e("h5",[t._v("Templating")]),e("p",[t._v("Field data of a corresponding row is displayed as the cell content by default, this can be customized using a "),e("i",[t._v("body")]),t._v(" template where current row data and column properties are passed via the slot props. On the other hand, "),e("i",[t._v("header")]),t._v(" and "),e("i",[t._v("footer")]),t._v(" sections of a column can either be defined with the properties or the templates. Similarly DataTable itself also provides header and footer properties along with the templates for the main header and footer of the table.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars"> <template #header> <div> <Button icon="pi pi-refresh" style="float: left"/> List of Cars </div> </template> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"> <template #body="slotProps"> <img :src="$publicUrl(\'demo/images/car/\' + slotProps.data.brand + \'.png\')" :alt="slotProps.data.brand" width="48px"/> </template> </Column> <Column field="color" header="Color"></Column> <Column :headerStyle="{width: \'8em\'}" :bodyStyle="\'text-align\': \'center\'"> <template #header> <Button type="button" icon="pi pi-cog"></Button> </template> <template #body="slotProps"> <Button type="button" icon="pi pi-search" class="p-button-success" style="margin-right: .5em"></Button> <Button type="button" icon="pi pi-pencil" class="p-button-warning"></Button> </template> </Column> <template #footer> In total there are {{cars ? cars.length : 0 }} cars. </template> </DataTable> ')]],2),e("h5",[t._v("Sizes")]),e("p",[t._v('In addition to the regular table, a smal and a large version are available with different paddings. For a table with" smaller paddings use '),e("i",[t._v("p-datatable-sm")]),t._v(" class and for a larger one use "),e("i",[t._v("p-datatable-lg")]),t._v(".")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" class="p-datatable-sm"> <template #header> Small Table </template> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> <DataTable :value="cars"> <template #header> Normal Table </template> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> <DataTable :value="cars" class="p-datatable-lg"> <template #header> Large Table </template> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("h5",[t._v("Column Grouping")]),e("p",[t._v("Columns can be grouped at header and footer sections by defining a ColumnGroup with nested rows and columns.")]),e("CodeHighlight",[[t._v(' <DataTable :value="sales"> <ColumnGroup type="header"> <Row> <Column header="Brand" :rowspan="3" /> <Column header="Sale Rate" :colspan="4" /> </Row> <Row> <Column header="Sales" :colspan="2" /> <Column header="Profits" :colspan="2" /> </Row> <Row> <Column header="Last Year" /> <Column header="This Year" /> <Column header="Last Year" /> <Column header="This Year" /> </Row> </ColumnGroup> <Column field="brand" /> <Column field="lastYearSale" /> <Column field="thisYearSale" /> <Column field="lastYearProfit" /> <Column field="thisYearProfit" /> <ColumnGroup type="footer"> <Row> <Column footer="Totals:" :colspan="3" /> <Column footer="$506,202" /> <Column footer="$531,020" /> </Row> </ColumnGroup> </DataTable> ')]],2),e("h5",[t._v("Pagination")]),e("p",[t._v("Pagination is enabled by setting "),e("i",[t._v("paginator")]),t._v(" property to true and defining the "),e("i",[t._v("rows")]),t._v(" property defines the number of rows per page. See the "),e("router-link",{attrs:{to:"/paginator"}},[t._v("Paginator")]),t._v(" for the available customization options such as paginator templates, page links, rows per page options and more which can be passed through the DataTable.")],1),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :paginator="true" :rows="10"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("p",[t._v("paginatorstart and paginatorend templates are available to specify custom content at the left and right side.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :paginator="true" :rows="10"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> <template #paginatorstart> <Button type="button" icon="pi pi-refresh" /> </template> <template #paginatorend> <Button type="button" icon="pi pi-cloud" /> </template> </DataTable> ')]],2),e("p",[t._v("Paginator can also be programmed programmatically using a binding to the "),e("i",[t._v("first")]),t._v(' property that defines the index of the first element to display. For example setting first to zero will reset the paginator to the very first page. This property also supports "sync" keyword in case you\'d like your binding to be updated whenever the user changes the page.')]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :paginator="true" :rows="10" :first="firstRecordIndex"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("h5",[t._v("Sorting")]),e("p",[t._v("Enabling "),e("i",[t._v("sortable")]),t._v(" property at column component would be enough to make a column sortable. The property to use when sorting is the "),e("i",[t._v("field")]),t._v(" by default and can be customized using the "),e("i",[t._v("sortField")]),t._v(".")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars"> <Column field="vin" header="Vin" :sortable="true"></Column> <Column field="year" header="Year" :sortable="true"></Column> <Column field="brand" header="Brand" :sortable="true"></Column> <Column field="color" header="Color" :sortable="true"></Column> </DataTable> ')]],2),e("p",[t._v("By default sorting is executed on the clicked column only. To enable multiple field sorting, set "),e("i",[t._v("sortMode")]),t._v(' property to "multiple" and use metakey when clicking on another column.')]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" sortMode="multiple"> <Column field="vin" header="Vin" :sortable="true"></Column> <Column field="year" header="Year" :sortable="true"></Column> <Column field="brand" header="Brand" :sortable="true"></Column> <Column field="color" header="Color" :sortable="true"></Column> </DataTable> ')]],2),e("p",[t._v("In case you'd like to display the table as sorted per a single column by default on mount or programmatically apply sort, use "),e("i",[t._v("sortField")]),t._v(" and "),e("i",[t._v("sortOrder")]),t._v(' properties. These two properties also support the "sync" keyword to get updated when the user applies sort a column.')]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" sortField="year" :sortOrder="1"> <Column field="vin" header="Vin" :sortable="true"></Column> <Column field="year" header="Year" :sortable="true"></Column> <Column field="brand" header="Brand" :sortable="true"></Column> <Column field="color" header="Color" :sortable="true"></Column> </DataTable> <DataTable :value="cars" sortField="dynamicSortField" :sortOrder="dynamicSortOrder"> <Column field="vin" header="Vin" :sortable="true"></Column> <Column field="year" header="Year" :sortable="true"></Column> <Column field="brand" header="Brand" :sortable="true"></Column> <Column field="color" header="Color" :sortable="true"></Column> </DataTable> ')]],2),e("p",[t._v("In multiple mode, use the "),e("i",[t._v("multiSortMeta")]),t._v(" property and bind an array of SortMeta objects instead.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" sortMode="multiple" :multiSortMeta="multiSortMeta"> <Column field="vin" header="Vin" :sortable="true"></Column> <Column field="year" header="Year" :sortable="true"></Column> <Column field="brand" header="Brand" :sortable="true"></Column> <Column field="color" header="Color" :sortable="true"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" data() { return { multiSortMeta: [ {field: 'year', order: 1}, {field: 'brand', order: -1} ] } } ")]),e("h5",{attrs:{id:"filtering"}},[t._v("Filtering")]),e("p",[t._v("DataTable has advanced filtering capabilities that does the heavy lifting while providing flexible customization. Filtering has two layout alternatives defined with the "),e("i",[t._v("filterDisplay")]),t._v(". In "),e("b",[t._v("row")]),t._v(" setting, filter elements are displayed in a separate row at the header section whereas in "),e("i",[t._v("menu")]),t._v(" mode filter elements are displayed inside an overlay. Filter metadata is specified using the "),e("i",[t._v("filters")]),t._v(" as a v-model and UI elements for the filtering are placed inside the filter template. The template filter gets a "),e("i",[t._v("filterModel")]),t._v(" and "),e("i",[t._v("filterCallback")]),t._v(", use filterModel.value to populate the filter with your own form components and call the filterCallback with the event of your choice like @input, @change, @click.")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CustomerService from '../../service/CustomerService'; import {FilterMatchMode} from 'primevue2/api'; export default { data() { return { customers: null, filters: { 'name': {value: null, matchMode: FilterMatchMode.STARTS_WITH} } } }, created() { this.customerService = new CustomerService(); }, mounted() { this.customerService.getCustomersLarge().then(data => this.customers = data); } } ")]),e("h6",[t._v("Filter Row")]),e("p",[t._v("Input field is displayed in a separate header row.")]),e("CodeHighlight",[[t._v(' <DataTable :value="customers1" dataKey="id" :filters.sync="filters" filterDisplay="row" :loading="loading"> <Column field="name" header="Name"> <template #filter="{filterModel,filterCallback}"> <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" :placeholder="`Search by name - ${filterModel.matchMode}`"/> </template> </Column> </DataTable> ')]],2),e("h6",[t._v("Filter Menu")]),e("p",[t._v("Input field is displayed in an overlay.")]),e("CodeHighlight",[[t._v(' <DataTable :value="customers1" dataKey="id" :filters.sync="filters" filterDisplay="menu" :loading="loading"> <Column field="name" header="Name"> <template #filter="{filterModel,filterCallback}"> <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" :placeholder="`Search by name - ${filterModel.matchMode}`"/> </template> </Column> </DataTable> ')]],2),e("h6",[t._v("Multiple Constraints")]),e("p",[t._v('In "menu" display, it is possible to add more constraints to a same filter. In this case, metadata could be an array of constraints. The operator defines whether all or any of the constraints should match.')]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" data() { return { customers: null, filters: { 'name': {operator: FilterOperator.AND, constraints: [{value: null, matchMode: FilterMatchMode.STARTS_WITH}]}, } } } ")]),e("h6",[t._v("Populate Filters")]),e("p",[t._v("Providing a filters with predefined values would be enough to display the table as filtered by default. This approach can also be used to clear filters progammatically.")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" data() { return { customers: null, filters: { 'name': {operator: FilterOperator.AND, constraints: [ {value: 'Prime', matchMode: FilterMatchMode.STARTS_WITH}, {value: 'Vue', matchMode: FilterMatchMode.CONTAINS} ]} } } } ")]),e("h6",[t._v("Match Modes")]),e("p",[t._v("Depending on the "),e("i",[t._v("dataType")]),t._v(" of the column, suitable match modes are displayed. Default configuration is available at "),e("i",[t._v("PrimeVue.filterMatchModeOptions")]),t._v(" which can be used to customize the modes globally for all tables.")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import Vue from 'vue'; import PrimeVue from 'primevue2/config'; import {FilterMatchMode} from 'primevue2/api', Vue.use(PrimeVue, { filterMatchModeOptions: { text: [ FilterMatchMode.STARTS_WITH, FilterMatchMode.CONTAINS, FilterMatchMode.NOT_CONTAINS, FilterMatchMode.ENDS_WITH, FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS ], numeric: [ FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS, FilterMatchMode.LESS_THAN, FilterMatchMode.LESS_THAN_OR_EQUAL_TO, FilterMatchMode.GREATER_THAN, FilterMatchMode.GREATER_THAN_OR_EQUAL_TO ], date: [ FilterMatchMode.DATE_IS, FilterMatchMode.DATE_IS_NOT, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_AFTER ] } }); ")]),e("p",[t._v("If you need to override the match modes for a particular column use the "),e("i",[t._v("filterMatchModeOptions")]),t._v(" property and provide an array with label-value pairs.")]),e("CodeHighlight",[[t._v(' <Column field="name" header="Name" :filterMatchModeOptions="matchModes"> <template #filter="{filterModel,filterCallback}"> <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" :placeholder="`Search by name - ${filterModel.matchMode}`"/> </template> </Column> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" matchModes: [ {label: 'Starts With', FilterMatchMode.STARTS_WITH}, {label: 'Contains', FilterMatchMode.CONTAINS}, ] ")]),e("h6",[t._v("Custom Filter")]),e("p",[t._v("Custom filtering is implemented using the "),e("i",[t._v("FilterService")]),t._v(", first register your filter and add it to your "),e("i",[t._v("filterMatchModeOptions")]),t._v(".")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import {FilterService} from 'primevue2/api'; FilterService.register('myfilter', (a,b) => a === b); ")]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" matchModes: [ {label: 'My Filter', \"myfilter\"}, {label: 'Starts With', FilterMatchMode.STARTS_WITH}, {label: 'Contains', FilterMatchMode.CONTAINS}, ] ")]),e("h6",[t._v("Filter Slots")]),e("p",[t._v("Filter menu overlay can be customized even further with various templates including "),e("i",[t._v("filterheader")]),t._v(", "),e("i",[t._v("filterfooter")]),t._v(", "),e("i",[t._v("filterclear")]),t._v(", "),e("i",[t._v("filterapply")]),t._v(". Example here changes the buttons and adds a footer.")]),e("CodeHighlight",[[t._v(' <Column header="Country" filterField="country.name"> <template #filter="{filterModel}"> <InputText type="text" v-model="filterModel.value" class="p-column-filter" placeholder="Search by country"/> </template> <template #filterclear="{filterCallback}"> <Button type="button" icon="pi pi-times" @click="filterCallback()" class="p-button-secondary"></Button> </template> <template #filterapply="{filterCallback}"> <Button type="button" icon="pi pi-check" @click="filterCallback()" class="p-button-success"></Button> </template> <template #filterfooter> <div class="px-3 pt-0 pb-3 text-center font-bold">Customized Buttons</div> </template> </Column> ')]],2),e("h5",[t._v("Selection")]),e("p",[t._v("DataTable provides single and multiple selection modes on click of a row. Selected rows are bound to the "),e("i",[t._v("selection")]),t._v(" property and updated using the v-model directive. Alternatively column based selection can be done using radio buttons or checkboxes using "),e("i",[t._v("selectionMode")]),t._v(" of a particular column. In addition row-select and row-unselect events are provided as optional callbacks.")]),e("p",[t._v("The "),e("i",[t._v("dataKey")]),t._v(" property identifies a unique value of a row in the dataset, it is not mandatory however being able to define it increases the performance of the table signifantly.")]),e("p",[t._v("In single mode, selection binding is an object reference.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :selection.sync="selectedCar" selectionMode="single" dataKey="vin"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("p",[t._v("In multiple mode, selection binding should be an array and multiple items can either be selected using metaKey or toggled individually depending on the value of "),e("i",[t._v("metaKeySelection")]),t._v(" property value which is true by default. On touch enabled devices metaKeySelection is turned off automatically. Additionally ShiftKey is supported for range selection.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :selection.sync="selectedCars" selectionMode="multiple" dataKey="vin"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("p",[t._v("If you prefer a radioButton or a checkbox instead of a row click, use the "),e("i",[t._v("selectionMode")]),t._v(" of a column instead. Following datatable displays a checkbox at the first column of each row and automatically adds a header checkbox to toggle selection of all rows.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :selection.sync="selectedCars" selectionMode="multiple" dataKey="vin"> <Column selectionMode="multiple"></Column> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("h5",[t._v("Scrolling")]),e("p",[t._v("DataTable supports both horizontal and vertical scrolling as well as frozen columns and rows. Scrollable DataTable is enabled using "),e("i",[t._v("scrollable")]),t._v(" property and "),e("i",[t._v("scrollHeight")]),t._v(" to define the viewport height.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :scrollable="true" scrollHeight="200px"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("h5",[t._v("Column Widths of a Scrollable Table")]),e("p",[t._v("Scrollable table uses flex layout so there are a couple of rules to consider when adjusting the widths of columns.")]),e("ul",[e("li",[t._v("Use "),e("i",[t._v("min-width")]),t._v(" in vertical scrolling only so that when there is enough space columns may grow and for smaller screens a horizontal scrollbar is displayed to provide responsive design.")]),e("li",[t._v("When horizontal scrolling is enabled, prefer "),e("i",[t._v("width")]),t._v(" instead of "),e("i",[t._v("min-width")]),t._v(".")]),e("li",[t._v("In vertical scrolling only, use "),e("i",[t._v("flex")]),t._v(" to disable grow and shrink while defining a initial width. When horizontal scrolling is enabled, this is not required as columns do not grow or shrink in horizontal scrolling.")])]),e("CodeHighlight",[[t._v(' <Column field="vin" header="Vin" style="flex: 0 0 4rem"></Column> ')]],2),e("h5",[t._v("Flex Scroll")]),e("p",[t._v("In cases where viewport should adjust itself according to the table parent's height instead of a fixed viewport height, set scrollHeight option as flex. In example below, table is inside a Dialog where viewport size dynamically responds to the dialog size changes such as maximizing.")]),e("CodeHighlight",[[t._v(' <Button label="Show" icon="pi pi-external-link" @click="openDialog" /> <Dialog header="Flex Scroll" :visible.sync="dialogVisible" :style="{width: \'50vw\'}" :maximizable="true" :modal="true" :contentStyle="{height: \'300px\'}"> <DataTable :value="cars" :scrollable="true" scrollHeight="flex"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> <template #footer> <Button label="Yes" icon="pi pi-check" @click="closeDialog" /> <Button label="No" icon="pi pi-times" @click="closeDialog" class="p-button-secondary"/> </template> </Dialog> ')]],2),e("h5",[t._v("Full Page Scroll")]),e("p",[t._v("FlexScroll can also be used for cases where scrollable viewport should be responsive with respect to the window size. See the Full Page demo for an example.")]),e("CodeHighlight",[[t._v(' <div style="height: calc(100vh - 143px)"> <DataTable :value="cars" :scrollable="true" scrollHeight="flex"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> </div> ')]],2),e("h6",[t._v("Horizontal Scrolling")]),e("p",[t._v("For horizontal scrolling, it is required to set "),e("i",[t._v("scrollDirection")]),t._v(' to "horizontal" and give fixed widths to columns.')]),e("CodeHighlight",[[t._v(' <DataTable :value="customers" :scrollable="true" scrollDirection="horizontal"> <Column field="id" header="Id" footer="Id" :style="{width:\'200px\'}"></Column> <Column field="name" header="Name" footer="Name" :style="{width:\'200px\'}"></Column> <Column field="country.name" header="Country" footer="Country" :style="{width:\'200px\'}"></Column> <Column field="date" header="Date" footer="Date" :style="{width:\'200px\'}"></Column> <Column field="balance" header="Balance" footer="Balance" :style="{width:\'200px\'}"></Column> <Column field="company" header="Company" footer="Company" :style="{width:\'200px\'}"></Column> <Column field="status" header="Status" footer="Status" :style="{width:\'200px\'}"></Column> <Column field="activity" header="Activity" footer="Activity" :style="{width:\'200px\'}"></Column> <Column field="representative.name" header="Representative" footer="Representative" :style="{width:\'200px\'}"></Column> </DataTable> ')]],2),e("h6",[t._v("Horizontal and Vertical Scrolling")]),e("p",[t._v("Set "),e("i",[t._v("scrollDirection")]),t._v(' to "both" and give fixed widths to columns to scroll both ways.')]),e("CodeHighlight",[[t._v(' <DataTable :value="customers" :scrollable="true" scrollHeight="400px" scrollDirection="both"> <Column field="id" header="Id" footer="Id" :style="{width:\'200px\'}"></Column> <Column field="name" header="Name" footer="Name" :style="{width:\'200px\'}"></Column> <Column field="country.name" header="Country" footer="Country" :style="{width:\'200px\'}"></Column> <Column field="date" header="Date" footer="Date" :style="{width:\'200px\'}"></Column> <Column field="balance" header="Balance" footer="Balance" :style="{width:\'200px\'}"></Column> <Column field="company" header="Company" footer="Company" :style="{width:\'200px\'}"></Column> <Column field="status" header="Status" footer="Status" :style="{width:\'200px\'}"></Column> <Column field="activity" header="Activity" footer="Activity" :style="{width:\'200px\'}"></Column> <Column field="representative.name" header="Representative" footer="Representative" :style="{width:\'200px\'}"></Column> </DataTable> ')]],2),e("h6",[t._v("Frozen Rows")]),e("p",[t._v("Frozen rows are used to fix certain rows while scrolling, this data is defined with the "),e("i",[t._v("frozenValue")]),t._v(" property.")]),e("CodeHighlight",[[t._v(' <DataTable :value="customers" :frozenValue="lockedCustomers" :scrollable="true" scrollHeight="400px"> <Column field="name" header="Name"></Column> <Column field="country.name" header="Country"></Column> <Column field="representative.name" header="Representative"></Column> <Column field="status" header="Status"></Column> </DataTable> ')]],2),e("h6",[t._v("Frozen Columns")]),e("p",[t._v("Certain columns can be frozen by using the "),e("i",[t._v("frozen")]),t._v(" property of the column component. In addition "),e("i",[t._v("alignFrozen")]),t._v(" is available to define whether the column should be fixed on the left or right.")]),e("CodeHighlight",[[t._v(' <DataTable :value="customers" :scrollable="true" scrollHeight="400px" scrollDirection="both"> <Column field="name" header="Name" :style="{width:\'200px\'}" frozen></Column> <Column field="id" header="Id" :style="{width:\'100px\'}" :frozen="idFrozen"></Column> <Column field="name" header="Name" :style="{width:\'200px\'}"></Column> <Column field="country.name" header="Country" :style="{width:\'200px\'}"></Column> <Column field="date" header="Date" :style="{width:\'200px\'}"></Column> <Column field="company" header="Company" :style="{width:\'200px\'}"></Column> <Column field="status" header="Status" :style="{width:\'200px\'}"></Column> <Column field="activity" header="Activity" :style="{width:\'200px\'}"></Column> <Column field="representative.name" header="Representative" :style="{width:\'200px\'}"></Column> <Column field="balance" header="Balance" :style="{width:\'200px\'}" frozen alignFrozen="right"></Column> </DataTable> ')]],2),e("h6",[t._v("Scrollable RowGroup")]),e("p",[t._v("Row groups with subheaders have exclusive support for filtering, when the table scrolls the subheaders stay fixed as long as their data are still displayed. No additional configuration is required to enable this feature. View the "),e("router-link",{attrs:{to:"/datatable/rowgroup"}},[t._v("Row Group")]),t._v(" demo for an example.")],1),e("h5",[t._v("Lazy Loading")]),e("p",[t._v("Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks such as paging and sorting. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration so that paginator displays the UI accordingly.")]),e("p",[t._v("Lazy loading is implemented by handling "),e("i",[t._v("page")]),t._v(", "),e("i",[t._v("sort")]),t._v(", "),e("i",[t._v("filter")]),t._v(" events by making a remote query using the information passed to these events such as first offset, number of rows, sort field for ordering and filters. Note that, in lazy filtering totalRecords should also be updated to align the data with the paginator.")]),e("p",[t._v("Visit the "),e("router-link",{attrs:{to:"/datatable/lazy"}},[t._v("lazy loading")]),t._v(" demo for an example with a remote datasource.")],1),e("h5",[t._v("Row Expansion")]),e("p",[t._v("Rows can be expanded to display additional content using the "),e("i",[t._v("expandedRows")]),t._v(' property with the v-model directive accompanied by a template named "expansion". '),e("i",[t._v("row-expand")]),t._v(" and "),e("i",[t._v("row-collapse")]),t._v(" are optional callbacks that are invoked when a row is expanded or toggled.")]),e("p",[t._v("The "),e("i",[t._v("dataKey")]),t._v(" property identifies a unique value of a row in the dataset, it is not mandatory in row expansion functionality however being able to define it increases the performance of the table significantly.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :expandedRows.sync="expandedRows" dataKey="vin" @row-expand="onRowExpand" @row-collapse="onRowCollapse"> <template #header> <div class="table-header-container"> <Button icon="pi pi-plus" label="Expand All" @click="expandAll" /> <Button icon="pi pi-minus" label="Collapse All" @click="collapseAll" /> </div> </template> <Column :expander="true" headerStyle="width: 3em" /> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> <template #expansion="slotProps"> <div class="car-details"> <div> <img :src="$publicUrl(\'demo/images/car/\' + slotProps.data.brand + \'.png\')" :alt="slotProps.data.brand"/> <div class="grid"> <div class="col-12">Vin: <b>{{slotProps.data.vin}}</b></div> <div class="col-12">Year: <b>{{slotProps.data.year}}</b></div> <div class="col-12">Brand: <b>{{slotProps.data.brand}}</b></div> <div class="col-12">Color: <b>{{slotProps.data.color}}</b></div> </div> </div> <Button icon="pi pi-search"></Button> </div> </template> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { cars: null, expandedRows: [] } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); }, methods: { onRowExpand(event) { this.$toast.add({severity: 'info', summary: 'Row Expanded', detail: 'Vin: ' + event.data.vin, life: 3000}); }, onRowCollapse(event) { this.$toast.add({severity: 'success', summary: 'Row Collapsed', detail: 'Vin: ' + event.data.vin, life: 3000}); }, expandAll() { this.expandedRows = this.cars.filter(car => car.vin); this.$toast.add({severity: 'success', summary: 'All Rows Expanded', life: 3000}); }, collapseAll() { this.expandedRows = null; this.$toast.add({severity: 'success', summary: 'All Rows Collapsed', life: 3000}); } } } ")]),e("h5",[t._v("InCell Editing")]),e("p",[t._v("In cell editing provides a rapid and user friendly way to manipulate the data. The datatable provides a flexible API so that the editing behavior is implemented by the page author whether it utilizes v-model or vuex. ")]),e("p",[t._v("Individual cell editing is configured by setting the "),e("i",[t._v("editMode")]),t._v(" to "),e("b",[t._v("cell")]),t._v(", defining editors with the "),e("b",[t._v("editor")]),t._v(" template along with the "),e("i",[t._v("@cell-edit-complete")]),t._v(" event. The content of the editor defines how the editing is implemented. The editor template receives a clone of the row data and using "),e("i",[t._v("@cell-edit-complete")]),t._v(" event the new value can be updated to the model or cancelled. This also provides flexibility to apply conditional logic such as implementing validations.")]),e("CodeHighlight",[[t._v(' <h5>Cell Editing</h5> <DataTable :value="cars" editMode="cell" @cell-edit-complete="onCellEditComplete"> <Column field="vin" header="Vin"> <template #editor="slotProps"> <InputText v-model="slotProps.data[slotProps.field]" /> </template> </Column> <Column field="year" header="Year"> <template #editor="slotProps"> <InputText v-model="slotProps.data[slotProps.field]" /> </template> </Column> <Column field="brand" header="Brand"> <template #editor="slotProps"> <Dropdown v-model="slotProps.data[\'brand\']" :options="brands" optionLabel="brand" optionValue="value" placeholder="Select a Brand"> <template #option="optionProps"> <div class="p-dropdown-car-option"> <img :alt="optionProps.option.brand" :src="$publicUrl(\'demo/images/car/\' + optionProps.option.brand + \'.png\')" /> <span>{{optionProps.option.brand}}</span> </div> </template> </Dropdown> </template> </Column> <Column field="color" header="Color"> <template #editor="slotProps"> <InputText v-model="slotProps.data[slotProps.field]" /> </template> </Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; import Vue from 'vue'; export default { data() { return { cars: null, brands: [ {brand: 'Audi', value: 'Audi'}, {brand: 'BMW', value: 'BMW'}, {brand: 'Fiat', value: 'Fiat'}, {brand: 'Honda', value: 'Honda'}, {brand: 'Jaguar', value: 'Jaguar'}, {brand: 'Mercedes', value: 'Mercedes'}, {brand: 'Renault', value: 'Renault'}, {brand: 'Volkswagen', value: 'Volkswagen'}, {brand: 'Volvo', value: 'Volvo'} ] } }, carService: null, created() { this.carService = new CarService(); }, methods: { onCellEditComplete(event) { let { data, newValue, field } = event; switch (event.field) { case 'year': if (this.isPositiveInteger(newValue)) data[field] = newValue; else event.preventDefault(); break; default: if (newValue.trim().length > 0) data[field] = newValue; else event.preventDefault(); break; } }, isPositiveInteger(val) { let str = String(val); str = str.trim(); if (!str) { return false; } str = str.replace(/^0+/, \"\") || \"0\"; var n = Math.floor(Number(str)); return n !== Infinity && String(n) === str && n >= 0; } }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); } } ")]),e("p",[t._v("Row Editing is specified by setting "),e("i",[t._v("cellEdit")]),t._v(" as "),e("b",[t._v("row")]),t._v(", defining "),e("i",[t._v("editingRows")]),t._v(" with the v-model directive to hold the reference of the editing rows, adding a row editor column to provide the editing controls and implementing "),e("i",[t._v("@row-edit-save")]),t._v(" to update the original row data. Note that since "),e("i",[t._v("editingRows")]),t._v(" is two-way binding enabled, you may use it to initially display one or more rows in editing more or programmatically toggle row editing.")]),e("CodeHighlight",[[t._v(' <h3>Row Editing</h3> <DataTable :value="cars" editMode="row" dataKey="vin" :editingRows.sync="editingRows" @row-edit-save="onRowEditSave"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"> <template #editor="slotProps"> <InputText v-model="slotProps.data[slotProps.field]" autofocus/> </template> </Column> <Column field="brand" header="Brand"> <template #editor="slotProps"> <InputText v-model="slotProps.data[slotProps.field]" /> </template> </Column> <Column field="color" header="Color"> <template #editor="slotProps"> <InputText v-model="slotProps.data[slotProps.field]" /> </template> </Column> <Column :rowEditor="true" headerStyle="width:7rem" bodyStyle="text-align:center"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; import Vue from 'vue'; export default { data() { return { cars: null, editingRows: [] } }, carService: null, created() { this.carService = new CarService(); }, methods: { onRowEditSave(event) { let { newData, index } = event; this.cars[index] = newData; }, }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); } } ")]),e("h5",[t._v("Column Resize")]),e("p",[t._v("Columns can be resized using drag drop by setting the "),e("i",[t._v("resizableColumns")]),t._v(' to true. There are two resize modes; "fit" and "expand". Fit is the default one and the overall table width does not change when a column is resized. In "expand" mode, table width also changes along with the column width. '),e("i",[t._v("column-resize-end")]),t._v(" is a callback that passes the resized column header and delta change as a parameter.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :resizableColumns="true" columnResizeMode="fit | expand"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("p",[t._v("It is important to note that when you need to change column widths, since table width is 100%, giving fixed pixel widths does not work well as browsers scale them, instead give percentage widths.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :resizableColumns="true" columnResizeMode="fit | expand"> <Column field="vin" header="Vin" headerStyle="width: 20%"></Column> <Column field="year" header="Year" headerStyle="width: 40%"></Column> <Column field="brand" header="Brand" headerStyle="width: 20%"></Column> <Column field="color" header="Color" headerStyle="width: 20%"></Column> </DataTable> ')]],2),e("h5",[t._v("Column Reorder")]),e("p",[t._v("Columns can be reordered using drag drop by setting the "),e("i",[t._v("reorderableColumns")]),t._v(" to true. "),e("i",[t._v("column-reorder")]),t._v(" is a callback that is invoked when a column is reordered. DataTable keeps the column order state internally using keys that identifies a column using the field property. If the column has no field, use columnKey instead as it is mandatory for columns to have unique keys when reordering is enabled.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :reorderableColumns="true"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("h5",[t._v("Row Reorder")]),e("p",[t._v("Data can be reordered using drag drop by adding a reorder column that will display an icon as a drag handle along with the "),e("i",[t._v("row-reorder")]),t._v(" event which is "),e("b",[t._v("mandatory")]),t._v(" to update the new order. Note that the reorder icon can be customized using "),e("i",[t._v("rowReorderIcon")]),t._v(" of the column component.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" @row-reorder="onRowReorder"> <Column :rowReorder="true" headerStyle="width: 3em" /> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { cars: null } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); }, methods: { onRowReorder(event) { //update new order this.cars = event.value; } } } ")]),e("h5",[t._v("Row Group")]),e("p",[t._v('Row Grouping comes in two modes, in "subheader" mode rows are grouped by a header row along with an optional group footer. In addition, the groups can be made toggleable by enabling '),e("i",[t._v("expandableRowGroups")]),t._v(' as true. On the other hand, the "rowspan" mode uses rowspans instead of a header to group rows. '),e("i",[t._v("groupRowsBy")]),t._v(' property defines the field to use in row grouping. Multiple row grouping is available in "rowspan" mode by specifying the '),e("i",[t._v("groupRowsBy")]),t._v(" as an array of fields.")]),e("p",[t._v("Example below demonstrates the all grouping alternatives. Note that data needs to be sorted for grouping which can also be done by the table itself by speficying the sort properties.")]),e("CodeHighlight",[[t._v(' <h3>Subheader Grouping</h3> <DataTable :value="cars" rowGroupMode="subheader" groupRowsBy="brand" sortMode="single" sortField="brand" :sortOrder="1"> <Column field="brand" header="Brand"></Column> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="color" header="Color"></Column> <Column field="price" header="Price"></Column> <template #groupheader="slotProps"> <span>{{slotProps.data.brand}}</span> </template> <template #groupfooter="slotProps"> <td colspan="3" style="text-align: right">Total Price</td> <td>{{calculateGroupTotal(slotProps.data.brand)}}</td> </template> </DataTable> <h3>Expandable Row Groups</h3> <DataTable :value="cars" rowGroupMode="subheader" groupRowsBy="brand" sortMode="single" sortField="brand" :sortOrder="1" :expandableRowGroups="true" :expandedRowGroups.sync="expandedRowGroups" @rowgroup-expand="onRowExpand" @rowgroup-collapse="onRowCollapse"> <Column field="brand" header="Brand"></Column> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="color" header="Color"></Column> <Column field="price" header="Price"></Column> <template #groupheader="slotProps"> <span>{{slotProps.data.brand}}</span> </template> <template #groupfooter="slotProps"> <td colspan="3" style="text-align: right">Total Price</td> <td>{{calculateGroupTotal(slotProps.data.brand)}}</td> </template> </DataTable> <h3>RowSpan Grouping</h3> <DataTable :value="cars" rowGroupMode="rowspan" groupRowsBy="brand" sortMode="single" sortField="brand" :sortOrder="1"> <Column header="#" headerStyle="width:3em"> <template #body="slotProps"> {{slotProps.index}} </template> </Column> <Column field="brand" header="Brand"></Column> <Column field="year" header="Year"></Column> <Column field="vin" header="Vin"></Column> <Column field="color" header="Color"></Column> <Column field="price" header="Price"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { cars: null, expandedRowGroups: null } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsMedium().then(data => this.cars = data); }, methods: { onRowGroupExpand(event) { this.$toast.add({severity: 'info', summary: 'Row Group Expanded', detail: 'Value: ' + event.data, life: 3000}); }, onRowGroupCollapse(event) { this.$toast.add({severity: 'success', summary: 'Row Group Collapsed', detail: 'Value: ' + event.data, life: 3000}); }, calculateGroupTotal(brand) { let total = 0; if (this.cars) { for (let car of this.cars) { if (car.brand === brand) { total += car.price; } } } return total; } } } ")]),e("h5",[t._v("Data Export")]),e("p",[t._v("DataTable can export its data in CSV format using "),e("i",[t._v("exportCSV()")]),t._v(" method.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" ref="dt"> <template #header> <div style="text-align: left"> <Button icon="pi pi-external-link" label="Export" @click="exportCSV($event)" /> </div> </template> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { cars: null } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); }, methods: { exportCSV() { this.$refs.dt.exportCSV(); } } } ")]),e("h5",[t._v("TableState")]),e("p",[t._v("Stateful table allows keeping the state such as page, sort and filtering either at local storage or session storage so that when the page is visited again, table would render the data using its last settings. Enabling state is easy as defining a unique "),e("i",[t._v("stateKey")]),t._v(", the storage to keep the state is defined with the "),e("i",[t._v("stateStorage")]),t._v(" property that accepts session for sessionStorage and local for localStorage. Currently following features are supported by TableState; paging, sorting, filtering, column resizing, column reordering, row expansion, row group expansion and row selection. ")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :paginator="true" :rows="10" :filters.sync="filters" stateStorage="session" stateKey="dt-state-demo-session" :selection.sync="selectedCar" selectionMode="single" dataKey="vin"> <template #header> <div style="text-align: right"> <i class="pi pi-search" style="margin: 4px 4px 0px 0px;"></i> <InputText v-model="filters[\'global\']" placeholder="Global Search" size="50" /> </div> </template> <Column field="vin" header="Vin" filterMatchMode="startsWith" :sortable="true"> <template #filter> <InputText type="text" v-model="filters[\'vin\']" class="p-column-filter" placeholder="Starts with" /> </template> </Column> <Column field="year" header="Year" filterMatchMode="contains" :sortable="true"> <template #filter> <InputText type="text" v-model="filters[\'year\']" class="p-column-filter" placeholder="Contains" /> </template> </Column> <Column field="brand" header="Brand" filterMatchMode="equals" :sortable="true"> <template #filter> <Dropdown v-model="filters[\'brand\']" :options="brands" optionLabel="brand" optionValue="value" placeholder="Select a Brand" class="p-column-filter" :showClear="true"> <template #option="slotProps"> <div class="p-dropdown-car-option"> <img :alt="slotProps.option.brand" :src="$publicUrl(\'demo/images/car/\' + slotProps.option.brand + \'.png\')" /> <span>{{slotProps.option.brand}}</span> </div> </template> </Dropdown> </template> </Column> <Column field="color" header="Color" filterMatchMode="in" :sortable="true"> <template #filter> <MultiSelect v-model="filters[\'color\']" :options="colors" optionLabel="name" optionValue="value" placeholder="Select a Color" /> </template> </Column> <template #empty> No records found. </template> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { filters: {}, brands: [ {brand: 'Audi', value: 'Audi'}, {brand: 'BMW', value: 'BMW'}, {brand: 'Fiat', value: 'Fiat'}, {brand: 'Honda', value: 'Honda'}, {brand: 'Jaguar', value: 'Jaguar'}, {brand: 'Mercedes', value: 'Mercedes'}, {brand: 'Renault', value: 'Renault'}, {brand: 'Volkswagen', value: 'Volkswagen'}, {brand: 'Volvo', value: 'Volvo'} ], colors: [ {name: 'White', value: 'White'}, {name: 'Green', value: 'Green'}, {name: 'Silver', value: 'Silver'}, {name: 'Black', value: 'Black'}, {name: 'Red', value: 'Red'}, {name: 'Maroon', value: 'Maroon'}, {name: 'Brown', value: 'Brown'}, {name: 'Orange', value: 'Orange'}, {name: 'Blue', value: 'Blue'} ], selectedCar: null, cars: null } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsMedium().then(data => this.cars = data); } } ")]),e("h5",[t._v("ContextMenu")]),e("p",[t._v("DataTable provides exclusive integration with the ContextMenu component using, "),e("i",[t._v("contextMenu")]),t._v(", "),e("i",[t._v("contextMenuSelection")]),t._v(" property along with the "),e("i",[t._v("row-contextmenu")]),t._v(" event.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" contextMenu :contextMenuSelection.sync="selectedCar" @row-contextmenu="onRowContextMenu"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> <ContextMenu :model="menuModel" ref="cm" /> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { cars: null, selectedCar: null, menuModel: [ {label: 'View', icon: 'pi pi-fw pi-search', command: () => this.viewCar(this.selectedCar)}, {label: 'Delete', icon: 'pi pi-fw pi-times', command: () => this.deleteCar(this.selectedCar)} ] } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); }, methods: { onRowContextMenu(event) { this.$refs.cm.show(event.originalEvent); }, viewCar(car) { this.$toast.add({severity: 'info', summary: 'Car Selected', detail: car.vin + ' - ' + car.brand}); }, deleteCar(car) { this.cars = this.cars.filter((c) => c.vin !== car.vin); this.$toast.add({severity: 'info', summary: 'Car Deleted', detail: car.vin + ' - ' + car.brand}); this.selectedCar = null; } } } ")]),e("h5",[t._v("Empty Message")]),e("p",[t._v("When there is no data, you may use the "),e("i",[t._v("empty")]),t._v(" template to display a message.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars"> <template #empty> No records found </template> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("h5",[t._v("Loading")]),e("p",[t._v("A loading status indicator can be displayed when the "),e("i",[t._v("loading")]),t._v(" property is enabled. The icon is customized through "),e("i",[t._v("loadingIcon")]),t._v(" property. Additionally an option loading template is available to render as the body until the data is loaded.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :loading="loading"> <template #loading> Loading records, please wait... </template> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year"></Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { loading: false, cars: null } }, datasource: null, carService: null, created() { this.carService = new CarService(); }, mounted() { this.loading = true; this.carService.getCarsLarge().then(data => { this.cars = data this.loading = false; }); } } ")]),e("h5",[t._v("Responsive")]),e("p",[t._v("DataTable responsive layout can be achieved in two ways; first approach is displaying a horizontal scrollbar for smaller screens and second one is defining a breakpoint to display the cells of a row as stacked. Scrollable tables use the scroll layout approach internally and do not require additional configuration.")]),e("h6",[t._v("Scroll Layout")]),e("p",[t._v("Set "),e("i",[t._v("responsiveLayout")]),t._v(" to scroll to enabled this layout. Note that, when scroll mode is enabled table-layout automatically switches to auto from fixed as a result table widths are likely to differ and resizable columns are not supported. Read more about "),e("a",{attrs:{href:"https://www.w3schools.com/cssref/pr_tab_table-layout.asp"}},[t._v("table-layout")]),t._v(" for more details.")]),e("CodeHighlight",[[t._v(' <DataTable :value="products" responsiveLayout="scroll"> </DataTable> ')]],2),e("h6",[t._v("Stack Layout")]),e("p",[t._v("In stack layout, columns are displayed as stacked after a certain breakpoint. Default is '960px'.")]),e("CodeHighlight",[[t._v(' <DataTable :value="products" responsiveLayout="stack" breakpoint="640px"> </DataTable> ')]],2),e("h5",[t._v("Row and Cell Styling")]),e("p",[t._v("Certain rows or cells can easily be styled based on conditions. Cell styling is implemented with templating whereas row styling utilizes the "),e("i",[t._v("rowClass")]),t._v(" property which takes the row data as a parameter and returns the style class as a string.")]),e("CodeHighlight",[[t._v(' <DataTable :value="cars" :rowClass="rowClass"> <Column field="vin" header="Vin"></Column> <Column field="year" header="Year" bodyStyle="padding: 0"> <template #body="slotProps"> <div :class="[\'year-cell\', {\'old-car\': slotProps.data.year < 2010}]"> {{slotProps.data.year}} </div> </template> </Column> <Column field="brand" header="Brand"></Column> <Column field="color" header="Color"></Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import CarService from '../../service/CarService'; export default { data() { return { columns: null, cars: null } }, carService: null, created() { this.carService = new CarService(); }, mounted() { this.carService.getCarsSmall().then(data => this.cars = data); }, methods: { rowClass(data) { return data.color === 'Orange' ? 'orange-car': null; } } } ")]),e("CodeHighlight",{attrs:{lang:"css"}},[t._v(" .year-cell { padding: 0.429em 0.857rem; &.old-car { background-color: #41b783; font-weight: 700; color: #ffffff; } } .orange-car { background-color: #344b5f !important; color: #ffffff !important; } ")]),e("h5",[t._v("Properties")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Type")]),e("th",[t._v("Default")]),e("th",[t._v("Description")])])]),e("tbody",[e("tr",[e("td",[t._v("value")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("An array of objects to display.")])]),e("tr",[e("td",[t._v("dataKey")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Name of the field that uniquely identifies the a record in the data.")])]),e("tr",[e("td",[t._v("rows")]),e("td",[t._v("number")]),e("td",[t._v("null")]),e("td",[t._v("Number of rows to display per page.")])]),e("tr",[e("td",[t._v("first")]),e("td",[t._v("number")]),e("td",[t._v("0")]),e("td",[t._v("Index of the first row to be displayed.")])]),e("tr",[e("td",[t._v("totalRecords")]),e("td",[t._v("number")]),e("td",[t._v("null")]),e("td",[t._v("Number of total records, defaults to length of value when not defined.")])]),e("tr",[e("td",[t._v("paginator")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When specified as true, enables the pagination.")])]),e("tr",[e("td",[t._v("paginatorPosition")]),e("td",[t._v("string")]),e("td",[t._v("bottom")]),e("td",[t._v('Position of the paginator, options are "top","bottom" or "both".')])]),e("tr",[e("td",[t._v("alwaysShowPaginator")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Whether to show it even there is only one page.")])]),e("tr",[e("td",[t._v("paginatorTemplate")]),e("td",[t._v("string")]),e("td",[t._v("FirstPageLink PrevPageLink PageLinks "),e("br"),t._v(" NextPageLink LastPageLink RowsPerPageDropdown")]),e("td",[t._v("Template of the paginator. See the "),e("router-link",{attrs:{to:"/paginator"}},[t._v("Paginator")]),t._v(" for all available options.")],1)]),e("tr",[e("td",[t._v("pageLinkSize")]),e("td",[t._v("number")]),e("td",[t._v("5")]),e("td",[t._v("Number of page links to display.")])]),e("tr",[e("td",[t._v("rowsPerPageOptions")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("Array of integer values to display inside rows per page dropdown.")])]),e("tr",[e("td",[t._v("currentPageReportTemplate")]),e("td",[t._v("string")]),e("td",[t._v("({currentPage} of {totalPages})")]),e("td",[t._v("Template of the current page report element.")])]),e("tr",[e("td",[t._v("lazy")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Defines if data is loaded and interacted with in lazy manner.")])]),e("tr",[e("td",[t._v("loading")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Displays a loader to indicate data load is in progress.")])]),e("tr",[e("td",[t._v("loadingIcon")]),e("td",[t._v("string")]),e("td",[t._v("pi pi-spinner")]),e("td",[t._v("The icon to show while indicating data load is in progress.")])]),e("tr",[e("td",[t._v("sortField")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Property name or a getter function of a row data used for sorting by default")])]),e("tr",[e("td",[t._v("sortOrder")]),e("td",[t._v("number")]),e("td",[t._v("null")]),e("td",[t._v("Order to sort the data by default.")])]),e("tr",[e("td",[t._v("defaultSortOrder")]),e("td",[t._v("number")]),e("td",[t._v("1")]),e("td",[t._v("Default sort order of an unsorted column.")])]),e("tr",[e("td",[t._v("multiSortMeta")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("An array of SortMeta objects to sort the data by default in multiple sort mode.")])]),e("tr",[e("td",[t._v("sortMode")]),e("td",[t._v("string")]),e("td",[t._v("single")]),e("td",[t._v("Defines whether sorting works on single column or on multiple columns.")])]),e("tr",[e("td",[t._v("removableSort")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When enabled, columns can have an un-sorted state.")])]),e("tr",[e("td",[t._v("filters")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Filters object with key-value pairs to define the filters.")])]),e("tr",[e("td",[t._v("filterDisplay")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v('Layout of the filter elements, valid values are "row" and "menu".')])]),e("tr",[e("td",[t._v("filterLocale")]),e("td",[t._v("string")]),e("td",[t._v("undefined")]),e("td",[t._v("Locale to use in filtering. The default locale is the host environment's current locale.")])]),e("tr",[e("td",[t._v("selection")]),e("td",[t._v("any")]),e("td",[t._v("null")]),e("td",[t._v("Selected row in single mode or an array of values in multiple mode.")])]),e("tr",[e("td",[t._v("selectionMode")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v('Specifies the selection mode, valid values are "single" and "multiple".')])]),e("tr",[e("td",[t._v("compareSelectionBy")]),e("td",[t._v("string")]),e("td",[t._v("deepEquals")]),e("td",[t._v('Algorithm to define if a row is selected, valid values are "equals" that compares by reference and '),e("br"),t._v(' "deepEquals" that compares all fields.')])]),e("tr",[e("td",[t._v("metaKeySelection")]),e("td",[t._v("boolean")]),e("td",[t._v("true")]),e("td",[t._v("Defines whether metaKey is requred or not for the selection. "),e("br"),t._v(" When true metaKey needs to be pressed to select or unselect an item and "),e("br"),t._v(" when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.")])]),e("tr",[e("td",[t._v("contextMenu")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Enables context menu integration.")])]),e("tr",[e("td",[t._v("contextMenuSelection")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Selected row instance with the ContextMenu.")])]),e("tr",[e("td",[t._v("rowHover")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When enabled, background of the rows change on hover.")])]),e("tr",[e("td",[t._v("csvSeparator")]),e("td",[t._v("string")]),e("td",[t._v(",")]),e("td",[t._v("Character to use as the csv separator.")])]),e("tr",[e("td",[t._v("exportFilename")]),e("td",[t._v("string")]),e("td",[t._v("download")]),e("td",[t._v("Name of the exported file.")])]),e("tr",[e("td",[t._v("exportFunction")]),e("td",[t._v("function")]),e("td",[t._v("download")]),e("td",[t._v("Custom function to export data.")])]),e("tr",[e("td",[t._v("autoLayout")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether the cell widths scale according to their content or not. Does not apply to scrollable tables.")])]),e("tr",[e("td",[t._v("resizableColumns")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When enabled, columns can be resized using drag and drop.")])]),e("tr",[e("td",[t._v("columnResizeMode")]),e("td",[t._v("string")]),e("td",[t._v("fit")]),e("td",[t._v("Defines whether the overall table width should change on column resize, "),e("br"),t._v(' valid values are "fit" and "expand".')])]),e("tr",[e("td",[t._v("reorderableColumns")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When enabled, columns can be reordered using drag and drop.")])]),e("tr",[e("td",[t._v("expandedRows")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("A collection of row data display as expanded.")])]),e("tr",[e("td",[t._v("expandedRowIcon")]),e("td",[t._v("string")]),e("td",[t._v("pi-chevron-down")]),e("td",[t._v("Icon of the row toggler to display the row as expanded.")])]),e("tr",[e("td",[t._v("collapsedRowIcon")]),e("td",[t._v("string")]),e("td",[t._v("pi-chevron-right")]),e("td",[t._v("Icon of the row toggler to display the row as collapsed.")])]),e("tr",[e("td",[t._v("rowGroupMode")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v('Defines the row group mode, valid options are "subheader" and "rowspan".')])]),e("tr",[e("td",[t._v("groupRowsBy")]),e("td",[t._v("string|array")]),e("td",[t._v("null")]),e("td",[t._v("One or more field names to use in row grouping.")])]),e("tr",[e("td",[t._v("expandableRowGroups")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether the row groups can be expandable.")])]),e("tr",[e("td",[t._v("expandedRowGroups")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("An array of group field values whose groups would be rendered as expanded.")])]),e("tr",[e("td",[t._v("stateStorage")]),e("td",[t._v("string")]),e("td",[t._v("session")]),e("td",[t._v('Defines where a stateful table keeps its state, valid values are "session" for sessionStorage and "local" for localStorage.')])]),e("tr",[e("td",[t._v("stateKey")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Unique identifier of a stateful table to use in state storage.")])]),e("tr",[e("td",[t._v("editMode")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v('Defines the incell editing mode, valid options are "cell" and "row".')])]),e("tr",[e("td",[t._v("editingRows")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("A collection of rows to represent the current editing data in row edit mode.")])]),e("tr",[e("td",[t._v("rowClass")]),e("td",[t._v("function")]),e("td",[t._v("null")]),e("td",[t._v("A function that takes the row data as a parameter and returns a string to apply a particular class for the row.")])]),e("tr",[e("td",[t._v("rowStyle")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("A function that takes the row data as a parameter and returns the inline style for the corresponding row.")])]),e("tr",[e("td",[t._v("scrollable")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("When specified, enables horizontal and/or vertical scrolling.")])]),e("tr",[e("td",[t._v("scrollDirection")]),e("td",[t._v("string")]),e("td",[t._v("vertical")]),e("td",[t._v('Orientation of the scrolling, options are "vertical", "horizontal" and "both".')])]),e("tr",[e("td",[t._v("scrollHeight")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v('Height of the scroll viewport in fixed pixels or the "flex" keyword for a dynamic size.')])]),e("tr",[e("td",[t._v("frozenValue")]),e("td",[t._v("array")]),e("td",[t._v("null")]),e("td",[t._v("Items of the frozen part in scrollable DataTable.")])]),e("tr",[e("td",[t._v("responsiveLayout")]),e("td",[t._v("string")]),e("td",[t._v("stack")]),e("td",[t._v('Defines the responsive mode, valid options are "stack" and "scroll".')])]),e("tr",[e("td",[t._v("breakpoint")]),e("td",[t._v("string")]),e("td",[t._v("960px")]),e("td",[t._v("The breakpoint to define the maximum width boundary when using stack responsive layout.")])]),e("tr",[e("td",[t._v("showGridlines")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether to show grid lines between cells.")])]),e("tr",[e("td",[t._v("stripedRows")]),e("td",[t._v("boolean")]),e("td",[t._v("false")]),e("td",[t._v("Whether to displays rows with alternating colors.")])]),e("tr",[e("td",[t._v("tableStyle")]),e("td",[t._v("object")]),e("td",[t._v("null")]),e("td",[t._v("Inline style of the table element.")])]),e("tr",[e("td",[t._v("tableClass")]),e("td",[t._v("string")]),e("td",[t._v("null")]),e("td",[t._v("Style class of the table element.")])])])])]),e("h5",[t._v("Events")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Parameters")]),e("th",[t._v("Description")])])]),e("tbody",[e("tr",[e("td",[t._v("page")]),e("td",[t._v("event.originalEvent: Browser event "),e("br"),t._v(" event.page: New page number "),e("br"),t._v(" event.pageCount: Total page count "),e("br"),t._v(" event.first: Index of first record "),e("br"),t._v(" event.rows: Number of rows to display in new page "),e("br"),t._v(" event.sortField: Field to sort against "),e("br"),t._v(" event.sortOrder: Sort order as integer "),e("br"),t._v(" event.multiSortMeta: MultiSort metadata "),e("br"),t._v(" event.filters: Collection of active filters "),e("br"),t._v(" event.filterMatchModes: Match modes per field ")]),e("td",[t._v("Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation.")])]),e("tr",[e("td",[t._v("sort")]),e("td",[t._v("event.originalEvent: Browser event "),e("br"),t._v(" event.first: Index of first record "),e("br"),t._v(" event.rows: Number of rows to display in new page "),e("br"),t._v(" event.sortField: Field to sort against "),e("br"),t._v(" event.sortOrder: Sort order as integer "),e("br"),t._v(" event.multiSortMeta: MultiSort metadata "),e("br"),t._v(" event.filters: Collection of active filters "),e("br"),t._v(" event.filterMatchModes: Match modes per field ")]),e("td",[t._v("Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation.")])]),e("tr",[e("td",[t._v("filter")]),e("td",[t._v("event.originalEvent: Browser event "),e("br"),t._v(" event.first: Index of first record "),e("br"),t._v(" event.rows: Number of rows to display in new page "),e("br"),t._v(" event.sortField: Field to sort against "),e("br"),t._v(" event.sortOrder: Sort order as integer "),e("br"),t._v(" event.multiSortMeta: MultiSort metadata "),e("br"),t._v(" event.filters: Collection of active filters "),e("br"),t._v(" event.filteredValue: Filtered collection (non-lazy only)"),e("br")]),e("td",[t._v("Event to emit after filtering, not triggered in lazy mode.")])]),e("tr",[e("td",[t._v("value-change")]),e("td",[t._v("value: Value displayed by the table")]),e("td",[t._v("Callback to invoke after filtering, sorting, pagination and cell editing to pass the rendered value.")])]),e("tr",[e("td",[t._v("row-click")]),e("td",[t._v("event.originalEvent: Browser event. "),e("br"),t._v(" event.data: Selected row data. "),e("br"),t._v(" event.index: Row index.")]),e("td",[t._v("Callback to invoke when a row is clicked.")])]),e("tr",[e("td",[t._v("row-dblclick")]),e("td",[t._v("event.originalEvent: Browser event. "),e("br"),t._v(" event.data: Selected row data. "),e("br"),t._v(" event.index: Row index.")]),e("td",[t._v("Callback to invoke when a row is double clicked.")])]),e("tr",[e("td",[t._v("row-contextmenu")]),e("td",[t._v("event.originalEvent: Browser event. "),e("br"),t._v(" event.data: Selected row data. "),e("br"),t._v(" event.index: Row index.")]),e("td",[t._v("Callback to invoke when a row is selected with a ContextMenu.")])]),e("tr",[e("td",[t._v("row-select")]),e("td",[t._v("event.originalEvent: Browser event. "),e("br"),t._v(" event.data: Selected row data. "),e("br"),t._v(" event.index: Row index. "),e("br"),t._v(' event.type: Type of the selection, valid values are "row", "radio" or "checkbox".')]),e("td",[t._v("Callback to invoke when a row is selected.")])]),e("tr",[e("td",[t._v("row-unselect")]),e("td",[t._v("event.originalEvent: Browser event. "),e("br"),t._v(" event.data: Unselected row data. "),e("br"),t._v(" event.index: Row index. "),e("br"),t._v(' event.type: Type of the selection, valid values are "row", "radio" or "checkbox".')]),e("td",[t._v("Callback to invoke when a row is unselected.")])]),e("tr",[e("td",[t._v("row-select-all")]),e("td",[t._v("event.originalEvent: Browser event. "),e("br"),t._v(" event.data: Selected dataset")]),e("td",[t._v("Fired when header checkbox is checked.")])]),e("tr",[e("td",[t._v("row-unselect-all")]),e("td",[t._v("event.originalEvent: Browser event.")]),e("td",[t._v("Fired when header checkbox is unchecked.")])]),e("tr",[e("td",[t._v("column-resize-end")]),e("td",[t._v("event.element: DOM element of the resized column."),e("br"),t._v(" event.delta: Change in column width")]),e("td",[t._v("Callback to invoke when a column is resized.")])]),e("tr",[e("td",[t._v("column-reorder")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.dragIndex: Index of the dragged column"),e("br"),t._v(" event.dropIndex: Index of the dropped column")]),e("td",[t._v("Callback to invoke when a column is reordered.")])]),e("tr",[e("td",[t._v("row-reorder")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.dragIndex: Index of the dragged row"),e("br"),t._v(" event.dropIndex: Index of the dropped row"),e("br"),t._v(" value: Reordered value")]),e("td",[t._v("Callback to invoke when a row is reordered.")])]),e("tr",[e("td",[t._v("row-expand")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Expanded row data.")]),e("td",[t._v("Callback to invoke when a row is expanded.")])]),e("tr",[e("td",[t._v("row-collapse")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Collapsed row data.")]),e("td",[t._v("Callback to invoke when a row is collapsed.")])]),e("tr",[e("td",[t._v("rowgroup-expand")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Expanded group value.")]),e("td",[t._v("Callback to invoke when a row group is expanded.")])]),e("tr",[e("td",[t._v("rowgroup-collapse")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Collapsed group value.")]),e("td",[t._v("Callback to invoke when a row group is collapsed.")])]),e("tr",[e("td",[t._v("cell-edit-init")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Row data to edit. "),e("br"),t._v(" event.field: Field name of the row data. "),e("br"),t._v(" event.index: Index of the row data to edit. "),e("br")]),e("td",[t._v("Callback to invoke when cell edit is initiated.")])]),e("tr",[e("td",[t._v("cell-edit-complete")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Row data to edit. "),e("br"),t._v(" event.newData: New row data after editing. "),e("br"),t._v(" event.value: Field value of row data to edit. "),e("br"),t._v(" event.newValue: Field value of new row data after editing. "),e("br"),t._v(" event.field: Field name of the row data. "),e("br"),t._v(" event.index: Index of the row data to edit. "),e("br"),t._v(' event.type: Type of completion such as "enter", "outside" or "tab". '),e("br")]),e("td",[t._v("Callback to invoke when cell edit is completed.")])]),e("tr",[e("td",[t._v("cell-edit-cancel")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Row data to edit. "),e("br"),t._v(" event.field: Field name of the row data. "),e("br"),t._v(" event.index: Index of the row data to edit. "),e("br")]),e("td",[t._v("Callback to invoke when cell edit is cancelled with escape key.")])]),e("tr",[e("td",[t._v("row-edit-init")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Row data to edit. "),e("br"),t._v(" event.newData: New row data after editing. "),e("br"),t._v(" event.field: Field name of the row data. "),e("br"),t._v(" event.index: Index of the row data to edit. "),e("br")]),e("td",[t._v("Callback to invoke when row edit is initiated.")])]),e("tr",[e("td",[t._v("row-edit-save")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Row data to edit. "),e("br"),t._v(" event.newData: New row data after editing. "),e("br"),t._v(" event.field: Field name of the row data. "),e("br"),t._v(" event.index: Index of the row data to edit. "),e("br")]),e("td",[t._v("Callback to invoke when row edit is saved.")])]),e("tr",[e("td",[t._v("row-edit-cancel")]),e("td",[t._v("event.originalEvent: Browser event"),e("br"),t._v(" event.data: Row data to edit. "),e("br"),t._v(" event.newData: New row data after editing. "),e("br"),t._v(" event.field: Field name of the row data. "),e("br"),t._v(" event.index: Index of the row data to edit. "),e("br")]),e("td",[t._v("Callback to invoke when row edit is cancelled.")])]),e("tr",[e("td",[t._v("state-save")]),e("td",[t._v("event.first: Index of first record "),e("br"),t._v(" event.rows: Number of rows to display in new page "),e("br"),t._v(" event.sortField: Field to sort against "),e("br"),t._v(" event.sortOrder: Sort order as integer "),e("br"),t._v(" event.multiSortMeta: MultiSort metadata "),e("br"),t._v(" event.filters: Collection of active filters "),e("br"),t._v(" event.columWidths: Comma separated list of column widths "),e("br"),t._v(" event.columnOrder: Order of the columns "),e("br"),t._v(" event.expandedRows: Instances of rows in expanded state "),e("br"),t._v(" event.expandedRowKeys: Keys of rows in expanded state "),e("br"),t._v(" event.expandedRowGroups: Instances of row groups in expanded state "),e("br"),t._v(" event.selection: Selected rows "),e("br"),t._v(" event.selectionKeys: Keys of selected rows "),e("br")]),e("td",[t._v("Invoked when a stateful table saves the state.")])]),e("tr",[e("td",[t._v("state-restore")]),e("td",[t._v("event.first: Index of first record "),e("br"),t._v(" event.rows: Number of rows to display in new page "),e("br"),t._v(" event.sortField: Field to sort against "),e("br"),t._v(" event.sortOrder: Sort order as integer "),e("br"),t._v(" event.multiSortMeta: MultiSort metadata "),e("br"),t._v(" event.filters: Collection of active filters "),e("br"),t._v(" event.columWidths: Comma separated list of column widths "),e("br"),t._v(" event.columnOrder: Order of the columns "),e("br"),t._v(" event.expandedRows: Instances of rows in expanded state "),e("br"),t._v(" event.expandedRowKeys: Keys of rows in expanded state "),e("br"),t._v(" event.expandedRowGroups: Instances of row groups in expanded state "),e("br"),t._v(" event.selection: Selected rows "),e("br"),t._v(" event.selectionKeys: Keys of selected rows "),e("br")]),e("td",[t._v("Invoked when a stateful table restores the state.")])])])])]),e("h5",[t._v("Methods")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Parameters")]),e("th",[t._v("Description")])])]),e("tbody",[e("tr",[e("td",[t._v("exportCSV")]),e("td",[t._v("-")]),e("td",[t._v("Exports the data to CSV format.")])])])])]),e("h5",[t._v("Slots")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Parameters")])])]),e("tbody",[e("tr",[e("td",[t._v("header")]),e("td",[t._v("column: Column node")])]),e("tr",[e("td",[t._v("paginatorstart")]),e("td",[t._v("-")])]),e("tr",[e("td",[t._v("paginatorend")]),e("td",[t._v("-")])]),e("tr",[e("td",[t._v("footer")]),e("td",[t._v("column: Column node")])]),e("tr",[e("td",[t._v("groupheader")]),e("td",[t._v("data: Row data "),e("br"),t._v(" index: Row index")])]),e("tr",[e("td",[t._v("groupfooter")]),e("td",[t._v("data: Row data "),e("br"),t._v(" index: Row index")])]),e("tr",[e("td",[t._v("expansion")]),e("td",[t._v("data: Row data "),e("br"),t._v(" index: Row index")])]),e("tr",[e("td",[t._v("empty")]),e("td",[t._v("-")])]),e("tr",[e("td",[t._v("loading")]),e("td",[t._v("-")])])])])]),e("h5",[t._v("Styling")]),e("p",[t._v("Any property as style and class are passed to the main container element. Following are the additional properties to configure the component.")]),e("div",{staticClass:"doc-tablewrapper"},[e("table",{staticClass:"doc-table"},[e("thead",[e("tr",[e("th",[t._v("Name")]),e("th",[t._v("Element")])])]),e("tbody",[e("tr",[e("td",[t._v("p-datatable")]),e("td",[t._v("Container element.")])]),e("tr",[e("td",[t._v("p-datatable-scrollable")]),e("td",[t._v("Container element when table is scrollable.")])]),e("tr",[e("td",[t._v("p-datatable-header")]),e("td",[t._v("Header section.")])]),e("tr",[e("td",[t._v("p-datatable-footer")]),e("td",[t._v("Footer section.")])]),e("tr",[e("td",[t._v("p-datatable-wrapper")]),e("td",[t._v("Wrapper of table element.")])]),e("tr",[e("td",[t._v("p-datatable-table")]),e("td",[t._v("Table element.")])]),e("tr",[e("td",[t._v("p-datatable-thead")]),e("td",[t._v("Table thead element.")])]),e("tr",[e("td",[t._v("p-datatable-tbody")]),e("td",[t._v("Table tbody element.")])]),e("tr",[e("td",[t._v("p-datatable-tfoot")]),e("td",[t._v("Table tfoot element.")])]),e("tr",[e("td",[t._v("p-column-title")]),e("td",[t._v("Title of a column.")])]),e("tr",[e("td",[t._v("p-sortable-column")]),e("td",[t._v("Sortable column header.")])]),e("tr",[e("td",[t._v("p-frozen-column")]),e("td",[t._v("Frozen column header.")])]),e("tr",[e("td",[t._v("p-rowgroup-header")]),e("td",[t._v("Header of a rowgroup.")])]),e("tr",[e("td",[t._v("p-rowgroup-footer")]),e("td",[t._v("Footer of a rowgroup.")])]),e("tr",[e("td",[t._v("p-datatable-row-expansion")]),e("td",[t._v("Expanded row content.")])]),e("tr",[e("td",[t._v("p-row-toggler")]),e("td",[t._v("Toggle element for row expansion.")])]),e("tr",[e("td",[t._v("p-datatable-emptymessage")]),e("td",[t._v("Cell containing the empty message.")])]),e("tr",[e("td",[t._v("p-row-editor-init")]),e("td",[t._v("Pencil button of row editor.")])]),e("tr",[e("td",[t._v("p-row-editor-init")]),e("td",[t._v("Save button of row editor.")])]),e("tr",[e("td",[t._v("p-row-editor-init")]),e("td",[t._v("Cancel button of row editor.")])])])])]),e("h5",[t._v("Dependencies")]),e("p",[t._v("None.")])],1),e("TabPanel",{attrs:{header:"Source"}},[e("a",{staticClass:"btn-viewsource",attrs:{href:"https://github.com/nangongpo/primevue2/tree/main/src/views/datatabledemo",target:"_blank",rel:"noopener noreferrer"}},[e("span",[t._v("View on GitHub")])]),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(' { "data": [ { "id": 1000, "name": "James Butt", "country": { "name": "Montserrat", "code": "ms" }, "company": "Benton, John B Jr", "date": "2018-08-13", "status": "negotiation", "activity": 96, "representative": { "name": "Ioni Bowcher", "image": "ionibowcher.png" } }, /... ')]),e("CodeHighlight",[[t._v(' <DataTable :value="customers" :paginator="true" class="p-datatable-customers" :rows="10" dataKey="id" :rowHover="true" :selection.sync="selectedCustomers" :filters.sync="filters" filterDisplay="menu" :loading="loading" paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown" :rowsPerPageOptions="[10,25,50]" currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries" :globalFilterFields="[\'name\',\'country.name\',\'representative.name\',\'status\']" responsiveLayout="scroll"> <template #header> <div class="flex justify-content-between align-items-center"> <h5 class="m-0">Customers</h5> <span class="p-input-icon-left"> <i class="pi pi-search" /> <InputText v-model="filters[\'global\'].value" placeholder="Keyword Search" /> </span> </div> </template> <template #empty> No customers found. </template> <template #loading> Loading customers data. Please wait. </template> <Column selectionMode="multiple" :styles="{\'min-width\': \'3rem\'}"></Column> <Column field="name" header="Name" sortable :styles="{\'min-width\': \'14rem\'}"> <template #body="{data}"> {{data.name}} </template> <template #filter="{filterModel}"> <InputText type="text" v-model="filterModel.value" class="p-column-filter" placeholder="Search by name"/> </template> </Column> <Column field="country.name" header="Country" sortable filterMatchMode="contains" :styles="{\'min-width\': \'14rem\'}"> <template #body="{data}"> <img src="../../assets/images/flag_placeholder.png" :class="\'flag flag-\' + data.country.code" width="30" /> <span class="image-text">{{data.country.name}}</span> </template> <template #filter="{filterModel}"> <InputText type="text" v-model="filterModel.value" class="p-column-filter" placeholder="Search by country"/> </template> </Column> <Column header="Agent" sortable filterField="representative" sortField="representative.name" :showFilterMatchModes="false" :filterMenuStyle="{\'width\':\'14rem\'}" :styles="{\'min-width\': \'14rem\'}"> <template #body="{data}"> <img :alt="data.representative.name" :src="$publicUrl(\'demo/images/avatar/\' + data.representative.image)" width="32" style="vertical-align: middle" /> <span class="image-text">{{data.representative.name}}</span> </template> <template #filter="{filterModel}"> <div class="mb-3 font-bold">Agent Picker</div> <MultiSelect v-model="filterModel.value" :options="representatives" optionLabel="name" placeholder="Any" class="p-column-filter"> <template #option="slotProps"> <div class="p-multiselect-representative-option"> <img :alt="slotProps.option.name" :src="$publicUrl(\'demo/images/avatar/\' + slotProps.option.image)" width="32" style="vertical-align: middle" /> <span class="image-text">{{slotProps.option.name}}</span> </div> </template> </MultiSelect> </template> </Column> <Column field="date" header="Date" sortable dataType="date" :styles="{\'min-width\': \'8rem\'}"> <template #body="{data}"> {{formatDate(data.date)}} </template> <template #filter="{filterModel}"> <Calendar v-model="filterModel.value" dateFormat="mm/dd/yy" placeholder="mm/dd/yyyy" /> </template> </Column> <Column field="balance" header="Balance" sortable dataType="numeric" :styles="{\'min-width\': \'8rem\'}"> <template #body="{data}"> {{formatCurrency(data.balance)}} </template> <template #filter="{filterModel}"> <InputNumber v-model="filterModel.value" mode="currency" currency="USD" locale="en-US" /> </template> </Column> <Column field="status" header="Status" sortable :filterMenuStyle="{\'width\':\'14rem\'}" :styles="{\'min-width\': \'10rem\'}"> <template #body="{data}"> <span :class="\'customer-badge status-\' + data.status">{{data.status}}</span> </template> <template #filter="{filterModel}"> <Dropdown v-model="filterModel.value" :options="statuses" placeholder="Any" class="p-column-filter" :showClear="true"> <template #value="slotProps"> <span :class="\'customer-badge status-\' + slotProps.value">{{slotProps.value}}</span> </template> <template #option="slotProps"> <span :class="\'customer-badge status-\' + slotProps.option">{{slotProps.option}}</span> </template> </Dropdown> </template> </Column> <Column field="activity" header="Activity" sortable :showFilterMatchModes="false" :styles="{\'min-width\': \'10rem\'}"> <template #body="{data}"> <ProgressBar :value="data.activity" :showValue="false" /> </template> <template #filter="{filterModel}"> <Slider v-model="filterModel.value" range class="m-3"></Slider> <div class="flex align-items-center justify-content-between px-2"> <span>{{filterModel.value ? filterModel.value[0] : 0}}</span> <span>{{filterModel.value ? filterModel.value[1] : 100}}</span> </div> </template> </Column> <Column :headerStyle="{\'min-width\': \'4rem\', \'text-align\': \'center\'}" :bodyStyle="{\'text-align\': \'center\', overflow: \'visible\'}"> <template #body> <Button type="button" icon="pi pi-cog"></Button> </template> </Column> </DataTable> ')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[t._v(" import {FilterMatchMode,FilterOperator} from 'primevue2/api'; import CustomerService from '../../service/CustomerService'; export default { data() { return { customers: null, selectedCustomers: null, filters: { 'global': {value: null, matchMode: FilterMatchMode.CONTAINS}, 'name': {operator: FilterOperator.AND, constraints: [{value: null, matchMode: FilterMatchMode.STARTS_WITH}]}, 'country.name': {operator: FilterOperator.AND, constraints: [{value: null, matchMode: FilterMatchMode.STARTS_WITH}]}, 'representative': {value: null, matchMode: FilterMatchMode.IN}, 'date': {operator: FilterOperator.AND, constraints: [{value: null, matchMode: FilterMatchMode.DATE_IS}]}, 'balance': {operator: FilterOperator.AND, constraints: [{value: null, matchMode: FilterMatchMode.EQUALS}]}, 'status': {operator: FilterOperator.OR, constraints: [{value: null, matchMode: FilterMatchMode.EQUALS}]}, 'activity': {value: null, matchMode: FilterMatchMode.BETWEEN}, 'verified': {value: null, matchMode: FilterMatchMode.EQUALS} }, loading: true, representatives: [ {name: \"Amy Elsner\", image: 'amyelsner.png'}, {name: \"Anna Fali\", image: 'annafali.png'}, {name: \"Asiya Javayant\", image: 'asiyajavayant.png'}, {name: \"Bernardo Dominic\", image: 'bernardodominic.png'}, {name: \"Elwin Sharvill\", image: 'elwinsharvill.png'}, {name: \"Ioni Bowcher\", image: 'ionibowcher.png'}, {name: \"Ivan Magalhaes\",image: 'ivanmagalhaes.png'}, {name: \"Onyama Limba\", image: 'onyamalimba.png'}, {name: \"Stephen Shaw\", image: 'stephenshaw.png'}, {name: \"XuXue Feng\", image: 'xuxuefeng.png'} ], statuses: [ 'unqualified', 'qualified', 'new', 'negotiation', 'renewal', 'proposal' ] } }, created() { this.customerService = new CustomerService(); }, mounted() { this.customerService.getCustomersLarge().then(data => { this.customers = data; this.customers.forEach(customer => customer.date = new Date(customer.date)); this.loading = false; }); }, methods: { formatDate(value) { return value.toLocaleDateString('en-US', { day: '2-digit', month: '2-digit', year: 'numeric', }); }, formatCurrency(value) { return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'}); } } } ")]),e("CodeHighlight",{attrs:{lang:"css"}},[t._v(" :deep(.p-paginator) { .p-paginator-current { margin-left: auto; } } :deep(.p-progressbar) { height: .5rem; background-color: #D8DADC; .p-progressbar-value { background-color: #607D8B; } } :deep(.p-datepicker) { min-width: 25rem; td { font-weight: 400; } } :deep(.p-datatable.p-datatable-customers) { .p-datatable-header { padding: 1rem; text-align: left; font-size: 1.5rem; } .p-paginator { padding: 1rem; } .p-datatable-thead > tr > th { text-align: left; } .p-datatable-tbody > tr > td { cursor: auto; } } ")])],1)],1)],1)},c=[],m=i(v,u,c,!1,null,null);const p=m.exports,h={data(){return{customers:null,selectedCustomers:null,filters:{global:{value:null,matchMode:l.CONTAINS},name:{operator:n.AND,constraints:[{value:null,matchMode:l.STARTS_WITH}]},"country.name":{operator:n.AND,constraints:[{value:null,matchMode:l.STARTS_WITH}]},representative:{value:null,matchMode:l.IN},date:{operator:n.AND,constraints:[{value:null,matchMode:l.DATE_IS}]},balance:{operator:n.AND,constraints:[{value:null,matchMode:l.EQUALS}]},status:{operator:n.OR,constraints:[{value:null,matchMode:l.EQUALS}]},activity:{value:null,matchMode:l.BETWEEN},verified:{value:null,matchMode:l.EQUALS}},loading:!0,representatives:[{name:"Amy Elsner",image:"amyelsner.png"},{name:"Anna Fali",image:"annafali.png"},{name:"Asiya Javayant",image:"asiyajavayant.png"},{name:"Bernardo Dominic",image:"bernardodominic.png"},{name:"Elwin Sharvill",image:"elwinsharvill.png"},{name:"Ioni Bowcher",image:"ionibowcher.png"},{name:"Ivan Magalhaes",image:"ivanmagalhaes.png"},{name:"Onyama Limba",image:"onyamalimba.png"},{name:"Stephen Shaw",image:"stephenshaw.png"},{name:"XuXue Feng",image:"xuxuefeng.png"}],statuses:["unqualified","qualified","new","negotiation","renewal","proposal"]}},created(){this.customerService=new d},mounted(){this.customerService.getCustomersLarge().then(r=>{this.customers=r,this.customers.forEach(t=>t.date=new Date(t.date)),this.loading=!1})},methods:{formatDate(r){return r.toLocaleDateString("en-US",{day:"2-digit",month:"2-digit",year:"numeric"})},formatCurrency(r){return r.toLocaleString("en-US",{style:"currency",currency:"USD"})}},components:{DataTableDoc:p}};var _=function(){var t=this,e=t._self._c;return e("div",[t._m(0),e("div",{staticClass:"content-section implementation"},[e("div",{staticClass:"card"},[e("DataTable",{staticClass:"p-datatable-customers",attrs:{value:t.customers,paginator:!0,rows:10,dataKey:"id",rowHover:!0,selection:t.selectedCustomers,filters:t.filters,filterDisplay:"menu",loading:t.loading,paginatorTemplate:"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown",rowsPerPageOptions:[10,25,50],currentPageReportTemplate:"Showing {first} to {last} of {totalRecords} entries",globalFilterFields:["name","country.name","representative.name","status"],responsiveLayout:"scroll"},on:{"update:selection":function(a){t.selectedCustomers=a},"update:filters":function(a){t.filters=a}},scopedSlots:t._u([{key:"header",fn:function(){return[e("div",{staticClass:"flex justify-content-between align-items-center"},[e("h5",{staticClass:"m-0"},[t._v("Customers")]),e("span",{staticClass:"p-input-icon-left"},[e("i",{staticClass:"pi pi-search"}),e("InputText",{attrs:{placeholder:"Keyword Search"},model:{value:t.filters.global.value,callback:function(a){t.$set(t.filters.global,"value",a)},expression:"filters['global'].value"}})],1)])]},proxy:!0},{key:"empty",fn:function(){return[t._v(" No customers found. ")]},proxy:!0},{key:"loading",fn:function(){return[t._v(" Loading customers data. Please wait. ")]},proxy:!0}])},[e("Column",{attrs:{selectionMode:"multiple",styles:{"min-width":"3rem"}}}),e("Column",{attrs:{field:"name",header:"Name",sortable:"",styles:{"min-width":"14rem"}},scopedSlots:t._u([{key:"body",fn:function({data:a}){return[t._v(" "+t._s(a.name)+" ")]}},{key:"filter",fn:function({filterModel:a}){return[e("InputText",{staticClass:"p-column-filter",attrs:{type:"text",placeholder:"Search by name"},model:{value:a.value,callback:function(o){t.$set(a,"value",o)},expression:"filterModel.value"}})]}}])}),e("Column",{attrs:{field:"country.name",header:"Country",sortable:"",filterMatchMode:"contains",styles:{"min-width":"14rem"}},scopedSlots:t._u([{key:"body",fn:function({data:a}){return[e("img",{class:"flag flag-"+a.country.code,attrs:{src:s,width:"30"}}),e("span",{staticClass:"image-text"},[t._v(t._s(a.country.name))])]}},{key:"filter",fn:function({filterModel:a}){return[e("InputText",{staticClass:"p-column-filter",attrs:{type:"text",placeholder:"Search by country"},model:{value:a.value,callback:function(o){t.$set(a,"value",o)},expression:"filterModel.value"}})]}}])}),e("Column",{attrs:{header:"Agent",sortable:"",filterField:"representative",sortField:"representative.name",showFilterMatchModes:!1,filterMenuStyle:{width:"14rem"},styles:{"min-width":"14rem"}},scopedSlots:t._u([{key:"body",fn:function({data:a}){return[e("img",{staticStyle:{"vertical-align":"middle"},attrs:{alt:a.representative.name,src:t.$publicUrl("demo/images/avatar/"+a.representative.image),width:"32"}}),e("span",{staticClass:"image-text"},[t._v(t._s(a.representative.name))])]}},{key:"filter",fn:function({filterModel:a}){return[e("div",{staticClass:"mb-3 font-bold"},[t._v("Agent Picker")]),e("MultiSelect",{staticClass:"p-column-filter",attrs:{options:t.representatives,optionLabel:"name",placeholder:"Any"},scopedSlots:t._u([{key:"option",fn:function(o){return[e("div",{staticClass:"p-multiselect-representative-option"},[e("img",{staticStyle:{"vertical-align":"middle"},attrs:{alt:o.option.name,src:t.$publicUrl("demo/images/avatar/"+o.option.image),width:"32"}}),e("span",{staticClass:"image-text"},[t._v(t._s(o.option.name))])])]}}],null,!0),model:{value:a.value,callback:function(o){t.$set(a,"value",o)},expression:"filterModel.value"}})]}}])}),e("Column",{attrs:{field:"date",header:"Date",sortable:"",dataType:"date",styles:{"min-width":"8rem"}},scopedSlots:t._u([{key:"body",fn:function({data:a}){return[t._v(" "+t._s(t.formatDate(a.date))+" ")]}},{key:"filter",fn:function({filterModel:a}){return[e("Calendar",{attrs:{dateFormat:"mm/dd/yy",placeholder:"mm/dd/yyyy"},model:{value:a.value,callback:function(o){t.$set(a,"value",o)},expression:"filterModel.value"}})]}}])}),e("Column",{attrs:{field:"balance",header:"Balance",sortable:"",dataType:"numeric",styles:{"min-width":"8rem"}},scopedSlots:t._u([{key:"body",fn:function({data:a}){return[t._v(" "+t._s(t.formatCurrency(a.balance))+" ")]}},{key:"filter",fn:function({filterModel:a}){return[e("InputNumber",{attrs:{mode:"currency",currency:"USD",locale:"en-US"},model:{value:a.value,callback:function(o){t.$set(a,"value",o)},expression:"filterModel.value"}})]}}])}),e("Column",{attrs:{field:"status",header:"Status",sortable:"",filterMenuStyle:{width:"14rem"},styles:{"min-width":"10rem"}},scopedSlots:t._u([{key:"body",fn:function({data:a}){return[e("span",{class:"customer-badge status-"+a.status},[t._v(t._s(a.status))])]}},{key:"filter",fn:function({filterModel:a}){return[e("Dropdown",{staticClass:"p-column-filter",attrs:{options:t.statuses,placeholder:"Any",showClear:!0},scopedSlots:t._u([{key:"value",fn:function(o){return[e("span",{class:"customer-badge status-"+o.value},[t._v(t._s(o.value))])]}},{key:"option",fn:function(o){return[e("span",{class:"customer-badge status-"+o.option},[t._v(t._s(o.option))])]}}],null,!0),model:{value:a.value,callback:function(o){t.$set(a,"value",o)},expression:"filterModel.value"}})]}}])}),e("Column",{attrs:{field:"activity",header:"Activity",sortable:"",showFilterMatchModes:!1,styles:{"min-width":"10rem"}},scopedSlots:t._u([{key:"body",fn:function({data:a}){return[e("ProgressBar",{attrs:{value:a.activity,showValue:!1}})]}},{key:"filter",fn:function({filterModel:a}){return[e("Slider",{staticClass:"m-3",attrs:{range:""},model:{value:a.value,callback:function(o){t.$set(a,"value",o)},expression:"filterModel.value"}}),e("div",{staticClass:"flex align-items-center justify-content-between px-2"},[e("span",[t._v(t._s(a.value?a.value[0]:0))]),e("span",[t._v(t._s(a.value?a.value[1]:100))])])]}}])}),e("Column",{attrs:{headerStyle:{"min-width":"4rem","text-align":"center"},bodyStyle:{"text-align":"center",overflow:"visible"}},scopedSlots:t._u([{key:"body",fn:function(){return[e("Button",{attrs:{type:"button",icon:"pi pi-cog"}})]},proxy:!0}])})],1)],1)]),e("DataTableDoc")],1)},f=[function(){var r=this,t=r._self._c;return t("div",{staticClass:"content-section introduction"},[t("div",{staticClass:"feature-intro"},[t("h1",[r._v("DataTable")]),t("p",[r._v("DataTable displays data in tabular format.")])])])}],b=i(h,_,f,!1,null,"0eb13608");const M=b.exports;export{M as default};
//# sourceMappingURL=DataTableDemo-BT_jaOvP.js.map

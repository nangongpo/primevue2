{"version":3,"file":"TreeTableLazyDemo-D46Q_2yb.js","sources":["../../src/views/treetable/TreeTableLazyDemo.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Lazy</span></h1>\n                <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition,\n                    children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..</p>\n            </div>\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n                    @node-expand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column field=\"size\" header=\"Size\"></Column>\n                    <Column field=\"type\" header=\"Type\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <div class=\"content-section documentation\">\n            <TabView>\n                <TabPanel header=\"Source\">\n<CodeHighlight>\n<template v-pre>\n&lt;TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n    @node-expand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\"&gt;\n    &lt;Column field=\"name\" header=\"Name\" :expander=\"true\"&gt;&lt;/Column&gt;\n    &lt;Column field=\"size\" header=\"Size\"&gt;&lt;/Column&gt;\n    &lt;Column field=\"type\" header=\"Type\"&gt;&lt;/Column&gt;\n&lt;/TreeTable&gt;\n</template>\n</CodeHighlight>\n\n<CodeHighlight lang=\"javascript\">\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i &lt; rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n</CodeHighlight>\n\n                </TabPanel>\n            </TabView>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      nodes: null,\n      rows: 10,\n      loading: false,\n      totalRecords: 0\n    }\n  },\n  mounted() {\n    this.loading = true\n\n    setTimeout(() => {\n      this.loading = false\n      this.nodes = this.loadNodes(0, this.rows)\n      this.totalRecords = 1000\n    }, 1000)\n  },\n  methods: {\n    onExpand(node) {\n      if (!node.children) {\n        this.loading = true\n\n        setTimeout(() => {\n          let lazyNode = {...node}\n\n          lazyNode.children = [\n            {\n              data: {\n                name: lazyNode.data.name + ' - 0',\n                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                type: 'File'\n              },\n            },\n            {\n              data: {\n                name: lazyNode.data.name + ' - 1',\n                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                type: 'File'\n              }\n            }\n          ]\n\n          let nodes = this.nodes.map(n => {\n            if (n.key === node.key) {\n              n = lazyNode\n            }\n\n            return n\n          })\n\n          this.loading = false\n          this.nodes = nodes\n        }, 250)\n      }\n    },\n    onPage(event) {\n      this.loading = true\n\n      //imitate delay of a backend call\n      setTimeout(() => {\n        this.loading = false\n        this.nodes = this.loadNodes(event.first, this.rows)\n      }, 1000)\n    },\n    loadNodes(first, rows) {\n      let nodes = []\n\n      for(let i = 0; i < rows; i++) {\n        let node = {\n          key: (first + i),\n          data: {\n            name: 'Item ' + (first + i),\n            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n            type: 'Type ' + (first + i)\n          },\n          leaf: false\n        }\n\n        nodes.push(node)\n      }\n\n      return nodes\n    }\n  }\n}\n</script>"],"names":["_sfc_main","node","lazyNode","nodes","n","event","first","rows","i"],"mappings":"mJAmIA,MAAAA,EAAA,CACA,MAAA,CACA,MAAA,CACA,MAAA,KACA,KAAA,GACA,QAAA,GACA,aAAA,CACA,CACA,EACA,SAAA,CACA,KAAA,QAAA,GAEA,WAAA,IAAA,CACA,KAAA,QAAA,GACA,KAAA,MAAA,KAAA,UAAA,EAAA,KAAA,IAAA,EACA,KAAA,aAAA,GACA,EAAA,GAAA,CACA,EACA,QAAA,CACA,SAAAC,EAAA,CACAA,EAAA,WACA,KAAA,QAAA,GAEA,WAAA,IAAA,CACA,IAAAC,EAAA,CAAA,GAAAD,CAAA,EAEAC,EAAA,SAAA,CACA,CACA,KAAA,CACA,KAAAA,EAAA,KAAA,KAAA,OACA,KAAA,KAAA,MAAA,KAAA,OAAA,EAAA,GAAA,EAAA,EAAA,KACA,KAAA,MACA,CACA,EACA,CACA,KAAA,CACA,KAAAA,EAAA,KAAA,KAAA,OACA,KAAA,KAAA,MAAA,KAAA,OAAA,EAAA,GAAA,EAAA,EAAA,KACA,KAAA,MACA,CACA,CACA,EAEA,IAAAC,EAAA,KAAA,MAAA,IAAAC,IACAA,EAAA,MAAAH,EAAA,MACAG,EAAAF,GAGAE,EACA,EAEA,KAAA,QAAA,GACA,KAAA,MAAAD,CACA,EAAA,GAAA,EAEA,EACA,OAAAE,EAAA,CACA,KAAA,QAAA,GAGA,WAAA,IAAA,CACA,KAAA,QAAA,GACA,KAAA,MAAA,KAAA,UAAAA,EAAA,MAAA,KAAA,IAAA,CACA,EAAA,GAAA,CACA,EACA,UAAAC,EAAAC,EAAA,CACA,IAAAJ,EAAA,CAAA,EAEA,QAAAK,EAAA,EAAAA,EAAAD,EAAAC,IAAA,CACA,IAAAP,EAAA,CACA,IAAAK,EAAAE,EACA,KAAA,CACA,KAAA,SAAAF,EAAAE,GACA,KAAA,KAAA,MAAA,KAAA,OAAA,EAAA,GAAA,EAAA,EAAA,KACA,KAAA,SAAAF,EAAAE,EACA,EACA,KAAA,EACA,EAEAL,EAAA,KAAAF,CAAA,CACA,CAEA,OAAAE,CACA,CACA,CACA"}